import 'package:flutter_platform_component/flutter_platform_component.dart';
import 'package:flutter/widgets.dart';

class FPCText {
  static Widget thin10White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin10White(
          context,
        ),
      );

  static Widget thin10WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin10WhiteAlways(
          context,
        ),
      );

  static Widget thin10Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin10Black(
          context,
        ),
      );

  static Widget thin10BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin10BlackAlways(
          context,
        ),
      );

  static Widget thin10Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin10Primary(
          context,
        ),
      );

  static Widget thin10PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin10PrimaryInternal(
          context,
        ),
      );

  static Widget thin10PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin10Primary(
          context,
        ),
      ),
    );
  }

  static Widget thin10PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin10PrimaryLight(
          context,
        ),
      );

  static Widget thin10PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin10PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget thin10PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin10PrimaryDark(
          context,
        ),
      );

  static Widget thin10PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin10PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget thin10Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin10Secondary(
          context,
        ),
      );

  static Widget thin10SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin10SecondaryInternal(
          context,
        ),
      );

  static Widget thin10SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin10Secondary(
          context,
        ),
      ),
    );
  }

  static Widget thin10SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin10SecondaryLight(
          context,
        ),
      );

  static Widget thin10SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin10SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget thin10SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin10SecondaryDark(
          context,
        ),
      );

  static Widget thin10SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin10SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget thin10Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin10Accent(
          context,
        ),
      );

  static Widget thin10AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin10AccentInternal(
          context,
        ),
      );

  static Widget thin10AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin10Accent(
          context,
        ),
      ),
    );
  }

  static Widget thin10AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin10AccentLight(
          context,
        ),
      );

  static Widget thin10AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin10AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget thin10AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin10AccentDark(
          context,
        ),
      );

  static Widget thin10AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin10AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget thin10Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin10Grey(
          context,
        ),
      );

  static Widget thin10GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin10Grey(
          context,
        ),
      ),
    );
  }

  static Widget thin10GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin10GreyLight(
          context,
        ),
      );

  static Widget thin10GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin10GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget thin10GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin10GreyDark(
          context,
        ),
      );

  static Widget thin10GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin10GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget thin10Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin10Info(
          context,
        ),
      );

  static Widget thin10InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin10Info(
          context,
        ),
      ),
    );
  }

  static Widget thin10InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin10InfoLight(
          context,
        ),
      );

  static Widget thin10InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin10InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget thin10InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin10InfoDark(
          context,
        ),
      );

  static Widget thin10InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin10InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget thin10Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin10Success(
          context,
        ),
      );

  static Widget thin10SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin10Success(
          context,
        ),
      ),
    );
  }

  static Widget thin10SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin10SuccessLight(
          context,
        ),
      );

  static Widget thin10SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin10SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget thin10SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin10SuccessDark(
          context,
        ),
      );

  static Widget thin10SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin10SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget thin10Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin10Warning(
          context,
        ),
      );

  static Widget thin10WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin10Warning(
          context,
        ),
      ),
    );
  }

  static Widget thin10WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin10WarningLight(
          context,
        ),
      );

  static Widget thin10WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin10WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget thin10WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin10WarningDark(
          context,
        ),
      );

  static Widget thin10WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin10WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget thin10Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin10Danger(
          context,
        ),
      );

  static Widget thin10DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin10Danger(
          context,
        ),
      ),
    );
  }

  static Widget thin10DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin10DangerLight(
          context,
        ),
      );

  static Widget thin10DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin10DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget thin10DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin10DangerDark(
          context,
        ),
      );

  static Widget thin10DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin10DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget thin11White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin11White(
          context,
        ),
      );

  static Widget thin11WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin11WhiteAlways(
          context,
        ),
      );

  static Widget thin11Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin11Black(
          context,
        ),
      );

  static Widget thin11BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin11BlackAlways(
          context,
        ),
      );

  static Widget thin11Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin11Primary(
          context,
        ),
      );

  static Widget thin11PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin11PrimaryInternal(
          context,
        ),
      );

  static Widget thin11PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin11Primary(
          context,
        ),
      ),
    );
  }

  static Widget thin11PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin11PrimaryLight(
          context,
        ),
      );

  static Widget thin11PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin11PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget thin11PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin11PrimaryDark(
          context,
        ),
      );

  static Widget thin11PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin11PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget thin11Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin11Secondary(
          context,
        ),
      );

  static Widget thin11SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin11SecondaryInternal(
          context,
        ),
      );

  static Widget thin11SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin11Secondary(
          context,
        ),
      ),
    );
  }

  static Widget thin11SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin11SecondaryLight(
          context,
        ),
      );

  static Widget thin11SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin11SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget thin11SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin11SecondaryDark(
          context,
        ),
      );

  static Widget thin11SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin11SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget thin11Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin11Accent(
          context,
        ),
      );

  static Widget thin11AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin11AccentInternal(
          context,
        ),
      );

  static Widget thin11AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin11Accent(
          context,
        ),
      ),
    );
  }

  static Widget thin11AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin11AccentLight(
          context,
        ),
      );

  static Widget thin11AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin11AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget thin11AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin11AccentDark(
          context,
        ),
      );

  static Widget thin11AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin11AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget thin11Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin11Grey(
          context,
        ),
      );

  static Widget thin11GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin11Grey(
          context,
        ),
      ),
    );
  }

  static Widget thin11GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin11GreyLight(
          context,
        ),
      );

  static Widget thin11GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin11GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget thin11GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin11GreyDark(
          context,
        ),
      );

  static Widget thin11GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin11GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget thin11Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin11Info(
          context,
        ),
      );

  static Widget thin11InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin11Info(
          context,
        ),
      ),
    );
  }

  static Widget thin11InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin11InfoLight(
          context,
        ),
      );

  static Widget thin11InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin11InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget thin11InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin11InfoDark(
          context,
        ),
      );

  static Widget thin11InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin11InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget thin11Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin11Success(
          context,
        ),
      );

  static Widget thin11SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin11Success(
          context,
        ),
      ),
    );
  }

  static Widget thin11SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin11SuccessLight(
          context,
        ),
      );

  static Widget thin11SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin11SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget thin11SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin11SuccessDark(
          context,
        ),
      );

  static Widget thin11SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin11SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget thin11Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin11Warning(
          context,
        ),
      );

  static Widget thin11WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin11Warning(
          context,
        ),
      ),
    );
  }

  static Widget thin11WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin11WarningLight(
          context,
        ),
      );

  static Widget thin11WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin11WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget thin11WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin11WarningDark(
          context,
        ),
      );

  static Widget thin11WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin11WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget thin11Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin11Danger(
          context,
        ),
      );

  static Widget thin11DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin11Danger(
          context,
        ),
      ),
    );
  }

  static Widget thin11DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin11DangerLight(
          context,
        ),
      );

  static Widget thin11DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin11DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget thin11DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin11DangerDark(
          context,
        ),
      );

  static Widget thin11DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin11DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget thin12White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin12White(
          context,
        ),
      );

  static Widget thin12WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin12WhiteAlways(
          context,
        ),
      );

  static Widget thin12Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin12Black(
          context,
        ),
      );

  static Widget thin12BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin12BlackAlways(
          context,
        ),
      );

  static Widget thin12Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin12Primary(
          context,
        ),
      );

  static Widget thin12PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin12PrimaryInternal(
          context,
        ),
      );

  static Widget thin12PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin12Primary(
          context,
        ),
      ),
    );
  }

  static Widget thin12PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin12PrimaryLight(
          context,
        ),
      );

  static Widget thin12PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin12PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget thin12PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin12PrimaryDark(
          context,
        ),
      );

  static Widget thin12PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin12PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget thin12Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin12Secondary(
          context,
        ),
      );

  static Widget thin12SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin12SecondaryInternal(
          context,
        ),
      );

  static Widget thin12SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin12Secondary(
          context,
        ),
      ),
    );
  }

  static Widget thin12SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin12SecondaryLight(
          context,
        ),
      );

  static Widget thin12SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin12SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget thin12SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin12SecondaryDark(
          context,
        ),
      );

  static Widget thin12SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin12SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget thin12Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin12Accent(
          context,
        ),
      );

  static Widget thin12AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin12AccentInternal(
          context,
        ),
      );

  static Widget thin12AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin12Accent(
          context,
        ),
      ),
    );
  }

  static Widget thin12AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin12AccentLight(
          context,
        ),
      );

  static Widget thin12AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin12AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget thin12AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin12AccentDark(
          context,
        ),
      );

  static Widget thin12AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin12AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget thin12Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin12Grey(
          context,
        ),
      );

  static Widget thin12GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin12Grey(
          context,
        ),
      ),
    );
  }

  static Widget thin12GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin12GreyLight(
          context,
        ),
      );

  static Widget thin12GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin12GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget thin12GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin12GreyDark(
          context,
        ),
      );

  static Widget thin12GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin12GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget thin12Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin12Info(
          context,
        ),
      );

  static Widget thin12InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin12Info(
          context,
        ),
      ),
    );
  }

  static Widget thin12InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin12InfoLight(
          context,
        ),
      );

  static Widget thin12InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin12InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget thin12InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin12InfoDark(
          context,
        ),
      );

  static Widget thin12InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin12InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget thin12Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin12Success(
          context,
        ),
      );

  static Widget thin12SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin12Success(
          context,
        ),
      ),
    );
  }

  static Widget thin12SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin12SuccessLight(
          context,
        ),
      );

  static Widget thin12SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin12SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget thin12SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin12SuccessDark(
          context,
        ),
      );

  static Widget thin12SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin12SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget thin12Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin12Warning(
          context,
        ),
      );

  static Widget thin12WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin12Warning(
          context,
        ),
      ),
    );
  }

  static Widget thin12WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin12WarningLight(
          context,
        ),
      );

  static Widget thin12WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin12WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget thin12WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin12WarningDark(
          context,
        ),
      );

  static Widget thin12WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin12WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget thin12Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin12Danger(
          context,
        ),
      );

  static Widget thin12DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin12Danger(
          context,
        ),
      ),
    );
  }

  static Widget thin12DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin12DangerLight(
          context,
        ),
      );

  static Widget thin12DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin12DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget thin12DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin12DangerDark(
          context,
        ),
      );

  static Widget thin12DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin12DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget thin13White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin13White(
          context,
        ),
      );

  static Widget thin13WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin13WhiteAlways(
          context,
        ),
      );

  static Widget thin13Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin13Black(
          context,
        ),
      );

  static Widget thin13BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin13BlackAlways(
          context,
        ),
      );

  static Widget thin13Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin13Primary(
          context,
        ),
      );

  static Widget thin13PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin13PrimaryInternal(
          context,
        ),
      );

  static Widget thin13PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin13Primary(
          context,
        ),
      ),
    );
  }

  static Widget thin13PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin13PrimaryLight(
          context,
        ),
      );

  static Widget thin13PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin13PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget thin13PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin13PrimaryDark(
          context,
        ),
      );

  static Widget thin13PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin13PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget thin13Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin13Secondary(
          context,
        ),
      );

  static Widget thin13SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin13SecondaryInternal(
          context,
        ),
      );

  static Widget thin13SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin13Secondary(
          context,
        ),
      ),
    );
  }

  static Widget thin13SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin13SecondaryLight(
          context,
        ),
      );

  static Widget thin13SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin13SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget thin13SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin13SecondaryDark(
          context,
        ),
      );

  static Widget thin13SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin13SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget thin13Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin13Accent(
          context,
        ),
      );

  static Widget thin13AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin13AccentInternal(
          context,
        ),
      );

  static Widget thin13AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin13Accent(
          context,
        ),
      ),
    );
  }

  static Widget thin13AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin13AccentLight(
          context,
        ),
      );

  static Widget thin13AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin13AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget thin13AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin13AccentDark(
          context,
        ),
      );

  static Widget thin13AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin13AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget thin13Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin13Grey(
          context,
        ),
      );

  static Widget thin13GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin13Grey(
          context,
        ),
      ),
    );
  }

  static Widget thin13GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin13GreyLight(
          context,
        ),
      );

  static Widget thin13GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin13GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget thin13GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin13GreyDark(
          context,
        ),
      );

  static Widget thin13GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin13GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget thin13Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin13Info(
          context,
        ),
      );

  static Widget thin13InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin13Info(
          context,
        ),
      ),
    );
  }

  static Widget thin13InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin13InfoLight(
          context,
        ),
      );

  static Widget thin13InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin13InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget thin13InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin13InfoDark(
          context,
        ),
      );

  static Widget thin13InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin13InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget thin13Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin13Success(
          context,
        ),
      );

  static Widget thin13SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin13Success(
          context,
        ),
      ),
    );
  }

  static Widget thin13SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin13SuccessLight(
          context,
        ),
      );

  static Widget thin13SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin13SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget thin13SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin13SuccessDark(
          context,
        ),
      );

  static Widget thin13SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin13SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget thin13Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin13Warning(
          context,
        ),
      );

  static Widget thin13WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin13Warning(
          context,
        ),
      ),
    );
  }

  static Widget thin13WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin13WarningLight(
          context,
        ),
      );

  static Widget thin13WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin13WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget thin13WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin13WarningDark(
          context,
        ),
      );

  static Widget thin13WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin13WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget thin13Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin13Danger(
          context,
        ),
      );

  static Widget thin13DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin13Danger(
          context,
        ),
      ),
    );
  }

  static Widget thin13DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin13DangerLight(
          context,
        ),
      );

  static Widget thin13DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin13DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget thin13DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin13DangerDark(
          context,
        ),
      );

  static Widget thin13DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin13DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget thin14White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin14White(
          context,
        ),
      );

  static Widget thin14WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin14WhiteAlways(
          context,
        ),
      );

  static Widget thin14Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin14Black(
          context,
        ),
      );

  static Widget thin14BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin14BlackAlways(
          context,
        ),
      );

  static Widget thin14Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin14Primary(
          context,
        ),
      );

  static Widget thin14PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin14PrimaryInternal(
          context,
        ),
      );

  static Widget thin14PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin14Primary(
          context,
        ),
      ),
    );
  }

  static Widget thin14PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin14PrimaryLight(
          context,
        ),
      );

  static Widget thin14PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin14PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget thin14PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin14PrimaryDark(
          context,
        ),
      );

  static Widget thin14PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin14PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget thin14Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin14Secondary(
          context,
        ),
      );

  static Widget thin14SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin14SecondaryInternal(
          context,
        ),
      );

  static Widget thin14SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin14Secondary(
          context,
        ),
      ),
    );
  }

  static Widget thin14SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin14SecondaryLight(
          context,
        ),
      );

  static Widget thin14SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin14SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget thin14SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin14SecondaryDark(
          context,
        ),
      );

  static Widget thin14SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin14SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget thin14Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin14Accent(
          context,
        ),
      );

  static Widget thin14AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin14AccentInternal(
          context,
        ),
      );

  static Widget thin14AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin14Accent(
          context,
        ),
      ),
    );
  }

  static Widget thin14AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin14AccentLight(
          context,
        ),
      );

  static Widget thin14AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin14AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget thin14AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin14AccentDark(
          context,
        ),
      );

  static Widget thin14AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin14AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget thin14Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin14Grey(
          context,
        ),
      );

  static Widget thin14GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin14Grey(
          context,
        ),
      ),
    );
  }

  static Widget thin14GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin14GreyLight(
          context,
        ),
      );

  static Widget thin14GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin14GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget thin14GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin14GreyDark(
          context,
        ),
      );

  static Widget thin14GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin14GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget thin14Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin14Info(
          context,
        ),
      );

  static Widget thin14InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin14Info(
          context,
        ),
      ),
    );
  }

  static Widget thin14InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin14InfoLight(
          context,
        ),
      );

  static Widget thin14InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin14InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget thin14InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin14InfoDark(
          context,
        ),
      );

  static Widget thin14InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin14InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget thin14Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin14Success(
          context,
        ),
      );

  static Widget thin14SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin14Success(
          context,
        ),
      ),
    );
  }

  static Widget thin14SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin14SuccessLight(
          context,
        ),
      );

  static Widget thin14SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin14SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget thin14SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin14SuccessDark(
          context,
        ),
      );

  static Widget thin14SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin14SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget thin14Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin14Warning(
          context,
        ),
      );

  static Widget thin14WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin14Warning(
          context,
        ),
      ),
    );
  }

  static Widget thin14WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin14WarningLight(
          context,
        ),
      );

  static Widget thin14WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin14WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget thin14WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin14WarningDark(
          context,
        ),
      );

  static Widget thin14WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin14WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget thin14Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin14Danger(
          context,
        ),
      );

  static Widget thin14DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin14Danger(
          context,
        ),
      ),
    );
  }

  static Widget thin14DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin14DangerLight(
          context,
        ),
      );

  static Widget thin14DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin14DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget thin14DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin14DangerDark(
          context,
        ),
      );

  static Widget thin14DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin14DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget thin15White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin15White(
          context,
        ),
      );

  static Widget thin15WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin15WhiteAlways(
          context,
        ),
      );

  static Widget thin15Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin15Black(
          context,
        ),
      );

  static Widget thin15BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin15BlackAlways(
          context,
        ),
      );

  static Widget thin15Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin15Primary(
          context,
        ),
      );

  static Widget thin15PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin15PrimaryInternal(
          context,
        ),
      );

  static Widget thin15PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin15Primary(
          context,
        ),
      ),
    );
  }

  static Widget thin15PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin15PrimaryLight(
          context,
        ),
      );

  static Widget thin15PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin15PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget thin15PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin15PrimaryDark(
          context,
        ),
      );

  static Widget thin15PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin15PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget thin15Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin15Secondary(
          context,
        ),
      );

  static Widget thin15SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin15SecondaryInternal(
          context,
        ),
      );

  static Widget thin15SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin15Secondary(
          context,
        ),
      ),
    );
  }

  static Widget thin15SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin15SecondaryLight(
          context,
        ),
      );

  static Widget thin15SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin15SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget thin15SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin15SecondaryDark(
          context,
        ),
      );

  static Widget thin15SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin15SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget thin15Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin15Accent(
          context,
        ),
      );

  static Widget thin15AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin15AccentInternal(
          context,
        ),
      );

  static Widget thin15AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin15Accent(
          context,
        ),
      ),
    );
  }

  static Widget thin15AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin15AccentLight(
          context,
        ),
      );

  static Widget thin15AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin15AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget thin15AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin15AccentDark(
          context,
        ),
      );

  static Widget thin15AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin15AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget thin15Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin15Grey(
          context,
        ),
      );

  static Widget thin15GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin15Grey(
          context,
        ),
      ),
    );
  }

  static Widget thin15GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin15GreyLight(
          context,
        ),
      );

  static Widget thin15GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin15GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget thin15GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin15GreyDark(
          context,
        ),
      );

  static Widget thin15GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin15GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget thin15Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin15Info(
          context,
        ),
      );

  static Widget thin15InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin15Info(
          context,
        ),
      ),
    );
  }

  static Widget thin15InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin15InfoLight(
          context,
        ),
      );

  static Widget thin15InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin15InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget thin15InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin15InfoDark(
          context,
        ),
      );

  static Widget thin15InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin15InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget thin15Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin15Success(
          context,
        ),
      );

  static Widget thin15SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin15Success(
          context,
        ),
      ),
    );
  }

  static Widget thin15SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin15SuccessLight(
          context,
        ),
      );

  static Widget thin15SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin15SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget thin15SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin15SuccessDark(
          context,
        ),
      );

  static Widget thin15SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin15SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget thin15Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin15Warning(
          context,
        ),
      );

  static Widget thin15WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin15Warning(
          context,
        ),
      ),
    );
  }

  static Widget thin15WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin15WarningLight(
          context,
        ),
      );

  static Widget thin15WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin15WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget thin15WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin15WarningDark(
          context,
        ),
      );

  static Widget thin15WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin15WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget thin15Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin15Danger(
          context,
        ),
      );

  static Widget thin15DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin15Danger(
          context,
        ),
      ),
    );
  }

  static Widget thin15DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin15DangerLight(
          context,
        ),
      );

  static Widget thin15DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin15DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget thin15DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin15DangerDark(
          context,
        ),
      );

  static Widget thin15DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin15DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget thin16White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin16White(
          context,
        ),
      );

  static Widget thin16WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin16WhiteAlways(
          context,
        ),
      );

  static Widget thin16Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin16Black(
          context,
        ),
      );

  static Widget thin16BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin16BlackAlways(
          context,
        ),
      );

  static Widget thin16Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin16Primary(
          context,
        ),
      );

  static Widget thin16PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin16PrimaryInternal(
          context,
        ),
      );

  static Widget thin16PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin16Primary(
          context,
        ),
      ),
    );
  }

  static Widget thin16PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin16PrimaryLight(
          context,
        ),
      );

  static Widget thin16PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin16PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget thin16PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin16PrimaryDark(
          context,
        ),
      );

  static Widget thin16PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin16PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget thin16Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin16Secondary(
          context,
        ),
      );

  static Widget thin16SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin16SecondaryInternal(
          context,
        ),
      );

  static Widget thin16SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin16Secondary(
          context,
        ),
      ),
    );
  }

  static Widget thin16SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin16SecondaryLight(
          context,
        ),
      );

  static Widget thin16SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin16SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget thin16SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin16SecondaryDark(
          context,
        ),
      );

  static Widget thin16SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin16SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget thin16Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin16Accent(
          context,
        ),
      );

  static Widget thin16AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin16AccentInternal(
          context,
        ),
      );

  static Widget thin16AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin16Accent(
          context,
        ),
      ),
    );
  }

  static Widget thin16AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin16AccentLight(
          context,
        ),
      );

  static Widget thin16AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin16AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget thin16AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin16AccentDark(
          context,
        ),
      );

  static Widget thin16AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin16AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget thin16Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin16Grey(
          context,
        ),
      );

  static Widget thin16GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin16Grey(
          context,
        ),
      ),
    );
  }

  static Widget thin16GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin16GreyLight(
          context,
        ),
      );

  static Widget thin16GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin16GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget thin16GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin16GreyDark(
          context,
        ),
      );

  static Widget thin16GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin16GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget thin16Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin16Info(
          context,
        ),
      );

  static Widget thin16InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin16Info(
          context,
        ),
      ),
    );
  }

  static Widget thin16InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin16InfoLight(
          context,
        ),
      );

  static Widget thin16InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin16InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget thin16InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin16InfoDark(
          context,
        ),
      );

  static Widget thin16InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin16InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget thin16Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin16Success(
          context,
        ),
      );

  static Widget thin16SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin16Success(
          context,
        ),
      ),
    );
  }

  static Widget thin16SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin16SuccessLight(
          context,
        ),
      );

  static Widget thin16SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin16SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget thin16SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin16SuccessDark(
          context,
        ),
      );

  static Widget thin16SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin16SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget thin16Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin16Warning(
          context,
        ),
      );

  static Widget thin16WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin16Warning(
          context,
        ),
      ),
    );
  }

  static Widget thin16WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin16WarningLight(
          context,
        ),
      );

  static Widget thin16WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin16WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget thin16WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin16WarningDark(
          context,
        ),
      );

  static Widget thin16WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin16WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget thin16Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin16Danger(
          context,
        ),
      );

  static Widget thin16DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin16Danger(
          context,
        ),
      ),
    );
  }

  static Widget thin16DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin16DangerLight(
          context,
        ),
      );

  static Widget thin16DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin16DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget thin16DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin16DangerDark(
          context,
        ),
      );

  static Widget thin16DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin16DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget thin17White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin17White(
          context,
        ),
      );

  static Widget thin17WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin17WhiteAlways(
          context,
        ),
      );

  static Widget thin17Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin17Black(
          context,
        ),
      );

  static Widget thin17BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin17BlackAlways(
          context,
        ),
      );

  static Widget thin17Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin17Primary(
          context,
        ),
      );

  static Widget thin17PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin17PrimaryInternal(
          context,
        ),
      );

  static Widget thin17PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin17Primary(
          context,
        ),
      ),
    );
  }

  static Widget thin17PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin17PrimaryLight(
          context,
        ),
      );

  static Widget thin17PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin17PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget thin17PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin17PrimaryDark(
          context,
        ),
      );

  static Widget thin17PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin17PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget thin17Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin17Secondary(
          context,
        ),
      );

  static Widget thin17SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin17SecondaryInternal(
          context,
        ),
      );

  static Widget thin17SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin17Secondary(
          context,
        ),
      ),
    );
  }

  static Widget thin17SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin17SecondaryLight(
          context,
        ),
      );

  static Widget thin17SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin17SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget thin17SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin17SecondaryDark(
          context,
        ),
      );

  static Widget thin17SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin17SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget thin17Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin17Accent(
          context,
        ),
      );

  static Widget thin17AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin17AccentInternal(
          context,
        ),
      );

  static Widget thin17AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin17Accent(
          context,
        ),
      ),
    );
  }

  static Widget thin17AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin17AccentLight(
          context,
        ),
      );

  static Widget thin17AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin17AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget thin17AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin17AccentDark(
          context,
        ),
      );

  static Widget thin17AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin17AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget thin17Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin17Grey(
          context,
        ),
      );

  static Widget thin17GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin17Grey(
          context,
        ),
      ),
    );
  }

  static Widget thin17GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin17GreyLight(
          context,
        ),
      );

  static Widget thin17GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin17GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget thin17GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin17GreyDark(
          context,
        ),
      );

  static Widget thin17GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin17GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget thin17Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin17Info(
          context,
        ),
      );

  static Widget thin17InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin17Info(
          context,
        ),
      ),
    );
  }

  static Widget thin17InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin17InfoLight(
          context,
        ),
      );

  static Widget thin17InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin17InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget thin17InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin17InfoDark(
          context,
        ),
      );

  static Widget thin17InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin17InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget thin17Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin17Success(
          context,
        ),
      );

  static Widget thin17SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin17Success(
          context,
        ),
      ),
    );
  }

  static Widget thin17SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin17SuccessLight(
          context,
        ),
      );

  static Widget thin17SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin17SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget thin17SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin17SuccessDark(
          context,
        ),
      );

  static Widget thin17SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin17SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget thin17Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin17Warning(
          context,
        ),
      );

  static Widget thin17WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin17Warning(
          context,
        ),
      ),
    );
  }

  static Widget thin17WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin17WarningLight(
          context,
        ),
      );

  static Widget thin17WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin17WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget thin17WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin17WarningDark(
          context,
        ),
      );

  static Widget thin17WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin17WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget thin17Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin17Danger(
          context,
        ),
      );

  static Widget thin17DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin17Danger(
          context,
        ),
      ),
    );
  }

  static Widget thin17DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin17DangerLight(
          context,
        ),
      );

  static Widget thin17DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin17DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget thin17DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin17DangerDark(
          context,
        ),
      );

  static Widget thin17DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin17DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget thin18White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin18White(
          context,
        ),
      );

  static Widget thin18WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin18WhiteAlways(
          context,
        ),
      );

  static Widget thin18Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin18Black(
          context,
        ),
      );

  static Widget thin18BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin18BlackAlways(
          context,
        ),
      );

  static Widget thin18Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin18Primary(
          context,
        ),
      );

  static Widget thin18PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin18PrimaryInternal(
          context,
        ),
      );

  static Widget thin18PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin18Primary(
          context,
        ),
      ),
    );
  }

  static Widget thin18PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin18PrimaryLight(
          context,
        ),
      );

  static Widget thin18PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin18PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget thin18PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin18PrimaryDark(
          context,
        ),
      );

  static Widget thin18PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin18PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget thin18Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin18Secondary(
          context,
        ),
      );

  static Widget thin18SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin18SecondaryInternal(
          context,
        ),
      );

  static Widget thin18SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin18Secondary(
          context,
        ),
      ),
    );
  }

  static Widget thin18SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin18SecondaryLight(
          context,
        ),
      );

  static Widget thin18SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin18SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget thin18SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin18SecondaryDark(
          context,
        ),
      );

  static Widget thin18SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin18SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget thin18Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin18Accent(
          context,
        ),
      );

  static Widget thin18AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin18AccentInternal(
          context,
        ),
      );

  static Widget thin18AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin18Accent(
          context,
        ),
      ),
    );
  }

  static Widget thin18AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin18AccentLight(
          context,
        ),
      );

  static Widget thin18AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin18AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget thin18AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin18AccentDark(
          context,
        ),
      );

  static Widget thin18AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin18AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget thin18Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin18Grey(
          context,
        ),
      );

  static Widget thin18GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin18Grey(
          context,
        ),
      ),
    );
  }

  static Widget thin18GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin18GreyLight(
          context,
        ),
      );

  static Widget thin18GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin18GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget thin18GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin18GreyDark(
          context,
        ),
      );

  static Widget thin18GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin18GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget thin18Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin18Info(
          context,
        ),
      );

  static Widget thin18InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin18Info(
          context,
        ),
      ),
    );
  }

  static Widget thin18InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin18InfoLight(
          context,
        ),
      );

  static Widget thin18InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin18InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget thin18InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin18InfoDark(
          context,
        ),
      );

  static Widget thin18InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin18InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget thin18Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin18Success(
          context,
        ),
      );

  static Widget thin18SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin18Success(
          context,
        ),
      ),
    );
  }

  static Widget thin18SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin18SuccessLight(
          context,
        ),
      );

  static Widget thin18SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin18SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget thin18SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin18SuccessDark(
          context,
        ),
      );

  static Widget thin18SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin18SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget thin18Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin18Warning(
          context,
        ),
      );

  static Widget thin18WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin18Warning(
          context,
        ),
      ),
    );
  }

  static Widget thin18WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin18WarningLight(
          context,
        ),
      );

  static Widget thin18WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin18WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget thin18WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin18WarningDark(
          context,
        ),
      );

  static Widget thin18WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin18WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget thin18Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin18Danger(
          context,
        ),
      );

  static Widget thin18DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin18Danger(
          context,
        ),
      ),
    );
  }

  static Widget thin18DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin18DangerLight(
          context,
        ),
      );

  static Widget thin18DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin18DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget thin18DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin18DangerDark(
          context,
        ),
      );

  static Widget thin18DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin18DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget thin19White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin19White(
          context,
        ),
      );

  static Widget thin19WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin19WhiteAlways(
          context,
        ),
      );

  static Widget thin19Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin19Black(
          context,
        ),
      );

  static Widget thin19BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin19BlackAlways(
          context,
        ),
      );

  static Widget thin19Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin19Primary(
          context,
        ),
      );

  static Widget thin19PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin19PrimaryInternal(
          context,
        ),
      );

  static Widget thin19PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin19Primary(
          context,
        ),
      ),
    );
  }

  static Widget thin19PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin19PrimaryLight(
          context,
        ),
      );

  static Widget thin19PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin19PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget thin19PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin19PrimaryDark(
          context,
        ),
      );

  static Widget thin19PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin19PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget thin19Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin19Secondary(
          context,
        ),
      );

  static Widget thin19SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin19SecondaryInternal(
          context,
        ),
      );

  static Widget thin19SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin19Secondary(
          context,
        ),
      ),
    );
  }

  static Widget thin19SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin19SecondaryLight(
          context,
        ),
      );

  static Widget thin19SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin19SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget thin19SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin19SecondaryDark(
          context,
        ),
      );

  static Widget thin19SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin19SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget thin19Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin19Accent(
          context,
        ),
      );

  static Widget thin19AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin19AccentInternal(
          context,
        ),
      );

  static Widget thin19AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin19Accent(
          context,
        ),
      ),
    );
  }

  static Widget thin19AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin19AccentLight(
          context,
        ),
      );

  static Widget thin19AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin19AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget thin19AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin19AccentDark(
          context,
        ),
      );

  static Widget thin19AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin19AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget thin19Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin19Grey(
          context,
        ),
      );

  static Widget thin19GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin19Grey(
          context,
        ),
      ),
    );
  }

  static Widget thin19GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin19GreyLight(
          context,
        ),
      );

  static Widget thin19GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin19GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget thin19GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin19GreyDark(
          context,
        ),
      );

  static Widget thin19GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin19GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget thin19Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin19Info(
          context,
        ),
      );

  static Widget thin19InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin19Info(
          context,
        ),
      ),
    );
  }

  static Widget thin19InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin19InfoLight(
          context,
        ),
      );

  static Widget thin19InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin19InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget thin19InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin19InfoDark(
          context,
        ),
      );

  static Widget thin19InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin19InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget thin19Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin19Success(
          context,
        ),
      );

  static Widget thin19SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin19Success(
          context,
        ),
      ),
    );
  }

  static Widget thin19SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin19SuccessLight(
          context,
        ),
      );

  static Widget thin19SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin19SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget thin19SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin19SuccessDark(
          context,
        ),
      );

  static Widget thin19SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin19SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget thin19Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin19Warning(
          context,
        ),
      );

  static Widget thin19WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin19Warning(
          context,
        ),
      ),
    );
  }

  static Widget thin19WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin19WarningLight(
          context,
        ),
      );

  static Widget thin19WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin19WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget thin19WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin19WarningDark(
          context,
        ),
      );

  static Widget thin19WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin19WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget thin19Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin19Danger(
          context,
        ),
      );

  static Widget thin19DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin19Danger(
          context,
        ),
      ),
    );
  }

  static Widget thin19DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin19DangerLight(
          context,
        ),
      );

  static Widget thin19DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin19DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget thin19DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin19DangerDark(
          context,
        ),
      );

  static Widget thin19DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin19DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget thin20White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin20White(
          context,
        ),
      );

  static Widget thin20WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin20WhiteAlways(
          context,
        ),
      );

  static Widget thin20Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin20Black(
          context,
        ),
      );

  static Widget thin20BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin20BlackAlways(
          context,
        ),
      );

  static Widget thin20Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin20Primary(
          context,
        ),
      );

  static Widget thin20PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin20PrimaryInternal(
          context,
        ),
      );

  static Widget thin20PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin20Primary(
          context,
        ),
      ),
    );
  }

  static Widget thin20PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin20PrimaryLight(
          context,
        ),
      );

  static Widget thin20PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin20PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget thin20PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin20PrimaryDark(
          context,
        ),
      );

  static Widget thin20PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin20PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget thin20Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin20Secondary(
          context,
        ),
      );

  static Widget thin20SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin20SecondaryInternal(
          context,
        ),
      );

  static Widget thin20SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin20Secondary(
          context,
        ),
      ),
    );
  }

  static Widget thin20SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin20SecondaryLight(
          context,
        ),
      );

  static Widget thin20SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin20SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget thin20SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin20SecondaryDark(
          context,
        ),
      );

  static Widget thin20SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin20SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget thin20Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin20Accent(
          context,
        ),
      );

  static Widget thin20AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin20AccentInternal(
          context,
        ),
      );

  static Widget thin20AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin20Accent(
          context,
        ),
      ),
    );
  }

  static Widget thin20AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin20AccentLight(
          context,
        ),
      );

  static Widget thin20AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin20AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget thin20AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin20AccentDark(
          context,
        ),
      );

  static Widget thin20AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin20AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget thin20Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin20Grey(
          context,
        ),
      );

  static Widget thin20GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin20Grey(
          context,
        ),
      ),
    );
  }

  static Widget thin20GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin20GreyLight(
          context,
        ),
      );

  static Widget thin20GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin20GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget thin20GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin20GreyDark(
          context,
        ),
      );

  static Widget thin20GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin20GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget thin20Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin20Info(
          context,
        ),
      );

  static Widget thin20InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin20Info(
          context,
        ),
      ),
    );
  }

  static Widget thin20InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin20InfoLight(
          context,
        ),
      );

  static Widget thin20InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin20InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget thin20InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin20InfoDark(
          context,
        ),
      );

  static Widget thin20InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin20InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget thin20Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin20Success(
          context,
        ),
      );

  static Widget thin20SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin20Success(
          context,
        ),
      ),
    );
  }

  static Widget thin20SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin20SuccessLight(
          context,
        ),
      );

  static Widget thin20SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin20SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget thin20SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin20SuccessDark(
          context,
        ),
      );

  static Widget thin20SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin20SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget thin20Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin20Warning(
          context,
        ),
      );

  static Widget thin20WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin20Warning(
          context,
        ),
      ),
    );
  }

  static Widget thin20WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin20WarningLight(
          context,
        ),
      );

  static Widget thin20WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin20WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget thin20WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin20WarningDark(
          context,
        ),
      );

  static Widget thin20WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin20WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget thin20Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin20Danger(
          context,
        ),
      );

  static Widget thin20DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin20Danger(
          context,
        ),
      ),
    );
  }

  static Widget thin20DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin20DangerLight(
          context,
        ),
      );

  static Widget thin20DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin20DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget thin20DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin20DangerDark(
          context,
        ),
      );

  static Widget thin20DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin20DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget thin22White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin22White(
          context,
        ),
      );

  static Widget thin22WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin22WhiteAlways(
          context,
        ),
      );

  static Widget thin22Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin22Black(
          context,
        ),
      );

  static Widget thin22BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin22BlackAlways(
          context,
        ),
      );

  static Widget thin22Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin22Primary(
          context,
        ),
      );

  static Widget thin22PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin22PrimaryInternal(
          context,
        ),
      );

  static Widget thin22PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin22Primary(
          context,
        ),
      ),
    );
  }

  static Widget thin22PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin22PrimaryLight(
          context,
        ),
      );

  static Widget thin22PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin22PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget thin22PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin22PrimaryDark(
          context,
        ),
      );

  static Widget thin22PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin22PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget thin22Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin22Secondary(
          context,
        ),
      );

  static Widget thin22SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin22SecondaryInternal(
          context,
        ),
      );

  static Widget thin22SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin22Secondary(
          context,
        ),
      ),
    );
  }

  static Widget thin22SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin22SecondaryLight(
          context,
        ),
      );

  static Widget thin22SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin22SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget thin22SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin22SecondaryDark(
          context,
        ),
      );

  static Widget thin22SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin22SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget thin22Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin22Accent(
          context,
        ),
      );

  static Widget thin22AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin22AccentInternal(
          context,
        ),
      );

  static Widget thin22AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin22Accent(
          context,
        ),
      ),
    );
  }

  static Widget thin22AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin22AccentLight(
          context,
        ),
      );

  static Widget thin22AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin22AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget thin22AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin22AccentDark(
          context,
        ),
      );

  static Widget thin22AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin22AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget thin22Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin22Grey(
          context,
        ),
      );

  static Widget thin22GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin22Grey(
          context,
        ),
      ),
    );
  }

  static Widget thin22GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin22GreyLight(
          context,
        ),
      );

  static Widget thin22GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin22GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget thin22GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin22GreyDark(
          context,
        ),
      );

  static Widget thin22GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin22GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget thin22Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin22Info(
          context,
        ),
      );

  static Widget thin22InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin22Info(
          context,
        ),
      ),
    );
  }

  static Widget thin22InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin22InfoLight(
          context,
        ),
      );

  static Widget thin22InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin22InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget thin22InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin22InfoDark(
          context,
        ),
      );

  static Widget thin22InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin22InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget thin22Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin22Success(
          context,
        ),
      );

  static Widget thin22SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin22Success(
          context,
        ),
      ),
    );
  }

  static Widget thin22SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin22SuccessLight(
          context,
        ),
      );

  static Widget thin22SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin22SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget thin22SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin22SuccessDark(
          context,
        ),
      );

  static Widget thin22SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin22SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget thin22Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin22Warning(
          context,
        ),
      );

  static Widget thin22WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin22Warning(
          context,
        ),
      ),
    );
  }

  static Widget thin22WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin22WarningLight(
          context,
        ),
      );

  static Widget thin22WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin22WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget thin22WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin22WarningDark(
          context,
        ),
      );

  static Widget thin22WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin22WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget thin22Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin22Danger(
          context,
        ),
      );

  static Widget thin22DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin22Danger(
          context,
        ),
      ),
    );
  }

  static Widget thin22DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin22DangerLight(
          context,
        ),
      );

  static Widget thin22DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin22DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget thin22DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin22DangerDark(
          context,
        ),
      );

  static Widget thin22DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin22DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget thin24White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin24White(
          context,
        ),
      );

  static Widget thin24WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin24WhiteAlways(
          context,
        ),
      );

  static Widget thin24Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin24Black(
          context,
        ),
      );

  static Widget thin24BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin24BlackAlways(
          context,
        ),
      );

  static Widget thin24Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin24Primary(
          context,
        ),
      );

  static Widget thin24PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin24PrimaryInternal(
          context,
        ),
      );

  static Widget thin24PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin24Primary(
          context,
        ),
      ),
    );
  }

  static Widget thin24PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin24PrimaryLight(
          context,
        ),
      );

  static Widget thin24PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin24PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget thin24PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin24PrimaryDark(
          context,
        ),
      );

  static Widget thin24PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin24PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget thin24Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin24Secondary(
          context,
        ),
      );

  static Widget thin24SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin24SecondaryInternal(
          context,
        ),
      );

  static Widget thin24SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin24Secondary(
          context,
        ),
      ),
    );
  }

  static Widget thin24SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin24SecondaryLight(
          context,
        ),
      );

  static Widget thin24SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin24SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget thin24SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin24SecondaryDark(
          context,
        ),
      );

  static Widget thin24SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin24SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget thin24Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin24Accent(
          context,
        ),
      );

  static Widget thin24AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin24AccentInternal(
          context,
        ),
      );

  static Widget thin24AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin24Accent(
          context,
        ),
      ),
    );
  }

  static Widget thin24AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin24AccentLight(
          context,
        ),
      );

  static Widget thin24AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin24AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget thin24AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin24AccentDark(
          context,
        ),
      );

  static Widget thin24AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin24AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget thin24Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin24Grey(
          context,
        ),
      );

  static Widget thin24GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin24Grey(
          context,
        ),
      ),
    );
  }

  static Widget thin24GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin24GreyLight(
          context,
        ),
      );

  static Widget thin24GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin24GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget thin24GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin24GreyDark(
          context,
        ),
      );

  static Widget thin24GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin24GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget thin24Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin24Info(
          context,
        ),
      );

  static Widget thin24InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin24Info(
          context,
        ),
      ),
    );
  }

  static Widget thin24InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin24InfoLight(
          context,
        ),
      );

  static Widget thin24InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin24InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget thin24InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin24InfoDark(
          context,
        ),
      );

  static Widget thin24InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin24InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget thin24Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin24Success(
          context,
        ),
      );

  static Widget thin24SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin24Success(
          context,
        ),
      ),
    );
  }

  static Widget thin24SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin24SuccessLight(
          context,
        ),
      );

  static Widget thin24SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin24SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget thin24SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin24SuccessDark(
          context,
        ),
      );

  static Widget thin24SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin24SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget thin24Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin24Warning(
          context,
        ),
      );

  static Widget thin24WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin24Warning(
          context,
        ),
      ),
    );
  }

  static Widget thin24WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin24WarningLight(
          context,
        ),
      );

  static Widget thin24WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin24WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget thin24WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin24WarningDark(
          context,
        ),
      );

  static Widget thin24WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin24WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget thin24Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin24Danger(
          context,
        ),
      );

  static Widget thin24DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin24Danger(
          context,
        ),
      ),
    );
  }

  static Widget thin24DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin24DangerLight(
          context,
        ),
      );

  static Widget thin24DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin24DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget thin24DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin24DangerDark(
          context,
        ),
      );

  static Widget thin24DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin24DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget thin26White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin26White(
          context,
        ),
      );

  static Widget thin26WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin26WhiteAlways(
          context,
        ),
      );

  static Widget thin26Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin26Black(
          context,
        ),
      );

  static Widget thin26BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin26BlackAlways(
          context,
        ),
      );

  static Widget thin26Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin26Primary(
          context,
        ),
      );

  static Widget thin26PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin26PrimaryInternal(
          context,
        ),
      );

  static Widget thin26PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin26Primary(
          context,
        ),
      ),
    );
  }

  static Widget thin26PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin26PrimaryLight(
          context,
        ),
      );

  static Widget thin26PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin26PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget thin26PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin26PrimaryDark(
          context,
        ),
      );

  static Widget thin26PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin26PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget thin26Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin26Secondary(
          context,
        ),
      );

  static Widget thin26SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin26SecondaryInternal(
          context,
        ),
      );

  static Widget thin26SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin26Secondary(
          context,
        ),
      ),
    );
  }

  static Widget thin26SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin26SecondaryLight(
          context,
        ),
      );

  static Widget thin26SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin26SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget thin26SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin26SecondaryDark(
          context,
        ),
      );

  static Widget thin26SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin26SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget thin26Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin26Accent(
          context,
        ),
      );

  static Widget thin26AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin26AccentInternal(
          context,
        ),
      );

  static Widget thin26AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin26Accent(
          context,
        ),
      ),
    );
  }

  static Widget thin26AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin26AccentLight(
          context,
        ),
      );

  static Widget thin26AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin26AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget thin26AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin26AccentDark(
          context,
        ),
      );

  static Widget thin26AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin26AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget thin26Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin26Grey(
          context,
        ),
      );

  static Widget thin26GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin26Grey(
          context,
        ),
      ),
    );
  }

  static Widget thin26GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin26GreyLight(
          context,
        ),
      );

  static Widget thin26GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin26GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget thin26GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin26GreyDark(
          context,
        ),
      );

  static Widget thin26GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin26GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget thin26Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin26Info(
          context,
        ),
      );

  static Widget thin26InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin26Info(
          context,
        ),
      ),
    );
  }

  static Widget thin26InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin26InfoLight(
          context,
        ),
      );

  static Widget thin26InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin26InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget thin26InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin26InfoDark(
          context,
        ),
      );

  static Widget thin26InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin26InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget thin26Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin26Success(
          context,
        ),
      );

  static Widget thin26SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin26Success(
          context,
        ),
      ),
    );
  }

  static Widget thin26SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin26SuccessLight(
          context,
        ),
      );

  static Widget thin26SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin26SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget thin26SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin26SuccessDark(
          context,
        ),
      );

  static Widget thin26SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin26SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget thin26Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin26Warning(
          context,
        ),
      );

  static Widget thin26WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin26Warning(
          context,
        ),
      ),
    );
  }

  static Widget thin26WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin26WarningLight(
          context,
        ),
      );

  static Widget thin26WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin26WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget thin26WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin26WarningDark(
          context,
        ),
      );

  static Widget thin26WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin26WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget thin26Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin26Danger(
          context,
        ),
      );

  static Widget thin26DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin26Danger(
          context,
        ),
      ),
    );
  }

  static Widget thin26DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin26DangerLight(
          context,
        ),
      );

  static Widget thin26DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin26DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget thin26DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin26DangerDark(
          context,
        ),
      );

  static Widget thin26DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin26DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget thin28White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin28White(
          context,
        ),
      );

  static Widget thin28WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin28WhiteAlways(
          context,
        ),
      );

  static Widget thin28Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin28Black(
          context,
        ),
      );

  static Widget thin28BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin28BlackAlways(
          context,
        ),
      );

  static Widget thin28Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin28Primary(
          context,
        ),
      );

  static Widget thin28PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin28PrimaryInternal(
          context,
        ),
      );

  static Widget thin28PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin28Primary(
          context,
        ),
      ),
    );
  }

  static Widget thin28PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin28PrimaryLight(
          context,
        ),
      );

  static Widget thin28PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin28PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget thin28PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin28PrimaryDark(
          context,
        ),
      );

  static Widget thin28PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin28PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget thin28Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin28Secondary(
          context,
        ),
      );

  static Widget thin28SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin28SecondaryInternal(
          context,
        ),
      );

  static Widget thin28SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin28Secondary(
          context,
        ),
      ),
    );
  }

  static Widget thin28SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin28SecondaryLight(
          context,
        ),
      );

  static Widget thin28SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin28SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget thin28SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin28SecondaryDark(
          context,
        ),
      );

  static Widget thin28SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin28SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget thin28Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin28Accent(
          context,
        ),
      );

  static Widget thin28AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin28AccentInternal(
          context,
        ),
      );

  static Widget thin28AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin28Accent(
          context,
        ),
      ),
    );
  }

  static Widget thin28AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin28AccentLight(
          context,
        ),
      );

  static Widget thin28AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin28AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget thin28AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin28AccentDark(
          context,
        ),
      );

  static Widget thin28AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin28AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget thin28Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin28Grey(
          context,
        ),
      );

  static Widget thin28GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin28Grey(
          context,
        ),
      ),
    );
  }

  static Widget thin28GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin28GreyLight(
          context,
        ),
      );

  static Widget thin28GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin28GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget thin28GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin28GreyDark(
          context,
        ),
      );

  static Widget thin28GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin28GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget thin28Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin28Info(
          context,
        ),
      );

  static Widget thin28InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin28Info(
          context,
        ),
      ),
    );
  }

  static Widget thin28InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin28InfoLight(
          context,
        ),
      );

  static Widget thin28InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin28InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget thin28InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin28InfoDark(
          context,
        ),
      );

  static Widget thin28InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin28InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget thin28Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin28Success(
          context,
        ),
      );

  static Widget thin28SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin28Success(
          context,
        ),
      ),
    );
  }

  static Widget thin28SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin28SuccessLight(
          context,
        ),
      );

  static Widget thin28SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin28SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget thin28SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin28SuccessDark(
          context,
        ),
      );

  static Widget thin28SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin28SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget thin28Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin28Warning(
          context,
        ),
      );

  static Widget thin28WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin28Warning(
          context,
        ),
      ),
    );
  }

  static Widget thin28WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin28WarningLight(
          context,
        ),
      );

  static Widget thin28WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin28WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget thin28WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin28WarningDark(
          context,
        ),
      );

  static Widget thin28WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin28WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget thin28Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin28Danger(
          context,
        ),
      );

  static Widget thin28DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin28Danger(
          context,
        ),
      ),
    );
  }

  static Widget thin28DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin28DangerLight(
          context,
        ),
      );

  static Widget thin28DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin28DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget thin28DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin28DangerDark(
          context,
        ),
      );

  static Widget thin28DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin28DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget thin32White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin32White(
          context,
        ),
      );

  static Widget thin32WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin32WhiteAlways(
          context,
        ),
      );

  static Widget thin32Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin32Black(
          context,
        ),
      );

  static Widget thin32BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin32BlackAlways(
          context,
        ),
      );

  static Widget thin32Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin32Primary(
          context,
        ),
      );

  static Widget thin32PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin32PrimaryInternal(
          context,
        ),
      );

  static Widget thin32PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin32Primary(
          context,
        ),
      ),
    );
  }

  static Widget thin32PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin32PrimaryLight(
          context,
        ),
      );

  static Widget thin32PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin32PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget thin32PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin32PrimaryDark(
          context,
        ),
      );

  static Widget thin32PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin32PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget thin32Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin32Secondary(
          context,
        ),
      );

  static Widget thin32SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin32SecondaryInternal(
          context,
        ),
      );

  static Widget thin32SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin32Secondary(
          context,
        ),
      ),
    );
  }

  static Widget thin32SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin32SecondaryLight(
          context,
        ),
      );

  static Widget thin32SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin32SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget thin32SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin32SecondaryDark(
          context,
        ),
      );

  static Widget thin32SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin32SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget thin32Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin32Accent(
          context,
        ),
      );

  static Widget thin32AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin32AccentInternal(
          context,
        ),
      );

  static Widget thin32AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin32Accent(
          context,
        ),
      ),
    );
  }

  static Widget thin32AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin32AccentLight(
          context,
        ),
      );

  static Widget thin32AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin32AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget thin32AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin32AccentDark(
          context,
        ),
      );

  static Widget thin32AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin32AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget thin32Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin32Grey(
          context,
        ),
      );

  static Widget thin32GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin32Grey(
          context,
        ),
      ),
    );
  }

  static Widget thin32GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin32GreyLight(
          context,
        ),
      );

  static Widget thin32GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin32GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget thin32GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin32GreyDark(
          context,
        ),
      );

  static Widget thin32GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin32GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget thin32Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin32Info(
          context,
        ),
      );

  static Widget thin32InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin32Info(
          context,
        ),
      ),
    );
  }

  static Widget thin32InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin32InfoLight(
          context,
        ),
      );

  static Widget thin32InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin32InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget thin32InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin32InfoDark(
          context,
        ),
      );

  static Widget thin32InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin32InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget thin32Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin32Success(
          context,
        ),
      );

  static Widget thin32SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin32Success(
          context,
        ),
      ),
    );
  }

  static Widget thin32SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin32SuccessLight(
          context,
        ),
      );

  static Widget thin32SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin32SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget thin32SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin32SuccessDark(
          context,
        ),
      );

  static Widget thin32SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin32SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget thin32Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin32Warning(
          context,
        ),
      );

  static Widget thin32WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin32Warning(
          context,
        ),
      ),
    );
  }

  static Widget thin32WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin32WarningLight(
          context,
        ),
      );

  static Widget thin32WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin32WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget thin32WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin32WarningDark(
          context,
        ),
      );

  static Widget thin32WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin32WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget thin32Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin32Danger(
          context,
        ),
      );

  static Widget thin32DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin32Danger(
          context,
        ),
      ),
    );
  }

  static Widget thin32DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin32DangerLight(
          context,
        ),
      );

  static Widget thin32DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin32DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget thin32DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin32DangerDark(
          context,
        ),
      );

  static Widget thin32DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.thin32DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget light10White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light10White(
          context,
        ),
      );

  static Widget light10WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light10WhiteAlways(
          context,
        ),
      );

  static Widget light10Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light10Black(
          context,
        ),
      );

  static Widget light10BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light10BlackAlways(
          context,
        ),
      );

  static Widget light10Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light10Primary(
          context,
        ),
      );

  static Widget light10PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light10PrimaryInternal(
          context,
        ),
      );

  static Widget light10PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light10Primary(
          context,
        ),
      ),
    );
  }

  static Widget light10PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light10PrimaryLight(
          context,
        ),
      );

  static Widget light10PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light10PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget light10PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light10PrimaryDark(
          context,
        ),
      );

  static Widget light10PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light10PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget light10Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light10Secondary(
          context,
        ),
      );

  static Widget light10SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light10SecondaryInternal(
          context,
        ),
      );

  static Widget light10SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light10Secondary(
          context,
        ),
      ),
    );
  }

  static Widget light10SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light10SecondaryLight(
          context,
        ),
      );

  static Widget light10SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light10SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget light10SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light10SecondaryDark(
          context,
        ),
      );

  static Widget light10SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light10SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget light10Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light10Accent(
          context,
        ),
      );

  static Widget light10AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light10AccentInternal(
          context,
        ),
      );

  static Widget light10AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light10Accent(
          context,
        ),
      ),
    );
  }

  static Widget light10AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light10AccentLight(
          context,
        ),
      );

  static Widget light10AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light10AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget light10AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light10AccentDark(
          context,
        ),
      );

  static Widget light10AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light10AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget light10Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light10Grey(
          context,
        ),
      );

  static Widget light10GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light10Grey(
          context,
        ),
      ),
    );
  }

  static Widget light10GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light10GreyLight(
          context,
        ),
      );

  static Widget light10GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light10GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget light10GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light10GreyDark(
          context,
        ),
      );

  static Widget light10GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light10GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget light10Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light10Info(
          context,
        ),
      );

  static Widget light10InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light10Info(
          context,
        ),
      ),
    );
  }

  static Widget light10InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light10InfoLight(
          context,
        ),
      );

  static Widget light10InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light10InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget light10InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light10InfoDark(
          context,
        ),
      );

  static Widget light10InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light10InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget light10Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light10Success(
          context,
        ),
      );

  static Widget light10SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light10Success(
          context,
        ),
      ),
    );
  }

  static Widget light10SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light10SuccessLight(
          context,
        ),
      );

  static Widget light10SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light10SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget light10SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light10SuccessDark(
          context,
        ),
      );

  static Widget light10SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light10SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget light10Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light10Warning(
          context,
        ),
      );

  static Widget light10WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light10Warning(
          context,
        ),
      ),
    );
  }

  static Widget light10WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light10WarningLight(
          context,
        ),
      );

  static Widget light10WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light10WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget light10WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light10WarningDark(
          context,
        ),
      );

  static Widget light10WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light10WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget light10Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light10Danger(
          context,
        ),
      );

  static Widget light10DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light10Danger(
          context,
        ),
      ),
    );
  }

  static Widget light10DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light10DangerLight(
          context,
        ),
      );

  static Widget light10DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light10DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget light10DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light10DangerDark(
          context,
        ),
      );

  static Widget light10DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light10DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget light11White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light11White(
          context,
        ),
      );

  static Widget light11WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light11WhiteAlways(
          context,
        ),
      );

  static Widget light11Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light11Black(
          context,
        ),
      );

  static Widget light11BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light11BlackAlways(
          context,
        ),
      );

  static Widget light11Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light11Primary(
          context,
        ),
      );

  static Widget light11PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light11PrimaryInternal(
          context,
        ),
      );

  static Widget light11PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light11Primary(
          context,
        ),
      ),
    );
  }

  static Widget light11PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light11PrimaryLight(
          context,
        ),
      );

  static Widget light11PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light11PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget light11PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light11PrimaryDark(
          context,
        ),
      );

  static Widget light11PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light11PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget light11Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light11Secondary(
          context,
        ),
      );

  static Widget light11SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light11SecondaryInternal(
          context,
        ),
      );

  static Widget light11SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light11Secondary(
          context,
        ),
      ),
    );
  }

  static Widget light11SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light11SecondaryLight(
          context,
        ),
      );

  static Widget light11SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light11SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget light11SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light11SecondaryDark(
          context,
        ),
      );

  static Widget light11SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light11SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget light11Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light11Accent(
          context,
        ),
      );

  static Widget light11AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light11AccentInternal(
          context,
        ),
      );

  static Widget light11AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light11Accent(
          context,
        ),
      ),
    );
  }

  static Widget light11AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light11AccentLight(
          context,
        ),
      );

  static Widget light11AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light11AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget light11AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light11AccentDark(
          context,
        ),
      );

  static Widget light11AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light11AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget light11Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light11Grey(
          context,
        ),
      );

  static Widget light11GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light11Grey(
          context,
        ),
      ),
    );
  }

  static Widget light11GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light11GreyLight(
          context,
        ),
      );

  static Widget light11GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light11GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget light11GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light11GreyDark(
          context,
        ),
      );

  static Widget light11GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light11GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget light11Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light11Info(
          context,
        ),
      );

  static Widget light11InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light11Info(
          context,
        ),
      ),
    );
  }

  static Widget light11InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light11InfoLight(
          context,
        ),
      );

  static Widget light11InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light11InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget light11InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light11InfoDark(
          context,
        ),
      );

  static Widget light11InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light11InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget light11Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light11Success(
          context,
        ),
      );

  static Widget light11SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light11Success(
          context,
        ),
      ),
    );
  }

  static Widget light11SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light11SuccessLight(
          context,
        ),
      );

  static Widget light11SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light11SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget light11SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light11SuccessDark(
          context,
        ),
      );

  static Widget light11SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light11SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget light11Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light11Warning(
          context,
        ),
      );

  static Widget light11WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light11Warning(
          context,
        ),
      ),
    );
  }

  static Widget light11WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light11WarningLight(
          context,
        ),
      );

  static Widget light11WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light11WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget light11WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light11WarningDark(
          context,
        ),
      );

  static Widget light11WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light11WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget light11Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light11Danger(
          context,
        ),
      );

  static Widget light11DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light11Danger(
          context,
        ),
      ),
    );
  }

  static Widget light11DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light11DangerLight(
          context,
        ),
      );

  static Widget light11DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light11DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget light11DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light11DangerDark(
          context,
        ),
      );

  static Widget light11DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light11DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget light12White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light12White(
          context,
        ),
      );

  static Widget light12WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light12WhiteAlways(
          context,
        ),
      );

  static Widget light12Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light12Black(
          context,
        ),
      );

  static Widget light12BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light12BlackAlways(
          context,
        ),
      );

  static Widget light12Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light12Primary(
          context,
        ),
      );

  static Widget light12PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light12PrimaryInternal(
          context,
        ),
      );

  static Widget light12PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light12Primary(
          context,
        ),
      ),
    );
  }

  static Widget light12PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light12PrimaryLight(
          context,
        ),
      );

  static Widget light12PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light12PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget light12PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light12PrimaryDark(
          context,
        ),
      );

  static Widget light12PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light12PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget light12Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light12Secondary(
          context,
        ),
      );

  static Widget light12SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light12SecondaryInternal(
          context,
        ),
      );

  static Widget light12SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light12Secondary(
          context,
        ),
      ),
    );
  }

  static Widget light12SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light12SecondaryLight(
          context,
        ),
      );

  static Widget light12SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light12SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget light12SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light12SecondaryDark(
          context,
        ),
      );

  static Widget light12SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light12SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget light12Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light12Accent(
          context,
        ),
      );

  static Widget light12AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light12AccentInternal(
          context,
        ),
      );

  static Widget light12AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light12Accent(
          context,
        ),
      ),
    );
  }

  static Widget light12AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light12AccentLight(
          context,
        ),
      );

  static Widget light12AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light12AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget light12AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light12AccentDark(
          context,
        ),
      );

  static Widget light12AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light12AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget light12Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light12Grey(
          context,
        ),
      );

  static Widget light12GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light12Grey(
          context,
        ),
      ),
    );
  }

  static Widget light12GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light12GreyLight(
          context,
        ),
      );

  static Widget light12GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light12GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget light12GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light12GreyDark(
          context,
        ),
      );

  static Widget light12GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light12GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget light12Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light12Info(
          context,
        ),
      );

  static Widget light12InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light12Info(
          context,
        ),
      ),
    );
  }

  static Widget light12InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light12InfoLight(
          context,
        ),
      );

  static Widget light12InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light12InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget light12InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light12InfoDark(
          context,
        ),
      );

  static Widget light12InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light12InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget light12Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light12Success(
          context,
        ),
      );

  static Widget light12SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light12Success(
          context,
        ),
      ),
    );
  }

  static Widget light12SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light12SuccessLight(
          context,
        ),
      );

  static Widget light12SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light12SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget light12SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light12SuccessDark(
          context,
        ),
      );

  static Widget light12SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light12SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget light12Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light12Warning(
          context,
        ),
      );

  static Widget light12WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light12Warning(
          context,
        ),
      ),
    );
  }

  static Widget light12WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light12WarningLight(
          context,
        ),
      );

  static Widget light12WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light12WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget light12WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light12WarningDark(
          context,
        ),
      );

  static Widget light12WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light12WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget light12Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light12Danger(
          context,
        ),
      );

  static Widget light12DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light12Danger(
          context,
        ),
      ),
    );
  }

  static Widget light12DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light12DangerLight(
          context,
        ),
      );

  static Widget light12DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light12DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget light12DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light12DangerDark(
          context,
        ),
      );

  static Widget light12DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light12DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget light13White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light13White(
          context,
        ),
      );

  static Widget light13WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light13WhiteAlways(
          context,
        ),
      );

  static Widget light13Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light13Black(
          context,
        ),
      );

  static Widget light13BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light13BlackAlways(
          context,
        ),
      );

  static Widget light13Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light13Primary(
          context,
        ),
      );

  static Widget light13PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light13PrimaryInternal(
          context,
        ),
      );

  static Widget light13PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light13Primary(
          context,
        ),
      ),
    );
  }

  static Widget light13PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light13PrimaryLight(
          context,
        ),
      );

  static Widget light13PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light13PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget light13PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light13PrimaryDark(
          context,
        ),
      );

  static Widget light13PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light13PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget light13Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light13Secondary(
          context,
        ),
      );

  static Widget light13SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light13SecondaryInternal(
          context,
        ),
      );

  static Widget light13SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light13Secondary(
          context,
        ),
      ),
    );
  }

  static Widget light13SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light13SecondaryLight(
          context,
        ),
      );

  static Widget light13SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light13SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget light13SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light13SecondaryDark(
          context,
        ),
      );

  static Widget light13SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light13SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget light13Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light13Accent(
          context,
        ),
      );

  static Widget light13AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light13AccentInternal(
          context,
        ),
      );

  static Widget light13AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light13Accent(
          context,
        ),
      ),
    );
  }

  static Widget light13AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light13AccentLight(
          context,
        ),
      );

  static Widget light13AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light13AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget light13AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light13AccentDark(
          context,
        ),
      );

  static Widget light13AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light13AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget light13Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light13Grey(
          context,
        ),
      );

  static Widget light13GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light13Grey(
          context,
        ),
      ),
    );
  }

  static Widget light13GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light13GreyLight(
          context,
        ),
      );

  static Widget light13GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light13GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget light13GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light13GreyDark(
          context,
        ),
      );

  static Widget light13GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light13GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget light13Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light13Info(
          context,
        ),
      );

  static Widget light13InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light13Info(
          context,
        ),
      ),
    );
  }

  static Widget light13InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light13InfoLight(
          context,
        ),
      );

  static Widget light13InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light13InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget light13InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light13InfoDark(
          context,
        ),
      );

  static Widget light13InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light13InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget light13Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light13Success(
          context,
        ),
      );

  static Widget light13SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light13Success(
          context,
        ),
      ),
    );
  }

  static Widget light13SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light13SuccessLight(
          context,
        ),
      );

  static Widget light13SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light13SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget light13SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light13SuccessDark(
          context,
        ),
      );

  static Widget light13SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light13SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget light13Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light13Warning(
          context,
        ),
      );

  static Widget light13WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light13Warning(
          context,
        ),
      ),
    );
  }

  static Widget light13WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light13WarningLight(
          context,
        ),
      );

  static Widget light13WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light13WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget light13WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light13WarningDark(
          context,
        ),
      );

  static Widget light13WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light13WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget light13Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light13Danger(
          context,
        ),
      );

  static Widget light13DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light13Danger(
          context,
        ),
      ),
    );
  }

  static Widget light13DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light13DangerLight(
          context,
        ),
      );

  static Widget light13DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light13DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget light13DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light13DangerDark(
          context,
        ),
      );

  static Widget light13DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light13DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget light14White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light14White(
          context,
        ),
      );

  static Widget light14WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light14WhiteAlways(
          context,
        ),
      );

  static Widget light14Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light14Black(
          context,
        ),
      );

  static Widget light14BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light14BlackAlways(
          context,
        ),
      );

  static Widget light14Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light14Primary(
          context,
        ),
      );

  static Widget light14PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light14PrimaryInternal(
          context,
        ),
      );

  static Widget light14PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light14Primary(
          context,
        ),
      ),
    );
  }

  static Widget light14PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light14PrimaryLight(
          context,
        ),
      );

  static Widget light14PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light14PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget light14PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light14PrimaryDark(
          context,
        ),
      );

  static Widget light14PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light14PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget light14Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light14Secondary(
          context,
        ),
      );

  static Widget light14SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light14SecondaryInternal(
          context,
        ),
      );

  static Widget light14SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light14Secondary(
          context,
        ),
      ),
    );
  }

  static Widget light14SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light14SecondaryLight(
          context,
        ),
      );

  static Widget light14SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light14SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget light14SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light14SecondaryDark(
          context,
        ),
      );

  static Widget light14SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light14SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget light14Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light14Accent(
          context,
        ),
      );

  static Widget light14AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light14AccentInternal(
          context,
        ),
      );

  static Widget light14AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light14Accent(
          context,
        ),
      ),
    );
  }

  static Widget light14AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light14AccentLight(
          context,
        ),
      );

  static Widget light14AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light14AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget light14AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light14AccentDark(
          context,
        ),
      );

  static Widget light14AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light14AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget light14Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light14Grey(
          context,
        ),
      );

  static Widget light14GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light14Grey(
          context,
        ),
      ),
    );
  }

  static Widget light14GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light14GreyLight(
          context,
        ),
      );

  static Widget light14GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light14GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget light14GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light14GreyDark(
          context,
        ),
      );

  static Widget light14GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light14GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget light14Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light14Info(
          context,
        ),
      );

  static Widget light14InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light14Info(
          context,
        ),
      ),
    );
  }

  static Widget light14InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light14InfoLight(
          context,
        ),
      );

  static Widget light14InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light14InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget light14InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light14InfoDark(
          context,
        ),
      );

  static Widget light14InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light14InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget light14Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light14Success(
          context,
        ),
      );

  static Widget light14SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light14Success(
          context,
        ),
      ),
    );
  }

  static Widget light14SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light14SuccessLight(
          context,
        ),
      );

  static Widget light14SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light14SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget light14SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light14SuccessDark(
          context,
        ),
      );

  static Widget light14SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light14SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget light14Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light14Warning(
          context,
        ),
      );

  static Widget light14WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light14Warning(
          context,
        ),
      ),
    );
  }

  static Widget light14WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light14WarningLight(
          context,
        ),
      );

  static Widget light14WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light14WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget light14WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light14WarningDark(
          context,
        ),
      );

  static Widget light14WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light14WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget light14Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light14Danger(
          context,
        ),
      );

  static Widget light14DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light14Danger(
          context,
        ),
      ),
    );
  }

  static Widget light14DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light14DangerLight(
          context,
        ),
      );

  static Widget light14DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light14DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget light14DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light14DangerDark(
          context,
        ),
      );

  static Widget light14DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light14DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget light15White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light15White(
          context,
        ),
      );

  static Widget light15WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light15WhiteAlways(
          context,
        ),
      );

  static Widget light15Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light15Black(
          context,
        ),
      );

  static Widget light15BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light15BlackAlways(
          context,
        ),
      );

  static Widget light15Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light15Primary(
          context,
        ),
      );

  static Widget light15PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light15PrimaryInternal(
          context,
        ),
      );

  static Widget light15PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light15Primary(
          context,
        ),
      ),
    );
  }

  static Widget light15PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light15PrimaryLight(
          context,
        ),
      );

  static Widget light15PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light15PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget light15PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light15PrimaryDark(
          context,
        ),
      );

  static Widget light15PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light15PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget light15Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light15Secondary(
          context,
        ),
      );

  static Widget light15SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light15SecondaryInternal(
          context,
        ),
      );

  static Widget light15SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light15Secondary(
          context,
        ),
      ),
    );
  }

  static Widget light15SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light15SecondaryLight(
          context,
        ),
      );

  static Widget light15SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light15SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget light15SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light15SecondaryDark(
          context,
        ),
      );

  static Widget light15SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light15SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget light15Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light15Accent(
          context,
        ),
      );

  static Widget light15AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light15AccentInternal(
          context,
        ),
      );

  static Widget light15AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light15Accent(
          context,
        ),
      ),
    );
  }

  static Widget light15AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light15AccentLight(
          context,
        ),
      );

  static Widget light15AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light15AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget light15AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light15AccentDark(
          context,
        ),
      );

  static Widget light15AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light15AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget light15Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light15Grey(
          context,
        ),
      );

  static Widget light15GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light15Grey(
          context,
        ),
      ),
    );
  }

  static Widget light15GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light15GreyLight(
          context,
        ),
      );

  static Widget light15GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light15GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget light15GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light15GreyDark(
          context,
        ),
      );

  static Widget light15GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light15GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget light15Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light15Info(
          context,
        ),
      );

  static Widget light15InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light15Info(
          context,
        ),
      ),
    );
  }

  static Widget light15InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light15InfoLight(
          context,
        ),
      );

  static Widget light15InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light15InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget light15InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light15InfoDark(
          context,
        ),
      );

  static Widget light15InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light15InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget light15Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light15Success(
          context,
        ),
      );

  static Widget light15SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light15Success(
          context,
        ),
      ),
    );
  }

  static Widget light15SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light15SuccessLight(
          context,
        ),
      );

  static Widget light15SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light15SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget light15SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light15SuccessDark(
          context,
        ),
      );

  static Widget light15SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light15SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget light15Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light15Warning(
          context,
        ),
      );

  static Widget light15WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light15Warning(
          context,
        ),
      ),
    );
  }

  static Widget light15WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light15WarningLight(
          context,
        ),
      );

  static Widget light15WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light15WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget light15WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light15WarningDark(
          context,
        ),
      );

  static Widget light15WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light15WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget light15Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light15Danger(
          context,
        ),
      );

  static Widget light15DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light15Danger(
          context,
        ),
      ),
    );
  }

  static Widget light15DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light15DangerLight(
          context,
        ),
      );

  static Widget light15DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light15DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget light15DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light15DangerDark(
          context,
        ),
      );

  static Widget light15DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light15DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget light16White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light16White(
          context,
        ),
      );

  static Widget light16WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light16WhiteAlways(
          context,
        ),
      );

  static Widget light16Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light16Black(
          context,
        ),
      );

  static Widget light16BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light16BlackAlways(
          context,
        ),
      );

  static Widget light16Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light16Primary(
          context,
        ),
      );

  static Widget light16PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light16PrimaryInternal(
          context,
        ),
      );

  static Widget light16PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light16Primary(
          context,
        ),
      ),
    );
  }

  static Widget light16PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light16PrimaryLight(
          context,
        ),
      );

  static Widget light16PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light16PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget light16PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light16PrimaryDark(
          context,
        ),
      );

  static Widget light16PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light16PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget light16Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light16Secondary(
          context,
        ),
      );

  static Widget light16SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light16SecondaryInternal(
          context,
        ),
      );

  static Widget light16SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light16Secondary(
          context,
        ),
      ),
    );
  }

  static Widget light16SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light16SecondaryLight(
          context,
        ),
      );

  static Widget light16SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light16SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget light16SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light16SecondaryDark(
          context,
        ),
      );

  static Widget light16SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light16SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget light16Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light16Accent(
          context,
        ),
      );

  static Widget light16AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light16AccentInternal(
          context,
        ),
      );

  static Widget light16AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light16Accent(
          context,
        ),
      ),
    );
  }

  static Widget light16AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light16AccentLight(
          context,
        ),
      );

  static Widget light16AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light16AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget light16AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light16AccentDark(
          context,
        ),
      );

  static Widget light16AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light16AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget light16Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light16Grey(
          context,
        ),
      );

  static Widget light16GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light16Grey(
          context,
        ),
      ),
    );
  }

  static Widget light16GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light16GreyLight(
          context,
        ),
      );

  static Widget light16GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light16GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget light16GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light16GreyDark(
          context,
        ),
      );

  static Widget light16GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light16GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget light16Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light16Info(
          context,
        ),
      );

  static Widget light16InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light16Info(
          context,
        ),
      ),
    );
  }

  static Widget light16InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light16InfoLight(
          context,
        ),
      );

  static Widget light16InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light16InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget light16InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light16InfoDark(
          context,
        ),
      );

  static Widget light16InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light16InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget light16Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light16Success(
          context,
        ),
      );

  static Widget light16SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light16Success(
          context,
        ),
      ),
    );
  }

  static Widget light16SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light16SuccessLight(
          context,
        ),
      );

  static Widget light16SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light16SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget light16SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light16SuccessDark(
          context,
        ),
      );

  static Widget light16SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light16SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget light16Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light16Warning(
          context,
        ),
      );

  static Widget light16WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light16Warning(
          context,
        ),
      ),
    );
  }

  static Widget light16WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light16WarningLight(
          context,
        ),
      );

  static Widget light16WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light16WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget light16WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light16WarningDark(
          context,
        ),
      );

  static Widget light16WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light16WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget light16Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light16Danger(
          context,
        ),
      );

  static Widget light16DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light16Danger(
          context,
        ),
      ),
    );
  }

  static Widget light16DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light16DangerLight(
          context,
        ),
      );

  static Widget light16DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light16DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget light16DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light16DangerDark(
          context,
        ),
      );

  static Widget light16DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light16DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget light17White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light17White(
          context,
        ),
      );

  static Widget light17WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light17WhiteAlways(
          context,
        ),
      );

  static Widget light17Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light17Black(
          context,
        ),
      );

  static Widget light17BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light17BlackAlways(
          context,
        ),
      );

  static Widget light17Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light17Primary(
          context,
        ),
      );

  static Widget light17PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light17PrimaryInternal(
          context,
        ),
      );

  static Widget light17PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light17Primary(
          context,
        ),
      ),
    );
  }

  static Widget light17PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light17PrimaryLight(
          context,
        ),
      );

  static Widget light17PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light17PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget light17PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light17PrimaryDark(
          context,
        ),
      );

  static Widget light17PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light17PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget light17Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light17Secondary(
          context,
        ),
      );

  static Widget light17SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light17SecondaryInternal(
          context,
        ),
      );

  static Widget light17SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light17Secondary(
          context,
        ),
      ),
    );
  }

  static Widget light17SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light17SecondaryLight(
          context,
        ),
      );

  static Widget light17SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light17SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget light17SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light17SecondaryDark(
          context,
        ),
      );

  static Widget light17SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light17SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget light17Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light17Accent(
          context,
        ),
      );

  static Widget light17AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light17AccentInternal(
          context,
        ),
      );

  static Widget light17AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light17Accent(
          context,
        ),
      ),
    );
  }

  static Widget light17AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light17AccentLight(
          context,
        ),
      );

  static Widget light17AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light17AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget light17AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light17AccentDark(
          context,
        ),
      );

  static Widget light17AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light17AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget light17Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light17Grey(
          context,
        ),
      );

  static Widget light17GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light17Grey(
          context,
        ),
      ),
    );
  }

  static Widget light17GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light17GreyLight(
          context,
        ),
      );

  static Widget light17GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light17GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget light17GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light17GreyDark(
          context,
        ),
      );

  static Widget light17GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light17GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget light17Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light17Info(
          context,
        ),
      );

  static Widget light17InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light17Info(
          context,
        ),
      ),
    );
  }

  static Widget light17InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light17InfoLight(
          context,
        ),
      );

  static Widget light17InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light17InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget light17InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light17InfoDark(
          context,
        ),
      );

  static Widget light17InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light17InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget light17Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light17Success(
          context,
        ),
      );

  static Widget light17SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light17Success(
          context,
        ),
      ),
    );
  }

  static Widget light17SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light17SuccessLight(
          context,
        ),
      );

  static Widget light17SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light17SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget light17SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light17SuccessDark(
          context,
        ),
      );

  static Widget light17SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light17SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget light17Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light17Warning(
          context,
        ),
      );

  static Widget light17WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light17Warning(
          context,
        ),
      ),
    );
  }

  static Widget light17WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light17WarningLight(
          context,
        ),
      );

  static Widget light17WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light17WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget light17WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light17WarningDark(
          context,
        ),
      );

  static Widget light17WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light17WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget light17Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light17Danger(
          context,
        ),
      );

  static Widget light17DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light17Danger(
          context,
        ),
      ),
    );
  }

  static Widget light17DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light17DangerLight(
          context,
        ),
      );

  static Widget light17DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light17DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget light17DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light17DangerDark(
          context,
        ),
      );

  static Widget light17DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light17DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget light18White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light18White(
          context,
        ),
      );

  static Widget light18WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light18WhiteAlways(
          context,
        ),
      );

  static Widget light18Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light18Black(
          context,
        ),
      );

  static Widget light18BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light18BlackAlways(
          context,
        ),
      );

  static Widget light18Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light18Primary(
          context,
        ),
      );

  static Widget light18PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light18PrimaryInternal(
          context,
        ),
      );

  static Widget light18PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light18Primary(
          context,
        ),
      ),
    );
  }

  static Widget light18PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light18PrimaryLight(
          context,
        ),
      );

  static Widget light18PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light18PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget light18PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light18PrimaryDark(
          context,
        ),
      );

  static Widget light18PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light18PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget light18Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light18Secondary(
          context,
        ),
      );

  static Widget light18SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light18SecondaryInternal(
          context,
        ),
      );

  static Widget light18SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light18Secondary(
          context,
        ),
      ),
    );
  }

  static Widget light18SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light18SecondaryLight(
          context,
        ),
      );

  static Widget light18SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light18SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget light18SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light18SecondaryDark(
          context,
        ),
      );

  static Widget light18SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light18SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget light18Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light18Accent(
          context,
        ),
      );

  static Widget light18AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light18AccentInternal(
          context,
        ),
      );

  static Widget light18AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light18Accent(
          context,
        ),
      ),
    );
  }

  static Widget light18AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light18AccentLight(
          context,
        ),
      );

  static Widget light18AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light18AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget light18AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light18AccentDark(
          context,
        ),
      );

  static Widget light18AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light18AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget light18Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light18Grey(
          context,
        ),
      );

  static Widget light18GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light18Grey(
          context,
        ),
      ),
    );
  }

  static Widget light18GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light18GreyLight(
          context,
        ),
      );

  static Widget light18GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light18GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget light18GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light18GreyDark(
          context,
        ),
      );

  static Widget light18GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light18GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget light18Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light18Info(
          context,
        ),
      );

  static Widget light18InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light18Info(
          context,
        ),
      ),
    );
  }

  static Widget light18InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light18InfoLight(
          context,
        ),
      );

  static Widget light18InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light18InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget light18InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light18InfoDark(
          context,
        ),
      );

  static Widget light18InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light18InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget light18Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light18Success(
          context,
        ),
      );

  static Widget light18SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light18Success(
          context,
        ),
      ),
    );
  }

  static Widget light18SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light18SuccessLight(
          context,
        ),
      );

  static Widget light18SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light18SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget light18SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light18SuccessDark(
          context,
        ),
      );

  static Widget light18SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light18SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget light18Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light18Warning(
          context,
        ),
      );

  static Widget light18WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light18Warning(
          context,
        ),
      ),
    );
  }

  static Widget light18WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light18WarningLight(
          context,
        ),
      );

  static Widget light18WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light18WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget light18WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light18WarningDark(
          context,
        ),
      );

  static Widget light18WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light18WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget light18Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light18Danger(
          context,
        ),
      );

  static Widget light18DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light18Danger(
          context,
        ),
      ),
    );
  }

  static Widget light18DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light18DangerLight(
          context,
        ),
      );

  static Widget light18DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light18DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget light18DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light18DangerDark(
          context,
        ),
      );

  static Widget light18DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light18DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget light19White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light19White(
          context,
        ),
      );

  static Widget light19WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light19WhiteAlways(
          context,
        ),
      );

  static Widget light19Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light19Black(
          context,
        ),
      );

  static Widget light19BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light19BlackAlways(
          context,
        ),
      );

  static Widget light19Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light19Primary(
          context,
        ),
      );

  static Widget light19PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light19PrimaryInternal(
          context,
        ),
      );

  static Widget light19PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light19Primary(
          context,
        ),
      ),
    );
  }

  static Widget light19PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light19PrimaryLight(
          context,
        ),
      );

  static Widget light19PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light19PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget light19PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light19PrimaryDark(
          context,
        ),
      );

  static Widget light19PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light19PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget light19Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light19Secondary(
          context,
        ),
      );

  static Widget light19SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light19SecondaryInternal(
          context,
        ),
      );

  static Widget light19SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light19Secondary(
          context,
        ),
      ),
    );
  }

  static Widget light19SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light19SecondaryLight(
          context,
        ),
      );

  static Widget light19SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light19SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget light19SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light19SecondaryDark(
          context,
        ),
      );

  static Widget light19SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light19SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget light19Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light19Accent(
          context,
        ),
      );

  static Widget light19AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light19AccentInternal(
          context,
        ),
      );

  static Widget light19AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light19Accent(
          context,
        ),
      ),
    );
  }

  static Widget light19AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light19AccentLight(
          context,
        ),
      );

  static Widget light19AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light19AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget light19AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light19AccentDark(
          context,
        ),
      );

  static Widget light19AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light19AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget light19Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light19Grey(
          context,
        ),
      );

  static Widget light19GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light19Grey(
          context,
        ),
      ),
    );
  }

  static Widget light19GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light19GreyLight(
          context,
        ),
      );

  static Widget light19GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light19GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget light19GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light19GreyDark(
          context,
        ),
      );

  static Widget light19GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light19GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget light19Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light19Info(
          context,
        ),
      );

  static Widget light19InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light19Info(
          context,
        ),
      ),
    );
  }

  static Widget light19InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light19InfoLight(
          context,
        ),
      );

  static Widget light19InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light19InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget light19InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light19InfoDark(
          context,
        ),
      );

  static Widget light19InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light19InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget light19Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light19Success(
          context,
        ),
      );

  static Widget light19SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light19Success(
          context,
        ),
      ),
    );
  }

  static Widget light19SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light19SuccessLight(
          context,
        ),
      );

  static Widget light19SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light19SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget light19SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light19SuccessDark(
          context,
        ),
      );

  static Widget light19SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light19SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget light19Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light19Warning(
          context,
        ),
      );

  static Widget light19WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light19Warning(
          context,
        ),
      ),
    );
  }

  static Widget light19WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light19WarningLight(
          context,
        ),
      );

  static Widget light19WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light19WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget light19WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light19WarningDark(
          context,
        ),
      );

  static Widget light19WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light19WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget light19Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light19Danger(
          context,
        ),
      );

  static Widget light19DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light19Danger(
          context,
        ),
      ),
    );
  }

  static Widget light19DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light19DangerLight(
          context,
        ),
      );

  static Widget light19DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light19DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget light19DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light19DangerDark(
          context,
        ),
      );

  static Widget light19DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light19DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget light20White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light20White(
          context,
        ),
      );

  static Widget light20WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light20WhiteAlways(
          context,
        ),
      );

  static Widget light20Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light20Black(
          context,
        ),
      );

  static Widget light20BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light20BlackAlways(
          context,
        ),
      );

  static Widget light20Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light20Primary(
          context,
        ),
      );

  static Widget light20PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light20PrimaryInternal(
          context,
        ),
      );

  static Widget light20PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light20Primary(
          context,
        ),
      ),
    );
  }

  static Widget light20PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light20PrimaryLight(
          context,
        ),
      );

  static Widget light20PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light20PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget light20PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light20PrimaryDark(
          context,
        ),
      );

  static Widget light20PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light20PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget light20Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light20Secondary(
          context,
        ),
      );

  static Widget light20SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light20SecondaryInternal(
          context,
        ),
      );

  static Widget light20SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light20Secondary(
          context,
        ),
      ),
    );
  }

  static Widget light20SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light20SecondaryLight(
          context,
        ),
      );

  static Widget light20SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light20SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget light20SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light20SecondaryDark(
          context,
        ),
      );

  static Widget light20SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light20SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget light20Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light20Accent(
          context,
        ),
      );

  static Widget light20AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light20AccentInternal(
          context,
        ),
      );

  static Widget light20AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light20Accent(
          context,
        ),
      ),
    );
  }

  static Widget light20AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light20AccentLight(
          context,
        ),
      );

  static Widget light20AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light20AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget light20AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light20AccentDark(
          context,
        ),
      );

  static Widget light20AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light20AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget light20Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light20Grey(
          context,
        ),
      );

  static Widget light20GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light20Grey(
          context,
        ),
      ),
    );
  }

  static Widget light20GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light20GreyLight(
          context,
        ),
      );

  static Widget light20GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light20GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget light20GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light20GreyDark(
          context,
        ),
      );

  static Widget light20GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light20GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget light20Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light20Info(
          context,
        ),
      );

  static Widget light20InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light20Info(
          context,
        ),
      ),
    );
  }

  static Widget light20InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light20InfoLight(
          context,
        ),
      );

  static Widget light20InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light20InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget light20InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light20InfoDark(
          context,
        ),
      );

  static Widget light20InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light20InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget light20Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light20Success(
          context,
        ),
      );

  static Widget light20SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light20Success(
          context,
        ),
      ),
    );
  }

  static Widget light20SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light20SuccessLight(
          context,
        ),
      );

  static Widget light20SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light20SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget light20SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light20SuccessDark(
          context,
        ),
      );

  static Widget light20SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light20SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget light20Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light20Warning(
          context,
        ),
      );

  static Widget light20WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light20Warning(
          context,
        ),
      ),
    );
  }

  static Widget light20WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light20WarningLight(
          context,
        ),
      );

  static Widget light20WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light20WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget light20WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light20WarningDark(
          context,
        ),
      );

  static Widget light20WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light20WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget light20Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light20Danger(
          context,
        ),
      );

  static Widget light20DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light20Danger(
          context,
        ),
      ),
    );
  }

  static Widget light20DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light20DangerLight(
          context,
        ),
      );

  static Widget light20DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light20DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget light20DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light20DangerDark(
          context,
        ),
      );

  static Widget light20DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light20DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget light22White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light22White(
          context,
        ),
      );

  static Widget light22WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light22WhiteAlways(
          context,
        ),
      );

  static Widget light22Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light22Black(
          context,
        ),
      );

  static Widget light22BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light22BlackAlways(
          context,
        ),
      );

  static Widget light22Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light22Primary(
          context,
        ),
      );

  static Widget light22PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light22PrimaryInternal(
          context,
        ),
      );

  static Widget light22PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light22Primary(
          context,
        ),
      ),
    );
  }

  static Widget light22PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light22PrimaryLight(
          context,
        ),
      );

  static Widget light22PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light22PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget light22PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light22PrimaryDark(
          context,
        ),
      );

  static Widget light22PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light22PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget light22Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light22Secondary(
          context,
        ),
      );

  static Widget light22SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light22SecondaryInternal(
          context,
        ),
      );

  static Widget light22SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light22Secondary(
          context,
        ),
      ),
    );
  }

  static Widget light22SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light22SecondaryLight(
          context,
        ),
      );

  static Widget light22SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light22SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget light22SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light22SecondaryDark(
          context,
        ),
      );

  static Widget light22SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light22SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget light22Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light22Accent(
          context,
        ),
      );

  static Widget light22AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light22AccentInternal(
          context,
        ),
      );

  static Widget light22AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light22Accent(
          context,
        ),
      ),
    );
  }

  static Widget light22AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light22AccentLight(
          context,
        ),
      );

  static Widget light22AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light22AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget light22AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light22AccentDark(
          context,
        ),
      );

  static Widget light22AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light22AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget light22Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light22Grey(
          context,
        ),
      );

  static Widget light22GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light22Grey(
          context,
        ),
      ),
    );
  }

  static Widget light22GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light22GreyLight(
          context,
        ),
      );

  static Widget light22GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light22GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget light22GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light22GreyDark(
          context,
        ),
      );

  static Widget light22GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light22GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget light22Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light22Info(
          context,
        ),
      );

  static Widget light22InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light22Info(
          context,
        ),
      ),
    );
  }

  static Widget light22InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light22InfoLight(
          context,
        ),
      );

  static Widget light22InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light22InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget light22InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light22InfoDark(
          context,
        ),
      );

  static Widget light22InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light22InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget light22Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light22Success(
          context,
        ),
      );

  static Widget light22SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light22Success(
          context,
        ),
      ),
    );
  }

  static Widget light22SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light22SuccessLight(
          context,
        ),
      );

  static Widget light22SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light22SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget light22SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light22SuccessDark(
          context,
        ),
      );

  static Widget light22SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light22SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget light22Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light22Warning(
          context,
        ),
      );

  static Widget light22WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light22Warning(
          context,
        ),
      ),
    );
  }

  static Widget light22WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light22WarningLight(
          context,
        ),
      );

  static Widget light22WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light22WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget light22WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light22WarningDark(
          context,
        ),
      );

  static Widget light22WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light22WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget light22Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light22Danger(
          context,
        ),
      );

  static Widget light22DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light22Danger(
          context,
        ),
      ),
    );
  }

  static Widget light22DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light22DangerLight(
          context,
        ),
      );

  static Widget light22DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light22DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget light22DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light22DangerDark(
          context,
        ),
      );

  static Widget light22DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light22DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget light24White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light24White(
          context,
        ),
      );

  static Widget light24WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light24WhiteAlways(
          context,
        ),
      );

  static Widget light24Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light24Black(
          context,
        ),
      );

  static Widget light24BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light24BlackAlways(
          context,
        ),
      );

  static Widget light24Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light24Primary(
          context,
        ),
      );

  static Widget light24PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light24PrimaryInternal(
          context,
        ),
      );

  static Widget light24PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light24Primary(
          context,
        ),
      ),
    );
  }

  static Widget light24PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light24PrimaryLight(
          context,
        ),
      );

  static Widget light24PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light24PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget light24PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light24PrimaryDark(
          context,
        ),
      );

  static Widget light24PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light24PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget light24Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light24Secondary(
          context,
        ),
      );

  static Widget light24SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light24SecondaryInternal(
          context,
        ),
      );

  static Widget light24SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light24Secondary(
          context,
        ),
      ),
    );
  }

  static Widget light24SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light24SecondaryLight(
          context,
        ),
      );

  static Widget light24SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light24SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget light24SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light24SecondaryDark(
          context,
        ),
      );

  static Widget light24SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light24SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget light24Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light24Accent(
          context,
        ),
      );

  static Widget light24AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light24AccentInternal(
          context,
        ),
      );

  static Widget light24AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light24Accent(
          context,
        ),
      ),
    );
  }

  static Widget light24AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light24AccentLight(
          context,
        ),
      );

  static Widget light24AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light24AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget light24AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light24AccentDark(
          context,
        ),
      );

  static Widget light24AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light24AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget light24Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light24Grey(
          context,
        ),
      );

  static Widget light24GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light24Grey(
          context,
        ),
      ),
    );
  }

  static Widget light24GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light24GreyLight(
          context,
        ),
      );

  static Widget light24GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light24GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget light24GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light24GreyDark(
          context,
        ),
      );

  static Widget light24GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light24GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget light24Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light24Info(
          context,
        ),
      );

  static Widget light24InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light24Info(
          context,
        ),
      ),
    );
  }

  static Widget light24InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light24InfoLight(
          context,
        ),
      );

  static Widget light24InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light24InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget light24InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light24InfoDark(
          context,
        ),
      );

  static Widget light24InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light24InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget light24Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light24Success(
          context,
        ),
      );

  static Widget light24SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light24Success(
          context,
        ),
      ),
    );
  }

  static Widget light24SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light24SuccessLight(
          context,
        ),
      );

  static Widget light24SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light24SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget light24SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light24SuccessDark(
          context,
        ),
      );

  static Widget light24SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light24SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget light24Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light24Warning(
          context,
        ),
      );

  static Widget light24WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light24Warning(
          context,
        ),
      ),
    );
  }

  static Widget light24WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light24WarningLight(
          context,
        ),
      );

  static Widget light24WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light24WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget light24WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light24WarningDark(
          context,
        ),
      );

  static Widget light24WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light24WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget light24Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light24Danger(
          context,
        ),
      );

  static Widget light24DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light24Danger(
          context,
        ),
      ),
    );
  }

  static Widget light24DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light24DangerLight(
          context,
        ),
      );

  static Widget light24DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light24DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget light24DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light24DangerDark(
          context,
        ),
      );

  static Widget light24DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light24DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget light26White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light26White(
          context,
        ),
      );

  static Widget light26WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light26WhiteAlways(
          context,
        ),
      );

  static Widget light26Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light26Black(
          context,
        ),
      );

  static Widget light26BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light26BlackAlways(
          context,
        ),
      );

  static Widget light26Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light26Primary(
          context,
        ),
      );

  static Widget light26PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light26PrimaryInternal(
          context,
        ),
      );

  static Widget light26PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light26Primary(
          context,
        ),
      ),
    );
  }

  static Widget light26PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light26PrimaryLight(
          context,
        ),
      );

  static Widget light26PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light26PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget light26PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light26PrimaryDark(
          context,
        ),
      );

  static Widget light26PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light26PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget light26Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light26Secondary(
          context,
        ),
      );

  static Widget light26SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light26SecondaryInternal(
          context,
        ),
      );

  static Widget light26SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light26Secondary(
          context,
        ),
      ),
    );
  }

  static Widget light26SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light26SecondaryLight(
          context,
        ),
      );

  static Widget light26SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light26SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget light26SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light26SecondaryDark(
          context,
        ),
      );

  static Widget light26SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light26SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget light26Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light26Accent(
          context,
        ),
      );

  static Widget light26AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light26AccentInternal(
          context,
        ),
      );

  static Widget light26AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light26Accent(
          context,
        ),
      ),
    );
  }

  static Widget light26AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light26AccentLight(
          context,
        ),
      );

  static Widget light26AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light26AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget light26AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light26AccentDark(
          context,
        ),
      );

  static Widget light26AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light26AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget light26Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light26Grey(
          context,
        ),
      );

  static Widget light26GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light26Grey(
          context,
        ),
      ),
    );
  }

  static Widget light26GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light26GreyLight(
          context,
        ),
      );

  static Widget light26GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light26GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget light26GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light26GreyDark(
          context,
        ),
      );

  static Widget light26GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light26GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget light26Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light26Info(
          context,
        ),
      );

  static Widget light26InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light26Info(
          context,
        ),
      ),
    );
  }

  static Widget light26InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light26InfoLight(
          context,
        ),
      );

  static Widget light26InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light26InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget light26InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light26InfoDark(
          context,
        ),
      );

  static Widget light26InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light26InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget light26Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light26Success(
          context,
        ),
      );

  static Widget light26SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light26Success(
          context,
        ),
      ),
    );
  }

  static Widget light26SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light26SuccessLight(
          context,
        ),
      );

  static Widget light26SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light26SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget light26SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light26SuccessDark(
          context,
        ),
      );

  static Widget light26SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light26SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget light26Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light26Warning(
          context,
        ),
      );

  static Widget light26WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light26Warning(
          context,
        ),
      ),
    );
  }

  static Widget light26WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light26WarningLight(
          context,
        ),
      );

  static Widget light26WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light26WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget light26WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light26WarningDark(
          context,
        ),
      );

  static Widget light26WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light26WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget light26Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light26Danger(
          context,
        ),
      );

  static Widget light26DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light26Danger(
          context,
        ),
      ),
    );
  }

  static Widget light26DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light26DangerLight(
          context,
        ),
      );

  static Widget light26DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light26DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget light26DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light26DangerDark(
          context,
        ),
      );

  static Widget light26DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light26DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget light28White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light28White(
          context,
        ),
      );

  static Widget light28WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light28WhiteAlways(
          context,
        ),
      );

  static Widget light28Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light28Black(
          context,
        ),
      );

  static Widget light28BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light28BlackAlways(
          context,
        ),
      );

  static Widget light28Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light28Primary(
          context,
        ),
      );

  static Widget light28PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light28PrimaryInternal(
          context,
        ),
      );

  static Widget light28PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light28Primary(
          context,
        ),
      ),
    );
  }

  static Widget light28PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light28PrimaryLight(
          context,
        ),
      );

  static Widget light28PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light28PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget light28PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light28PrimaryDark(
          context,
        ),
      );

  static Widget light28PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light28PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget light28Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light28Secondary(
          context,
        ),
      );

  static Widget light28SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light28SecondaryInternal(
          context,
        ),
      );

  static Widget light28SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light28Secondary(
          context,
        ),
      ),
    );
  }

  static Widget light28SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light28SecondaryLight(
          context,
        ),
      );

  static Widget light28SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light28SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget light28SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light28SecondaryDark(
          context,
        ),
      );

  static Widget light28SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light28SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget light28Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light28Accent(
          context,
        ),
      );

  static Widget light28AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light28AccentInternal(
          context,
        ),
      );

  static Widget light28AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light28Accent(
          context,
        ),
      ),
    );
  }

  static Widget light28AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light28AccentLight(
          context,
        ),
      );

  static Widget light28AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light28AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget light28AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light28AccentDark(
          context,
        ),
      );

  static Widget light28AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light28AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget light28Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light28Grey(
          context,
        ),
      );

  static Widget light28GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light28Grey(
          context,
        ),
      ),
    );
  }

  static Widget light28GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light28GreyLight(
          context,
        ),
      );

  static Widget light28GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light28GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget light28GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light28GreyDark(
          context,
        ),
      );

  static Widget light28GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light28GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget light28Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light28Info(
          context,
        ),
      );

  static Widget light28InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light28Info(
          context,
        ),
      ),
    );
  }

  static Widget light28InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light28InfoLight(
          context,
        ),
      );

  static Widget light28InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light28InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget light28InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light28InfoDark(
          context,
        ),
      );

  static Widget light28InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light28InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget light28Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light28Success(
          context,
        ),
      );

  static Widget light28SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light28Success(
          context,
        ),
      ),
    );
  }

  static Widget light28SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light28SuccessLight(
          context,
        ),
      );

  static Widget light28SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light28SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget light28SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light28SuccessDark(
          context,
        ),
      );

  static Widget light28SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light28SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget light28Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light28Warning(
          context,
        ),
      );

  static Widget light28WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light28Warning(
          context,
        ),
      ),
    );
  }

  static Widget light28WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light28WarningLight(
          context,
        ),
      );

  static Widget light28WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light28WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget light28WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light28WarningDark(
          context,
        ),
      );

  static Widget light28WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light28WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget light28Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light28Danger(
          context,
        ),
      );

  static Widget light28DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light28Danger(
          context,
        ),
      ),
    );
  }

  static Widget light28DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light28DangerLight(
          context,
        ),
      );

  static Widget light28DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light28DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget light28DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light28DangerDark(
          context,
        ),
      );

  static Widget light28DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light28DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget light32White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light32White(
          context,
        ),
      );

  static Widget light32WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light32WhiteAlways(
          context,
        ),
      );

  static Widget light32Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light32Black(
          context,
        ),
      );

  static Widget light32BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light32BlackAlways(
          context,
        ),
      );

  static Widget light32Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light32Primary(
          context,
        ),
      );

  static Widget light32PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light32PrimaryInternal(
          context,
        ),
      );

  static Widget light32PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light32Primary(
          context,
        ),
      ),
    );
  }

  static Widget light32PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light32PrimaryLight(
          context,
        ),
      );

  static Widget light32PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light32PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget light32PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light32PrimaryDark(
          context,
        ),
      );

  static Widget light32PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light32PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget light32Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light32Secondary(
          context,
        ),
      );

  static Widget light32SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light32SecondaryInternal(
          context,
        ),
      );

  static Widget light32SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light32Secondary(
          context,
        ),
      ),
    );
  }

  static Widget light32SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light32SecondaryLight(
          context,
        ),
      );

  static Widget light32SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light32SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget light32SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light32SecondaryDark(
          context,
        ),
      );

  static Widget light32SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light32SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget light32Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light32Accent(
          context,
        ),
      );

  static Widget light32AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light32AccentInternal(
          context,
        ),
      );

  static Widget light32AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light32Accent(
          context,
        ),
      ),
    );
  }

  static Widget light32AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light32AccentLight(
          context,
        ),
      );

  static Widget light32AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light32AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget light32AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light32AccentDark(
          context,
        ),
      );

  static Widget light32AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light32AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget light32Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light32Grey(
          context,
        ),
      );

  static Widget light32GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light32Grey(
          context,
        ),
      ),
    );
  }

  static Widget light32GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light32GreyLight(
          context,
        ),
      );

  static Widget light32GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light32GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget light32GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light32GreyDark(
          context,
        ),
      );

  static Widget light32GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light32GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget light32Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light32Info(
          context,
        ),
      );

  static Widget light32InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light32Info(
          context,
        ),
      ),
    );
  }

  static Widget light32InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light32InfoLight(
          context,
        ),
      );

  static Widget light32InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light32InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget light32InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light32InfoDark(
          context,
        ),
      );

  static Widget light32InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light32InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget light32Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light32Success(
          context,
        ),
      );

  static Widget light32SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light32Success(
          context,
        ),
      ),
    );
  }

  static Widget light32SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light32SuccessLight(
          context,
        ),
      );

  static Widget light32SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light32SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget light32SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light32SuccessDark(
          context,
        ),
      );

  static Widget light32SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light32SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget light32Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light32Warning(
          context,
        ),
      );

  static Widget light32WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light32Warning(
          context,
        ),
      ),
    );
  }

  static Widget light32WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light32WarningLight(
          context,
        ),
      );

  static Widget light32WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light32WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget light32WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light32WarningDark(
          context,
        ),
      );

  static Widget light32WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light32WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget light32Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light32Danger(
          context,
        ),
      );

  static Widget light32DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light32Danger(
          context,
        ),
      ),
    );
  }

  static Widget light32DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light32DangerLight(
          context,
        ),
      );

  static Widget light32DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light32DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget light32DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light32DangerDark(
          context,
        ),
      );

  static Widget light32DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.light32DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget regular10White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular10White(
          context,
        ),
      );

  static Widget regular10WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular10WhiteAlways(
          context,
        ),
      );

  static Widget regular10Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular10Black(
          context,
        ),
      );

  static Widget regular10BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular10BlackAlways(
          context,
        ),
      );

  static Widget regular10Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular10Primary(
          context,
        ),
      );

  static Widget regular10PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular10PrimaryInternal(
          context,
        ),
      );

  static Widget regular10PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular10Primary(
          context,
        ),
      ),
    );
  }

  static Widget regular10PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular10PrimaryLight(
          context,
        ),
      );

  static Widget regular10PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular10PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget regular10PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular10PrimaryDark(
          context,
        ),
      );

  static Widget regular10PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular10PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget regular10Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular10Secondary(
          context,
        ),
      );

  static Widget regular10SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular10SecondaryInternal(
          context,
        ),
      );

  static Widget regular10SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular10Secondary(
          context,
        ),
      ),
    );
  }

  static Widget regular10SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular10SecondaryLight(
          context,
        ),
      );

  static Widget regular10SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular10SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget regular10SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular10SecondaryDark(
          context,
        ),
      );

  static Widget regular10SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular10SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget regular10Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular10Accent(
          context,
        ),
      );

  static Widget regular10AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular10AccentInternal(
          context,
        ),
      );

  static Widget regular10AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular10Accent(
          context,
        ),
      ),
    );
  }

  static Widget regular10AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular10AccentLight(
          context,
        ),
      );

  static Widget regular10AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular10AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget regular10AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular10AccentDark(
          context,
        ),
      );

  static Widget regular10AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular10AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget regular10Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular10Grey(
          context,
        ),
      );

  static Widget regular10GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular10Grey(
          context,
        ),
      ),
    );
  }

  static Widget regular10GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular10GreyLight(
          context,
        ),
      );

  static Widget regular10GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular10GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget regular10GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular10GreyDark(
          context,
        ),
      );

  static Widget regular10GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular10GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget regular10Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular10Info(
          context,
        ),
      );

  static Widget regular10InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular10Info(
          context,
        ),
      ),
    );
  }

  static Widget regular10InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular10InfoLight(
          context,
        ),
      );

  static Widget regular10InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular10InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget regular10InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular10InfoDark(
          context,
        ),
      );

  static Widget regular10InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular10InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget regular10Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular10Success(
          context,
        ),
      );

  static Widget regular10SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular10Success(
          context,
        ),
      ),
    );
  }

  static Widget regular10SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular10SuccessLight(
          context,
        ),
      );

  static Widget regular10SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular10SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget regular10SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular10SuccessDark(
          context,
        ),
      );

  static Widget regular10SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular10SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget regular10Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular10Warning(
          context,
        ),
      );

  static Widget regular10WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular10Warning(
          context,
        ),
      ),
    );
  }

  static Widget regular10WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular10WarningLight(
          context,
        ),
      );

  static Widget regular10WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular10WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget regular10WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular10WarningDark(
          context,
        ),
      );

  static Widget regular10WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular10WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget regular10Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular10Danger(
          context,
        ),
      );

  static Widget regular10DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular10Danger(
          context,
        ),
      ),
    );
  }

  static Widget regular10DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular10DangerLight(
          context,
        ),
      );

  static Widget regular10DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular10DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget regular10DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular10DangerDark(
          context,
        ),
      );

  static Widget regular10DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular10DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget regular11White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular11White(
          context,
        ),
      );

  static Widget regular11WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular11WhiteAlways(
          context,
        ),
      );

  static Widget regular11Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular11Black(
          context,
        ),
      );

  static Widget regular11BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular11BlackAlways(
          context,
        ),
      );

  static Widget regular11Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular11Primary(
          context,
        ),
      );

  static Widget regular11PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular11PrimaryInternal(
          context,
        ),
      );

  static Widget regular11PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular11Primary(
          context,
        ),
      ),
    );
  }

  static Widget regular11PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular11PrimaryLight(
          context,
        ),
      );

  static Widget regular11PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular11PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget regular11PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular11PrimaryDark(
          context,
        ),
      );

  static Widget regular11PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular11PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget regular11Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular11Secondary(
          context,
        ),
      );

  static Widget regular11SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular11SecondaryInternal(
          context,
        ),
      );

  static Widget regular11SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular11Secondary(
          context,
        ),
      ),
    );
  }

  static Widget regular11SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular11SecondaryLight(
          context,
        ),
      );

  static Widget regular11SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular11SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget regular11SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular11SecondaryDark(
          context,
        ),
      );

  static Widget regular11SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular11SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget regular11Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular11Accent(
          context,
        ),
      );

  static Widget regular11AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular11AccentInternal(
          context,
        ),
      );

  static Widget regular11AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular11Accent(
          context,
        ),
      ),
    );
  }

  static Widget regular11AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular11AccentLight(
          context,
        ),
      );

  static Widget regular11AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular11AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget regular11AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular11AccentDark(
          context,
        ),
      );

  static Widget regular11AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular11AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget regular11Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular11Grey(
          context,
        ),
      );

  static Widget regular11GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular11Grey(
          context,
        ),
      ),
    );
  }

  static Widget regular11GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular11GreyLight(
          context,
        ),
      );

  static Widget regular11GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular11GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget regular11GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular11GreyDark(
          context,
        ),
      );

  static Widget regular11GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular11GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget regular11Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular11Info(
          context,
        ),
      );

  static Widget regular11InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular11Info(
          context,
        ),
      ),
    );
  }

  static Widget regular11InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular11InfoLight(
          context,
        ),
      );

  static Widget regular11InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular11InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget regular11InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular11InfoDark(
          context,
        ),
      );

  static Widget regular11InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular11InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget regular11Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular11Success(
          context,
        ),
      );

  static Widget regular11SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular11Success(
          context,
        ),
      ),
    );
  }

  static Widget regular11SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular11SuccessLight(
          context,
        ),
      );

  static Widget regular11SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular11SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget regular11SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular11SuccessDark(
          context,
        ),
      );

  static Widget regular11SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular11SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget regular11Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular11Warning(
          context,
        ),
      );

  static Widget regular11WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular11Warning(
          context,
        ),
      ),
    );
  }

  static Widget regular11WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular11WarningLight(
          context,
        ),
      );

  static Widget regular11WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular11WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget regular11WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular11WarningDark(
          context,
        ),
      );

  static Widget regular11WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular11WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget regular11Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular11Danger(
          context,
        ),
      );

  static Widget regular11DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular11Danger(
          context,
        ),
      ),
    );
  }

  static Widget regular11DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular11DangerLight(
          context,
        ),
      );

  static Widget regular11DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular11DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget regular11DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular11DangerDark(
          context,
        ),
      );

  static Widget regular11DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular11DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget regular12White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular12White(
          context,
        ),
      );

  static Widget regular12WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular12WhiteAlways(
          context,
        ),
      );

  static Widget regular12Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular12Black(
          context,
        ),
      );

  static Widget regular12BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular12BlackAlways(
          context,
        ),
      );

  static Widget regular12Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular12Primary(
          context,
        ),
      );

  static Widget regular12PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular12PrimaryInternal(
          context,
        ),
      );

  static Widget regular12PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular12Primary(
          context,
        ),
      ),
    );
  }

  static Widget regular12PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular12PrimaryLight(
          context,
        ),
      );

  static Widget regular12PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular12PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget regular12PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular12PrimaryDark(
          context,
        ),
      );

  static Widget regular12PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular12PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget regular12Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular12Secondary(
          context,
        ),
      );

  static Widget regular12SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular12SecondaryInternal(
          context,
        ),
      );

  static Widget regular12SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular12Secondary(
          context,
        ),
      ),
    );
  }

  static Widget regular12SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular12SecondaryLight(
          context,
        ),
      );

  static Widget regular12SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular12SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget regular12SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular12SecondaryDark(
          context,
        ),
      );

  static Widget regular12SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular12SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget regular12Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular12Accent(
          context,
        ),
      );

  static Widget regular12AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular12AccentInternal(
          context,
        ),
      );

  static Widget regular12AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular12Accent(
          context,
        ),
      ),
    );
  }

  static Widget regular12AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular12AccentLight(
          context,
        ),
      );

  static Widget regular12AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular12AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget regular12AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular12AccentDark(
          context,
        ),
      );

  static Widget regular12AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular12AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget regular12Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular12Grey(
          context,
        ),
      );

  static Widget regular12GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular12Grey(
          context,
        ),
      ),
    );
  }

  static Widget regular12GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular12GreyLight(
          context,
        ),
      );

  static Widget regular12GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular12GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget regular12GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular12GreyDark(
          context,
        ),
      );

  static Widget regular12GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular12GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget regular12Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular12Info(
          context,
        ),
      );

  static Widget regular12InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular12Info(
          context,
        ),
      ),
    );
  }

  static Widget regular12InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular12InfoLight(
          context,
        ),
      );

  static Widget regular12InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular12InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget regular12InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular12InfoDark(
          context,
        ),
      );

  static Widget regular12InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular12InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget regular12Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular12Success(
          context,
        ),
      );

  static Widget regular12SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular12Success(
          context,
        ),
      ),
    );
  }

  static Widget regular12SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular12SuccessLight(
          context,
        ),
      );

  static Widget regular12SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular12SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget regular12SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular12SuccessDark(
          context,
        ),
      );

  static Widget regular12SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular12SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget regular12Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular12Warning(
          context,
        ),
      );

  static Widget regular12WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular12Warning(
          context,
        ),
      ),
    );
  }

  static Widget regular12WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular12WarningLight(
          context,
        ),
      );

  static Widget regular12WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular12WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget regular12WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular12WarningDark(
          context,
        ),
      );

  static Widget regular12WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular12WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget regular12Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular12Danger(
          context,
        ),
      );

  static Widget regular12DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular12Danger(
          context,
        ),
      ),
    );
  }

  static Widget regular12DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular12DangerLight(
          context,
        ),
      );

  static Widget regular12DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular12DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget regular12DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular12DangerDark(
          context,
        ),
      );

  static Widget regular12DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular12DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget regular13White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular13White(
          context,
        ),
      );

  static Widget regular13WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular13WhiteAlways(
          context,
        ),
      );

  static Widget regular13Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular13Black(
          context,
        ),
      );

  static Widget regular13BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular13BlackAlways(
          context,
        ),
      );

  static Widget regular13Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular13Primary(
          context,
        ),
      );

  static Widget regular13PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular13PrimaryInternal(
          context,
        ),
      );

  static Widget regular13PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular13Primary(
          context,
        ),
      ),
    );
  }

  static Widget regular13PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular13PrimaryLight(
          context,
        ),
      );

  static Widget regular13PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular13PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget regular13PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular13PrimaryDark(
          context,
        ),
      );

  static Widget regular13PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular13PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget regular13Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular13Secondary(
          context,
        ),
      );

  static Widget regular13SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular13SecondaryInternal(
          context,
        ),
      );

  static Widget regular13SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular13Secondary(
          context,
        ),
      ),
    );
  }

  static Widget regular13SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular13SecondaryLight(
          context,
        ),
      );

  static Widget regular13SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular13SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget regular13SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular13SecondaryDark(
          context,
        ),
      );

  static Widget regular13SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular13SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget regular13Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular13Accent(
          context,
        ),
      );

  static Widget regular13AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular13AccentInternal(
          context,
        ),
      );

  static Widget regular13AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular13Accent(
          context,
        ),
      ),
    );
  }

  static Widget regular13AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular13AccentLight(
          context,
        ),
      );

  static Widget regular13AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular13AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget regular13AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular13AccentDark(
          context,
        ),
      );

  static Widget regular13AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular13AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget regular13Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular13Grey(
          context,
        ),
      );

  static Widget regular13GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular13Grey(
          context,
        ),
      ),
    );
  }

  static Widget regular13GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular13GreyLight(
          context,
        ),
      );

  static Widget regular13GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular13GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget regular13GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular13GreyDark(
          context,
        ),
      );

  static Widget regular13GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular13GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget regular13Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular13Info(
          context,
        ),
      );

  static Widget regular13InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular13Info(
          context,
        ),
      ),
    );
  }

  static Widget regular13InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular13InfoLight(
          context,
        ),
      );

  static Widget regular13InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular13InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget regular13InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular13InfoDark(
          context,
        ),
      );

  static Widget regular13InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular13InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget regular13Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular13Success(
          context,
        ),
      );

  static Widget regular13SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular13Success(
          context,
        ),
      ),
    );
  }

  static Widget regular13SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular13SuccessLight(
          context,
        ),
      );

  static Widget regular13SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular13SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget regular13SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular13SuccessDark(
          context,
        ),
      );

  static Widget regular13SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular13SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget regular13Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular13Warning(
          context,
        ),
      );

  static Widget regular13WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular13Warning(
          context,
        ),
      ),
    );
  }

  static Widget regular13WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular13WarningLight(
          context,
        ),
      );

  static Widget regular13WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular13WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget regular13WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular13WarningDark(
          context,
        ),
      );

  static Widget regular13WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular13WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget regular13Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular13Danger(
          context,
        ),
      );

  static Widget regular13DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular13Danger(
          context,
        ),
      ),
    );
  }

  static Widget regular13DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular13DangerLight(
          context,
        ),
      );

  static Widget regular13DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular13DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget regular13DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular13DangerDark(
          context,
        ),
      );

  static Widget regular13DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular13DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget regular14White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular14White(
          context,
        ),
      );

  static Widget regular14WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular14WhiteAlways(
          context,
        ),
      );

  static Widget regular14Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular14Black(
          context,
        ),
      );

  static Widget regular14BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular14BlackAlways(
          context,
        ),
      );

  static Widget regular14Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular14Primary(
          context,
        ),
      );

  static Widget regular14PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular14PrimaryInternal(
          context,
        ),
      );

  static Widget regular14PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular14Primary(
          context,
        ),
      ),
    );
  }

  static Widget regular14PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular14PrimaryLight(
          context,
        ),
      );

  static Widget regular14PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular14PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget regular14PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular14PrimaryDark(
          context,
        ),
      );

  static Widget regular14PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular14PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget regular14Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular14Secondary(
          context,
        ),
      );

  static Widget regular14SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular14SecondaryInternal(
          context,
        ),
      );

  static Widget regular14SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular14Secondary(
          context,
        ),
      ),
    );
  }

  static Widget regular14SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular14SecondaryLight(
          context,
        ),
      );

  static Widget regular14SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular14SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget regular14SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular14SecondaryDark(
          context,
        ),
      );

  static Widget regular14SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular14SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget regular14Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular14Accent(
          context,
        ),
      );

  static Widget regular14AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular14AccentInternal(
          context,
        ),
      );

  static Widget regular14AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular14Accent(
          context,
        ),
      ),
    );
  }

  static Widget regular14AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular14AccentLight(
          context,
        ),
      );

  static Widget regular14AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular14AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget regular14AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular14AccentDark(
          context,
        ),
      );

  static Widget regular14AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular14AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget regular14Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular14Grey(
          context,
        ),
      );

  static Widget regular14GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular14Grey(
          context,
        ),
      ),
    );
  }

  static Widget regular14GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular14GreyLight(
          context,
        ),
      );

  static Widget regular14GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular14GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget regular14GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular14GreyDark(
          context,
        ),
      );

  static Widget regular14GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular14GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget regular14Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular14Info(
          context,
        ),
      );

  static Widget regular14InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular14Info(
          context,
        ),
      ),
    );
  }

  static Widget regular14InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular14InfoLight(
          context,
        ),
      );

  static Widget regular14InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular14InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget regular14InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular14InfoDark(
          context,
        ),
      );

  static Widget regular14InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular14InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget regular14Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular14Success(
          context,
        ),
      );

  static Widget regular14SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular14Success(
          context,
        ),
      ),
    );
  }

  static Widget regular14SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular14SuccessLight(
          context,
        ),
      );

  static Widget regular14SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular14SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget regular14SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular14SuccessDark(
          context,
        ),
      );

  static Widget regular14SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular14SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget regular14Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular14Warning(
          context,
        ),
      );

  static Widget regular14WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular14Warning(
          context,
        ),
      ),
    );
  }

  static Widget regular14WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular14WarningLight(
          context,
        ),
      );

  static Widget regular14WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular14WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget regular14WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular14WarningDark(
          context,
        ),
      );

  static Widget regular14WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular14WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget regular14Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular14Danger(
          context,
        ),
      );

  static Widget regular14DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular14Danger(
          context,
        ),
      ),
    );
  }

  static Widget regular14DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular14DangerLight(
          context,
        ),
      );

  static Widget regular14DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular14DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget regular14DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular14DangerDark(
          context,
        ),
      );

  static Widget regular14DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular14DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget regular15White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular15White(
          context,
        ),
      );

  static Widget regular15WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular15WhiteAlways(
          context,
        ),
      );

  static Widget regular15Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular15Black(
          context,
        ),
      );

  static Widget regular15BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular15BlackAlways(
          context,
        ),
      );

  static Widget regular15Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular15Primary(
          context,
        ),
      );

  static Widget regular15PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular15PrimaryInternal(
          context,
        ),
      );

  static Widget regular15PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular15Primary(
          context,
        ),
      ),
    );
  }

  static Widget regular15PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular15PrimaryLight(
          context,
        ),
      );

  static Widget regular15PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular15PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget regular15PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular15PrimaryDark(
          context,
        ),
      );

  static Widget regular15PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular15PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget regular15Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular15Secondary(
          context,
        ),
      );

  static Widget regular15SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular15SecondaryInternal(
          context,
        ),
      );

  static Widget regular15SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular15Secondary(
          context,
        ),
      ),
    );
  }

  static Widget regular15SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular15SecondaryLight(
          context,
        ),
      );

  static Widget regular15SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular15SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget regular15SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular15SecondaryDark(
          context,
        ),
      );

  static Widget regular15SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular15SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget regular15Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular15Accent(
          context,
        ),
      );

  static Widget regular15AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular15AccentInternal(
          context,
        ),
      );

  static Widget regular15AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular15Accent(
          context,
        ),
      ),
    );
  }

  static Widget regular15AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular15AccentLight(
          context,
        ),
      );

  static Widget regular15AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular15AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget regular15AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular15AccentDark(
          context,
        ),
      );

  static Widget regular15AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular15AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget regular15Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular15Grey(
          context,
        ),
      );

  static Widget regular15GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular15Grey(
          context,
        ),
      ),
    );
  }

  static Widget regular15GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular15GreyLight(
          context,
        ),
      );

  static Widget regular15GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular15GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget regular15GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular15GreyDark(
          context,
        ),
      );

  static Widget regular15GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular15GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget regular15Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular15Info(
          context,
        ),
      );

  static Widget regular15InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular15Info(
          context,
        ),
      ),
    );
  }

  static Widget regular15InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular15InfoLight(
          context,
        ),
      );

  static Widget regular15InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular15InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget regular15InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular15InfoDark(
          context,
        ),
      );

  static Widget regular15InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular15InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget regular15Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular15Success(
          context,
        ),
      );

  static Widget regular15SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular15Success(
          context,
        ),
      ),
    );
  }

  static Widget regular15SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular15SuccessLight(
          context,
        ),
      );

  static Widget regular15SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular15SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget regular15SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular15SuccessDark(
          context,
        ),
      );

  static Widget regular15SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular15SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget regular15Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular15Warning(
          context,
        ),
      );

  static Widget regular15WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular15Warning(
          context,
        ),
      ),
    );
  }

  static Widget regular15WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular15WarningLight(
          context,
        ),
      );

  static Widget regular15WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular15WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget regular15WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular15WarningDark(
          context,
        ),
      );

  static Widget regular15WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular15WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget regular15Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular15Danger(
          context,
        ),
      );

  static Widget regular15DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular15Danger(
          context,
        ),
      ),
    );
  }

  static Widget regular15DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular15DangerLight(
          context,
        ),
      );

  static Widget regular15DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular15DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget regular15DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular15DangerDark(
          context,
        ),
      );

  static Widget regular15DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular15DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget regular16White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular16White(
          context,
        ),
      );

  static Widget regular16WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular16WhiteAlways(
          context,
        ),
      );

  static Widget regular16Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular16Black(
          context,
        ),
      );

  static Widget regular16BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular16BlackAlways(
          context,
        ),
      );

  static Widget regular16Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular16Primary(
          context,
        ),
      );

  static Widget regular16PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular16PrimaryInternal(
          context,
        ),
      );

  static Widget regular16PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular16Primary(
          context,
        ),
      ),
    );
  }

  static Widget regular16PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular16PrimaryLight(
          context,
        ),
      );

  static Widget regular16PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular16PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget regular16PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular16PrimaryDark(
          context,
        ),
      );

  static Widget regular16PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular16PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget regular16Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular16Secondary(
          context,
        ),
      );

  static Widget regular16SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular16SecondaryInternal(
          context,
        ),
      );

  static Widget regular16SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular16Secondary(
          context,
        ),
      ),
    );
  }

  static Widget regular16SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular16SecondaryLight(
          context,
        ),
      );

  static Widget regular16SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular16SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget regular16SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular16SecondaryDark(
          context,
        ),
      );

  static Widget regular16SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular16SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget regular16Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular16Accent(
          context,
        ),
      );

  static Widget regular16AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular16AccentInternal(
          context,
        ),
      );

  static Widget regular16AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular16Accent(
          context,
        ),
      ),
    );
  }

  static Widget regular16AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular16AccentLight(
          context,
        ),
      );

  static Widget regular16AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular16AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget regular16AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular16AccentDark(
          context,
        ),
      );

  static Widget regular16AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular16AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget regular16Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular16Grey(
          context,
        ),
      );

  static Widget regular16GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular16Grey(
          context,
        ),
      ),
    );
  }

  static Widget regular16GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular16GreyLight(
          context,
        ),
      );

  static Widget regular16GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular16GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget regular16GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular16GreyDark(
          context,
        ),
      );

  static Widget regular16GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular16GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget regular16Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular16Info(
          context,
        ),
      );

  static Widget regular16InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular16Info(
          context,
        ),
      ),
    );
  }

  static Widget regular16InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular16InfoLight(
          context,
        ),
      );

  static Widget regular16InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular16InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget regular16InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular16InfoDark(
          context,
        ),
      );

  static Widget regular16InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular16InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget regular16Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular16Success(
          context,
        ),
      );

  static Widget regular16SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular16Success(
          context,
        ),
      ),
    );
  }

  static Widget regular16SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular16SuccessLight(
          context,
        ),
      );

  static Widget regular16SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular16SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget regular16SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular16SuccessDark(
          context,
        ),
      );

  static Widget regular16SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular16SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget regular16Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular16Warning(
          context,
        ),
      );

  static Widget regular16WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular16Warning(
          context,
        ),
      ),
    );
  }

  static Widget regular16WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular16WarningLight(
          context,
        ),
      );

  static Widget regular16WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular16WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget regular16WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular16WarningDark(
          context,
        ),
      );

  static Widget regular16WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular16WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget regular16Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular16Danger(
          context,
        ),
      );

  static Widget regular16DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular16Danger(
          context,
        ),
      ),
    );
  }

  static Widget regular16DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular16DangerLight(
          context,
        ),
      );

  static Widget regular16DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular16DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget regular16DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular16DangerDark(
          context,
        ),
      );

  static Widget regular16DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular16DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget regular17White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular17White(
          context,
        ),
      );

  static Widget regular17WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular17WhiteAlways(
          context,
        ),
      );

  static Widget regular17Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular17Black(
          context,
        ),
      );

  static Widget regular17BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular17BlackAlways(
          context,
        ),
      );

  static Widget regular17Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular17Primary(
          context,
        ),
      );

  static Widget regular17PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular17PrimaryInternal(
          context,
        ),
      );

  static Widget regular17PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular17Primary(
          context,
        ),
      ),
    );
  }

  static Widget regular17PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular17PrimaryLight(
          context,
        ),
      );

  static Widget regular17PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular17PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget regular17PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular17PrimaryDark(
          context,
        ),
      );

  static Widget regular17PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular17PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget regular17Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular17Secondary(
          context,
        ),
      );

  static Widget regular17SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular17SecondaryInternal(
          context,
        ),
      );

  static Widget regular17SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular17Secondary(
          context,
        ),
      ),
    );
  }

  static Widget regular17SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular17SecondaryLight(
          context,
        ),
      );

  static Widget regular17SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular17SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget regular17SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular17SecondaryDark(
          context,
        ),
      );

  static Widget regular17SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular17SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget regular17Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular17Accent(
          context,
        ),
      );

  static Widget regular17AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular17AccentInternal(
          context,
        ),
      );

  static Widget regular17AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular17Accent(
          context,
        ),
      ),
    );
  }

  static Widget regular17AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular17AccentLight(
          context,
        ),
      );

  static Widget regular17AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular17AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget regular17AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular17AccentDark(
          context,
        ),
      );

  static Widget regular17AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular17AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget regular17Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular17Grey(
          context,
        ),
      );

  static Widget regular17GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular17Grey(
          context,
        ),
      ),
    );
  }

  static Widget regular17GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular17GreyLight(
          context,
        ),
      );

  static Widget regular17GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular17GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget regular17GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular17GreyDark(
          context,
        ),
      );

  static Widget regular17GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular17GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget regular17Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular17Info(
          context,
        ),
      );

  static Widget regular17InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular17Info(
          context,
        ),
      ),
    );
  }

  static Widget regular17InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular17InfoLight(
          context,
        ),
      );

  static Widget regular17InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular17InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget regular17InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular17InfoDark(
          context,
        ),
      );

  static Widget regular17InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular17InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget regular17Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular17Success(
          context,
        ),
      );

  static Widget regular17SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular17Success(
          context,
        ),
      ),
    );
  }

  static Widget regular17SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular17SuccessLight(
          context,
        ),
      );

  static Widget regular17SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular17SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget regular17SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular17SuccessDark(
          context,
        ),
      );

  static Widget regular17SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular17SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget regular17Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular17Warning(
          context,
        ),
      );

  static Widget regular17WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular17Warning(
          context,
        ),
      ),
    );
  }

  static Widget regular17WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular17WarningLight(
          context,
        ),
      );

  static Widget regular17WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular17WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget regular17WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular17WarningDark(
          context,
        ),
      );

  static Widget regular17WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular17WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget regular17Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular17Danger(
          context,
        ),
      );

  static Widget regular17DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular17Danger(
          context,
        ),
      ),
    );
  }

  static Widget regular17DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular17DangerLight(
          context,
        ),
      );

  static Widget regular17DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular17DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget regular17DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular17DangerDark(
          context,
        ),
      );

  static Widget regular17DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular17DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget regular18White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular18White(
          context,
        ),
      );

  static Widget regular18WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular18WhiteAlways(
          context,
        ),
      );

  static Widget regular18Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular18Black(
          context,
        ),
      );

  static Widget regular18BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular18BlackAlways(
          context,
        ),
      );

  static Widget regular18Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular18Primary(
          context,
        ),
      );

  static Widget regular18PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular18PrimaryInternal(
          context,
        ),
      );

  static Widget regular18PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular18Primary(
          context,
        ),
      ),
    );
  }

  static Widget regular18PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular18PrimaryLight(
          context,
        ),
      );

  static Widget regular18PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular18PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget regular18PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular18PrimaryDark(
          context,
        ),
      );

  static Widget regular18PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular18PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget regular18Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular18Secondary(
          context,
        ),
      );

  static Widget regular18SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular18SecondaryInternal(
          context,
        ),
      );

  static Widget regular18SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular18Secondary(
          context,
        ),
      ),
    );
  }

  static Widget regular18SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular18SecondaryLight(
          context,
        ),
      );

  static Widget regular18SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular18SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget regular18SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular18SecondaryDark(
          context,
        ),
      );

  static Widget regular18SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular18SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget regular18Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular18Accent(
          context,
        ),
      );

  static Widget regular18AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular18AccentInternal(
          context,
        ),
      );

  static Widget regular18AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular18Accent(
          context,
        ),
      ),
    );
  }

  static Widget regular18AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular18AccentLight(
          context,
        ),
      );

  static Widget regular18AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular18AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget regular18AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular18AccentDark(
          context,
        ),
      );

  static Widget regular18AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular18AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget regular18Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular18Grey(
          context,
        ),
      );

  static Widget regular18GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular18Grey(
          context,
        ),
      ),
    );
  }

  static Widget regular18GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular18GreyLight(
          context,
        ),
      );

  static Widget regular18GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular18GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget regular18GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular18GreyDark(
          context,
        ),
      );

  static Widget regular18GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular18GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget regular18Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular18Info(
          context,
        ),
      );

  static Widget regular18InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular18Info(
          context,
        ),
      ),
    );
  }

  static Widget regular18InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular18InfoLight(
          context,
        ),
      );

  static Widget regular18InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular18InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget regular18InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular18InfoDark(
          context,
        ),
      );

  static Widget regular18InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular18InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget regular18Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular18Success(
          context,
        ),
      );

  static Widget regular18SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular18Success(
          context,
        ),
      ),
    );
  }

  static Widget regular18SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular18SuccessLight(
          context,
        ),
      );

  static Widget regular18SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular18SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget regular18SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular18SuccessDark(
          context,
        ),
      );

  static Widget regular18SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular18SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget regular18Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular18Warning(
          context,
        ),
      );

  static Widget regular18WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular18Warning(
          context,
        ),
      ),
    );
  }

  static Widget regular18WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular18WarningLight(
          context,
        ),
      );

  static Widget regular18WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular18WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget regular18WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular18WarningDark(
          context,
        ),
      );

  static Widget regular18WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular18WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget regular18Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular18Danger(
          context,
        ),
      );

  static Widget regular18DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular18Danger(
          context,
        ),
      ),
    );
  }

  static Widget regular18DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular18DangerLight(
          context,
        ),
      );

  static Widget regular18DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular18DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget regular18DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular18DangerDark(
          context,
        ),
      );

  static Widget regular18DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular18DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget regular19White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular19White(
          context,
        ),
      );

  static Widget regular19WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular19WhiteAlways(
          context,
        ),
      );

  static Widget regular19Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular19Black(
          context,
        ),
      );

  static Widget regular19BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular19BlackAlways(
          context,
        ),
      );

  static Widget regular19Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular19Primary(
          context,
        ),
      );

  static Widget regular19PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular19PrimaryInternal(
          context,
        ),
      );

  static Widget regular19PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular19Primary(
          context,
        ),
      ),
    );
  }

  static Widget regular19PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular19PrimaryLight(
          context,
        ),
      );

  static Widget regular19PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular19PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget regular19PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular19PrimaryDark(
          context,
        ),
      );

  static Widget regular19PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular19PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget regular19Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular19Secondary(
          context,
        ),
      );

  static Widget regular19SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular19SecondaryInternal(
          context,
        ),
      );

  static Widget regular19SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular19Secondary(
          context,
        ),
      ),
    );
  }

  static Widget regular19SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular19SecondaryLight(
          context,
        ),
      );

  static Widget regular19SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular19SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget regular19SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular19SecondaryDark(
          context,
        ),
      );

  static Widget regular19SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular19SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget regular19Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular19Accent(
          context,
        ),
      );

  static Widget regular19AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular19AccentInternal(
          context,
        ),
      );

  static Widget regular19AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular19Accent(
          context,
        ),
      ),
    );
  }

  static Widget regular19AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular19AccentLight(
          context,
        ),
      );

  static Widget regular19AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular19AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget regular19AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular19AccentDark(
          context,
        ),
      );

  static Widget regular19AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular19AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget regular19Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular19Grey(
          context,
        ),
      );

  static Widget regular19GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular19Grey(
          context,
        ),
      ),
    );
  }

  static Widget regular19GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular19GreyLight(
          context,
        ),
      );

  static Widget regular19GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular19GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget regular19GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular19GreyDark(
          context,
        ),
      );

  static Widget regular19GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular19GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget regular19Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular19Info(
          context,
        ),
      );

  static Widget regular19InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular19Info(
          context,
        ),
      ),
    );
  }

  static Widget regular19InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular19InfoLight(
          context,
        ),
      );

  static Widget regular19InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular19InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget regular19InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular19InfoDark(
          context,
        ),
      );

  static Widget regular19InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular19InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget regular19Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular19Success(
          context,
        ),
      );

  static Widget regular19SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular19Success(
          context,
        ),
      ),
    );
  }

  static Widget regular19SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular19SuccessLight(
          context,
        ),
      );

  static Widget regular19SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular19SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget regular19SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular19SuccessDark(
          context,
        ),
      );

  static Widget regular19SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular19SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget regular19Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular19Warning(
          context,
        ),
      );

  static Widget regular19WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular19Warning(
          context,
        ),
      ),
    );
  }

  static Widget regular19WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular19WarningLight(
          context,
        ),
      );

  static Widget regular19WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular19WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget regular19WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular19WarningDark(
          context,
        ),
      );

  static Widget regular19WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular19WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget regular19Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular19Danger(
          context,
        ),
      );

  static Widget regular19DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular19Danger(
          context,
        ),
      ),
    );
  }

  static Widget regular19DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular19DangerLight(
          context,
        ),
      );

  static Widget regular19DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular19DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget regular19DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular19DangerDark(
          context,
        ),
      );

  static Widget regular19DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular19DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget regular20White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular20White(
          context,
        ),
      );

  static Widget regular20WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular20WhiteAlways(
          context,
        ),
      );

  static Widget regular20Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular20Black(
          context,
        ),
      );

  static Widget regular20BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular20BlackAlways(
          context,
        ),
      );

  static Widget regular20Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular20Primary(
          context,
        ),
      );

  static Widget regular20PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular20PrimaryInternal(
          context,
        ),
      );

  static Widget regular20PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular20Primary(
          context,
        ),
      ),
    );
  }

  static Widget regular20PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular20PrimaryLight(
          context,
        ),
      );

  static Widget regular20PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular20PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget regular20PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular20PrimaryDark(
          context,
        ),
      );

  static Widget regular20PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular20PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget regular20Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular20Secondary(
          context,
        ),
      );

  static Widget regular20SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular20SecondaryInternal(
          context,
        ),
      );

  static Widget regular20SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular20Secondary(
          context,
        ),
      ),
    );
  }

  static Widget regular20SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular20SecondaryLight(
          context,
        ),
      );

  static Widget regular20SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular20SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget regular20SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular20SecondaryDark(
          context,
        ),
      );

  static Widget regular20SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular20SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget regular20Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular20Accent(
          context,
        ),
      );

  static Widget regular20AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular20AccentInternal(
          context,
        ),
      );

  static Widget regular20AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular20Accent(
          context,
        ),
      ),
    );
  }

  static Widget regular20AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular20AccentLight(
          context,
        ),
      );

  static Widget regular20AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular20AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget regular20AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular20AccentDark(
          context,
        ),
      );

  static Widget regular20AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular20AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget regular20Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular20Grey(
          context,
        ),
      );

  static Widget regular20GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular20Grey(
          context,
        ),
      ),
    );
  }

  static Widget regular20GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular20GreyLight(
          context,
        ),
      );

  static Widget regular20GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular20GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget regular20GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular20GreyDark(
          context,
        ),
      );

  static Widget regular20GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular20GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget regular20Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular20Info(
          context,
        ),
      );

  static Widget regular20InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular20Info(
          context,
        ),
      ),
    );
  }

  static Widget regular20InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular20InfoLight(
          context,
        ),
      );

  static Widget regular20InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular20InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget regular20InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular20InfoDark(
          context,
        ),
      );

  static Widget regular20InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular20InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget regular20Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular20Success(
          context,
        ),
      );

  static Widget regular20SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular20Success(
          context,
        ),
      ),
    );
  }

  static Widget regular20SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular20SuccessLight(
          context,
        ),
      );

  static Widget regular20SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular20SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget regular20SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular20SuccessDark(
          context,
        ),
      );

  static Widget regular20SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular20SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget regular20Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular20Warning(
          context,
        ),
      );

  static Widget regular20WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular20Warning(
          context,
        ),
      ),
    );
  }

  static Widget regular20WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular20WarningLight(
          context,
        ),
      );

  static Widget regular20WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular20WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget regular20WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular20WarningDark(
          context,
        ),
      );

  static Widget regular20WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular20WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget regular20Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular20Danger(
          context,
        ),
      );

  static Widget regular20DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular20Danger(
          context,
        ),
      ),
    );
  }

  static Widget regular20DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular20DangerLight(
          context,
        ),
      );

  static Widget regular20DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular20DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget regular20DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular20DangerDark(
          context,
        ),
      );

  static Widget regular20DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular20DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget regular22White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular22White(
          context,
        ),
      );

  static Widget regular22WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular22WhiteAlways(
          context,
        ),
      );

  static Widget regular22Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular22Black(
          context,
        ),
      );

  static Widget regular22BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular22BlackAlways(
          context,
        ),
      );

  static Widget regular22Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular22Primary(
          context,
        ),
      );

  static Widget regular22PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular22PrimaryInternal(
          context,
        ),
      );

  static Widget regular22PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular22Primary(
          context,
        ),
      ),
    );
  }

  static Widget regular22PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular22PrimaryLight(
          context,
        ),
      );

  static Widget regular22PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular22PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget regular22PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular22PrimaryDark(
          context,
        ),
      );

  static Widget regular22PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular22PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget regular22Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular22Secondary(
          context,
        ),
      );

  static Widget regular22SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular22SecondaryInternal(
          context,
        ),
      );

  static Widget regular22SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular22Secondary(
          context,
        ),
      ),
    );
  }

  static Widget regular22SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular22SecondaryLight(
          context,
        ),
      );

  static Widget regular22SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular22SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget regular22SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular22SecondaryDark(
          context,
        ),
      );

  static Widget regular22SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular22SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget regular22Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular22Accent(
          context,
        ),
      );

  static Widget regular22AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular22AccentInternal(
          context,
        ),
      );

  static Widget regular22AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular22Accent(
          context,
        ),
      ),
    );
  }

  static Widget regular22AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular22AccentLight(
          context,
        ),
      );

  static Widget regular22AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular22AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget regular22AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular22AccentDark(
          context,
        ),
      );

  static Widget regular22AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular22AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget regular22Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular22Grey(
          context,
        ),
      );

  static Widget regular22GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular22Grey(
          context,
        ),
      ),
    );
  }

  static Widget regular22GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular22GreyLight(
          context,
        ),
      );

  static Widget regular22GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular22GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget regular22GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular22GreyDark(
          context,
        ),
      );

  static Widget regular22GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular22GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget regular22Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular22Info(
          context,
        ),
      );

  static Widget regular22InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular22Info(
          context,
        ),
      ),
    );
  }

  static Widget regular22InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular22InfoLight(
          context,
        ),
      );

  static Widget regular22InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular22InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget regular22InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular22InfoDark(
          context,
        ),
      );

  static Widget regular22InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular22InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget regular22Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular22Success(
          context,
        ),
      );

  static Widget regular22SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular22Success(
          context,
        ),
      ),
    );
  }

  static Widget regular22SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular22SuccessLight(
          context,
        ),
      );

  static Widget regular22SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular22SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget regular22SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular22SuccessDark(
          context,
        ),
      );

  static Widget regular22SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular22SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget regular22Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular22Warning(
          context,
        ),
      );

  static Widget regular22WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular22Warning(
          context,
        ),
      ),
    );
  }

  static Widget regular22WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular22WarningLight(
          context,
        ),
      );

  static Widget regular22WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular22WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget regular22WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular22WarningDark(
          context,
        ),
      );

  static Widget regular22WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular22WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget regular22Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular22Danger(
          context,
        ),
      );

  static Widget regular22DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular22Danger(
          context,
        ),
      ),
    );
  }

  static Widget regular22DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular22DangerLight(
          context,
        ),
      );

  static Widget regular22DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular22DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget regular22DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular22DangerDark(
          context,
        ),
      );

  static Widget regular22DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular22DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget regular24White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular24White(
          context,
        ),
      );

  static Widget regular24WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular24WhiteAlways(
          context,
        ),
      );

  static Widget regular24Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular24Black(
          context,
        ),
      );

  static Widget regular24BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular24BlackAlways(
          context,
        ),
      );

  static Widget regular24Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular24Primary(
          context,
        ),
      );

  static Widget regular24PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular24PrimaryInternal(
          context,
        ),
      );

  static Widget regular24PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular24Primary(
          context,
        ),
      ),
    );
  }

  static Widget regular24PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular24PrimaryLight(
          context,
        ),
      );

  static Widget regular24PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular24PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget regular24PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular24PrimaryDark(
          context,
        ),
      );

  static Widget regular24PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular24PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget regular24Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular24Secondary(
          context,
        ),
      );

  static Widget regular24SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular24SecondaryInternal(
          context,
        ),
      );

  static Widget regular24SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular24Secondary(
          context,
        ),
      ),
    );
  }

  static Widget regular24SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular24SecondaryLight(
          context,
        ),
      );

  static Widget regular24SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular24SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget regular24SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular24SecondaryDark(
          context,
        ),
      );

  static Widget regular24SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular24SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget regular24Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular24Accent(
          context,
        ),
      );

  static Widget regular24AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular24AccentInternal(
          context,
        ),
      );

  static Widget regular24AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular24Accent(
          context,
        ),
      ),
    );
  }

  static Widget regular24AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular24AccentLight(
          context,
        ),
      );

  static Widget regular24AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular24AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget regular24AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular24AccentDark(
          context,
        ),
      );

  static Widget regular24AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular24AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget regular24Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular24Grey(
          context,
        ),
      );

  static Widget regular24GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular24Grey(
          context,
        ),
      ),
    );
  }

  static Widget regular24GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular24GreyLight(
          context,
        ),
      );

  static Widget regular24GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular24GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget regular24GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular24GreyDark(
          context,
        ),
      );

  static Widget regular24GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular24GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget regular24Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular24Info(
          context,
        ),
      );

  static Widget regular24InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular24Info(
          context,
        ),
      ),
    );
  }

  static Widget regular24InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular24InfoLight(
          context,
        ),
      );

  static Widget regular24InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular24InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget regular24InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular24InfoDark(
          context,
        ),
      );

  static Widget regular24InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular24InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget regular24Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular24Success(
          context,
        ),
      );

  static Widget regular24SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular24Success(
          context,
        ),
      ),
    );
  }

  static Widget regular24SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular24SuccessLight(
          context,
        ),
      );

  static Widget regular24SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular24SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget regular24SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular24SuccessDark(
          context,
        ),
      );

  static Widget regular24SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular24SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget regular24Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular24Warning(
          context,
        ),
      );

  static Widget regular24WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular24Warning(
          context,
        ),
      ),
    );
  }

  static Widget regular24WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular24WarningLight(
          context,
        ),
      );

  static Widget regular24WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular24WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget regular24WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular24WarningDark(
          context,
        ),
      );

  static Widget regular24WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular24WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget regular24Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular24Danger(
          context,
        ),
      );

  static Widget regular24DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular24Danger(
          context,
        ),
      ),
    );
  }

  static Widget regular24DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular24DangerLight(
          context,
        ),
      );

  static Widget regular24DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular24DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget regular24DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular24DangerDark(
          context,
        ),
      );

  static Widget regular24DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular24DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget regular26White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular26White(
          context,
        ),
      );

  static Widget regular26WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular26WhiteAlways(
          context,
        ),
      );

  static Widget regular26Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular26Black(
          context,
        ),
      );

  static Widget regular26BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular26BlackAlways(
          context,
        ),
      );

  static Widget regular26Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular26Primary(
          context,
        ),
      );

  static Widget regular26PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular26PrimaryInternal(
          context,
        ),
      );

  static Widget regular26PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular26Primary(
          context,
        ),
      ),
    );
  }

  static Widget regular26PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular26PrimaryLight(
          context,
        ),
      );

  static Widget regular26PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular26PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget regular26PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular26PrimaryDark(
          context,
        ),
      );

  static Widget regular26PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular26PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget regular26Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular26Secondary(
          context,
        ),
      );

  static Widget regular26SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular26SecondaryInternal(
          context,
        ),
      );

  static Widget regular26SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular26Secondary(
          context,
        ),
      ),
    );
  }

  static Widget regular26SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular26SecondaryLight(
          context,
        ),
      );

  static Widget regular26SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular26SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget regular26SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular26SecondaryDark(
          context,
        ),
      );

  static Widget regular26SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular26SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget regular26Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular26Accent(
          context,
        ),
      );

  static Widget regular26AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular26AccentInternal(
          context,
        ),
      );

  static Widget regular26AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular26Accent(
          context,
        ),
      ),
    );
  }

  static Widget regular26AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular26AccentLight(
          context,
        ),
      );

  static Widget regular26AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular26AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget regular26AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular26AccentDark(
          context,
        ),
      );

  static Widget regular26AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular26AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget regular26Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular26Grey(
          context,
        ),
      );

  static Widget regular26GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular26Grey(
          context,
        ),
      ),
    );
  }

  static Widget regular26GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular26GreyLight(
          context,
        ),
      );

  static Widget regular26GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular26GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget regular26GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular26GreyDark(
          context,
        ),
      );

  static Widget regular26GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular26GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget regular26Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular26Info(
          context,
        ),
      );

  static Widget regular26InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular26Info(
          context,
        ),
      ),
    );
  }

  static Widget regular26InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular26InfoLight(
          context,
        ),
      );

  static Widget regular26InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular26InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget regular26InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular26InfoDark(
          context,
        ),
      );

  static Widget regular26InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular26InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget regular26Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular26Success(
          context,
        ),
      );

  static Widget regular26SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular26Success(
          context,
        ),
      ),
    );
  }

  static Widget regular26SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular26SuccessLight(
          context,
        ),
      );

  static Widget regular26SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular26SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget regular26SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular26SuccessDark(
          context,
        ),
      );

  static Widget regular26SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular26SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget regular26Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular26Warning(
          context,
        ),
      );

  static Widget regular26WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular26Warning(
          context,
        ),
      ),
    );
  }

  static Widget regular26WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular26WarningLight(
          context,
        ),
      );

  static Widget regular26WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular26WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget regular26WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular26WarningDark(
          context,
        ),
      );

  static Widget regular26WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular26WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget regular26Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular26Danger(
          context,
        ),
      );

  static Widget regular26DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular26Danger(
          context,
        ),
      ),
    );
  }

  static Widget regular26DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular26DangerLight(
          context,
        ),
      );

  static Widget regular26DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular26DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget regular26DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular26DangerDark(
          context,
        ),
      );

  static Widget regular26DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular26DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget regular28White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular28White(
          context,
        ),
      );

  static Widget regular28WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular28WhiteAlways(
          context,
        ),
      );

  static Widget regular28Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular28Black(
          context,
        ),
      );

  static Widget regular28BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular28BlackAlways(
          context,
        ),
      );

  static Widget regular28Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular28Primary(
          context,
        ),
      );

  static Widget regular28PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular28PrimaryInternal(
          context,
        ),
      );

  static Widget regular28PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular28Primary(
          context,
        ),
      ),
    );
  }

  static Widget regular28PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular28PrimaryLight(
          context,
        ),
      );

  static Widget regular28PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular28PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget regular28PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular28PrimaryDark(
          context,
        ),
      );

  static Widget regular28PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular28PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget regular28Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular28Secondary(
          context,
        ),
      );

  static Widget regular28SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular28SecondaryInternal(
          context,
        ),
      );

  static Widget regular28SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular28Secondary(
          context,
        ),
      ),
    );
  }

  static Widget regular28SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular28SecondaryLight(
          context,
        ),
      );

  static Widget regular28SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular28SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget regular28SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular28SecondaryDark(
          context,
        ),
      );

  static Widget regular28SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular28SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget regular28Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular28Accent(
          context,
        ),
      );

  static Widget regular28AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular28AccentInternal(
          context,
        ),
      );

  static Widget regular28AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular28Accent(
          context,
        ),
      ),
    );
  }

  static Widget regular28AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular28AccentLight(
          context,
        ),
      );

  static Widget regular28AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular28AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget regular28AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular28AccentDark(
          context,
        ),
      );

  static Widget regular28AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular28AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget regular28Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular28Grey(
          context,
        ),
      );

  static Widget regular28GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular28Grey(
          context,
        ),
      ),
    );
  }

  static Widget regular28GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular28GreyLight(
          context,
        ),
      );

  static Widget regular28GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular28GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget regular28GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular28GreyDark(
          context,
        ),
      );

  static Widget regular28GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular28GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget regular28Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular28Info(
          context,
        ),
      );

  static Widget regular28InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular28Info(
          context,
        ),
      ),
    );
  }

  static Widget regular28InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular28InfoLight(
          context,
        ),
      );

  static Widget regular28InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular28InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget regular28InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular28InfoDark(
          context,
        ),
      );

  static Widget regular28InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular28InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget regular28Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular28Success(
          context,
        ),
      );

  static Widget regular28SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular28Success(
          context,
        ),
      ),
    );
  }

  static Widget regular28SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular28SuccessLight(
          context,
        ),
      );

  static Widget regular28SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular28SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget regular28SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular28SuccessDark(
          context,
        ),
      );

  static Widget regular28SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular28SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget regular28Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular28Warning(
          context,
        ),
      );

  static Widget regular28WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular28Warning(
          context,
        ),
      ),
    );
  }

  static Widget regular28WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular28WarningLight(
          context,
        ),
      );

  static Widget regular28WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular28WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget regular28WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular28WarningDark(
          context,
        ),
      );

  static Widget regular28WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular28WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget regular28Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular28Danger(
          context,
        ),
      );

  static Widget regular28DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular28Danger(
          context,
        ),
      ),
    );
  }

  static Widget regular28DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular28DangerLight(
          context,
        ),
      );

  static Widget regular28DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular28DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget regular28DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular28DangerDark(
          context,
        ),
      );

  static Widget regular28DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular28DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget regular32White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular32White(
          context,
        ),
      );

  static Widget regular32WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular32WhiteAlways(
          context,
        ),
      );

  static Widget regular32Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular32Black(
          context,
        ),
      );

  static Widget regular32BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular32BlackAlways(
          context,
        ),
      );

  static Widget regular32Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular32Primary(
          context,
        ),
      );

  static Widget regular32PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular32PrimaryInternal(
          context,
        ),
      );

  static Widget regular32PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular32Primary(
          context,
        ),
      ),
    );
  }

  static Widget regular32PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular32PrimaryLight(
          context,
        ),
      );

  static Widget regular32PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular32PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget regular32PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular32PrimaryDark(
          context,
        ),
      );

  static Widget regular32PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular32PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget regular32Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular32Secondary(
          context,
        ),
      );

  static Widget regular32SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular32SecondaryInternal(
          context,
        ),
      );

  static Widget regular32SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular32Secondary(
          context,
        ),
      ),
    );
  }

  static Widget regular32SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular32SecondaryLight(
          context,
        ),
      );

  static Widget regular32SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular32SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget regular32SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular32SecondaryDark(
          context,
        ),
      );

  static Widget regular32SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular32SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget regular32Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular32Accent(
          context,
        ),
      );

  static Widget regular32AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular32AccentInternal(
          context,
        ),
      );

  static Widget regular32AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular32Accent(
          context,
        ),
      ),
    );
  }

  static Widget regular32AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular32AccentLight(
          context,
        ),
      );

  static Widget regular32AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular32AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget regular32AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular32AccentDark(
          context,
        ),
      );

  static Widget regular32AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular32AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget regular32Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular32Grey(
          context,
        ),
      );

  static Widget regular32GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular32Grey(
          context,
        ),
      ),
    );
  }

  static Widget regular32GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular32GreyLight(
          context,
        ),
      );

  static Widget regular32GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular32GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget regular32GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular32GreyDark(
          context,
        ),
      );

  static Widget regular32GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular32GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget regular32Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular32Info(
          context,
        ),
      );

  static Widget regular32InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular32Info(
          context,
        ),
      ),
    );
  }

  static Widget regular32InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular32InfoLight(
          context,
        ),
      );

  static Widget regular32InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular32InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget regular32InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular32InfoDark(
          context,
        ),
      );

  static Widget regular32InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular32InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget regular32Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular32Success(
          context,
        ),
      );

  static Widget regular32SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular32Success(
          context,
        ),
      ),
    );
  }

  static Widget regular32SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular32SuccessLight(
          context,
        ),
      );

  static Widget regular32SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular32SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget regular32SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular32SuccessDark(
          context,
        ),
      );

  static Widget regular32SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular32SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget regular32Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular32Warning(
          context,
        ),
      );

  static Widget regular32WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular32Warning(
          context,
        ),
      ),
    );
  }

  static Widget regular32WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular32WarningLight(
          context,
        ),
      );

  static Widget regular32WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular32WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget regular32WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular32WarningDark(
          context,
        ),
      );

  static Widget regular32WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular32WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget regular32Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular32Danger(
          context,
        ),
      );

  static Widget regular32DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular32Danger(
          context,
        ),
      ),
    );
  }

  static Widget regular32DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular32DangerLight(
          context,
        ),
      );

  static Widget regular32DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular32DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget regular32DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular32DangerDark(
          context,
        ),
      );

  static Widget regular32DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.regular32DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget medium10White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium10White(
          context,
        ),
      );

  static Widget medium10WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium10WhiteAlways(
          context,
        ),
      );

  static Widget medium10Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium10Black(
          context,
        ),
      );

  static Widget medium10BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium10BlackAlways(
          context,
        ),
      );

  static Widget medium10Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium10Primary(
          context,
        ),
      );

  static Widget medium10PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium10PrimaryInternal(
          context,
        ),
      );

  static Widget medium10PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium10Primary(
          context,
        ),
      ),
    );
  }

  static Widget medium10PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium10PrimaryLight(
          context,
        ),
      );

  static Widget medium10PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium10PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget medium10PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium10PrimaryDark(
          context,
        ),
      );

  static Widget medium10PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium10PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget medium10Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium10Secondary(
          context,
        ),
      );

  static Widget medium10SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium10SecondaryInternal(
          context,
        ),
      );

  static Widget medium10SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium10Secondary(
          context,
        ),
      ),
    );
  }

  static Widget medium10SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium10SecondaryLight(
          context,
        ),
      );

  static Widget medium10SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium10SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget medium10SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium10SecondaryDark(
          context,
        ),
      );

  static Widget medium10SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium10SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget medium10Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium10Accent(
          context,
        ),
      );

  static Widget medium10AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium10AccentInternal(
          context,
        ),
      );

  static Widget medium10AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium10Accent(
          context,
        ),
      ),
    );
  }

  static Widget medium10AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium10AccentLight(
          context,
        ),
      );

  static Widget medium10AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium10AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget medium10AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium10AccentDark(
          context,
        ),
      );

  static Widget medium10AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium10AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget medium10Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium10Grey(
          context,
        ),
      );

  static Widget medium10GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium10Grey(
          context,
        ),
      ),
    );
  }

  static Widget medium10GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium10GreyLight(
          context,
        ),
      );

  static Widget medium10GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium10GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget medium10GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium10GreyDark(
          context,
        ),
      );

  static Widget medium10GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium10GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget medium10Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium10Info(
          context,
        ),
      );

  static Widget medium10InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium10Info(
          context,
        ),
      ),
    );
  }

  static Widget medium10InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium10InfoLight(
          context,
        ),
      );

  static Widget medium10InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium10InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget medium10InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium10InfoDark(
          context,
        ),
      );

  static Widget medium10InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium10InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget medium10Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium10Success(
          context,
        ),
      );

  static Widget medium10SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium10Success(
          context,
        ),
      ),
    );
  }

  static Widget medium10SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium10SuccessLight(
          context,
        ),
      );

  static Widget medium10SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium10SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget medium10SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium10SuccessDark(
          context,
        ),
      );

  static Widget medium10SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium10SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget medium10Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium10Warning(
          context,
        ),
      );

  static Widget medium10WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium10Warning(
          context,
        ),
      ),
    );
  }

  static Widget medium10WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium10WarningLight(
          context,
        ),
      );

  static Widget medium10WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium10WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget medium10WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium10WarningDark(
          context,
        ),
      );

  static Widget medium10WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium10WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget medium10Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium10Danger(
          context,
        ),
      );

  static Widget medium10DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium10Danger(
          context,
        ),
      ),
    );
  }

  static Widget medium10DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium10DangerLight(
          context,
        ),
      );

  static Widget medium10DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium10DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget medium10DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium10DangerDark(
          context,
        ),
      );

  static Widget medium10DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium10DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget medium11White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium11White(
          context,
        ),
      );

  static Widget medium11WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium11WhiteAlways(
          context,
        ),
      );

  static Widget medium11Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium11Black(
          context,
        ),
      );

  static Widget medium11BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium11BlackAlways(
          context,
        ),
      );

  static Widget medium11Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium11Primary(
          context,
        ),
      );

  static Widget medium11PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium11PrimaryInternal(
          context,
        ),
      );

  static Widget medium11PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium11Primary(
          context,
        ),
      ),
    );
  }

  static Widget medium11PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium11PrimaryLight(
          context,
        ),
      );

  static Widget medium11PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium11PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget medium11PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium11PrimaryDark(
          context,
        ),
      );

  static Widget medium11PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium11PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget medium11Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium11Secondary(
          context,
        ),
      );

  static Widget medium11SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium11SecondaryInternal(
          context,
        ),
      );

  static Widget medium11SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium11Secondary(
          context,
        ),
      ),
    );
  }

  static Widget medium11SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium11SecondaryLight(
          context,
        ),
      );

  static Widget medium11SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium11SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget medium11SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium11SecondaryDark(
          context,
        ),
      );

  static Widget medium11SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium11SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget medium11Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium11Accent(
          context,
        ),
      );

  static Widget medium11AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium11AccentInternal(
          context,
        ),
      );

  static Widget medium11AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium11Accent(
          context,
        ),
      ),
    );
  }

  static Widget medium11AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium11AccentLight(
          context,
        ),
      );

  static Widget medium11AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium11AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget medium11AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium11AccentDark(
          context,
        ),
      );

  static Widget medium11AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium11AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget medium11Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium11Grey(
          context,
        ),
      );

  static Widget medium11GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium11Grey(
          context,
        ),
      ),
    );
  }

  static Widget medium11GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium11GreyLight(
          context,
        ),
      );

  static Widget medium11GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium11GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget medium11GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium11GreyDark(
          context,
        ),
      );

  static Widget medium11GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium11GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget medium11Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium11Info(
          context,
        ),
      );

  static Widget medium11InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium11Info(
          context,
        ),
      ),
    );
  }

  static Widget medium11InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium11InfoLight(
          context,
        ),
      );

  static Widget medium11InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium11InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget medium11InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium11InfoDark(
          context,
        ),
      );

  static Widget medium11InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium11InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget medium11Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium11Success(
          context,
        ),
      );

  static Widget medium11SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium11Success(
          context,
        ),
      ),
    );
  }

  static Widget medium11SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium11SuccessLight(
          context,
        ),
      );

  static Widget medium11SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium11SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget medium11SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium11SuccessDark(
          context,
        ),
      );

  static Widget medium11SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium11SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget medium11Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium11Warning(
          context,
        ),
      );

  static Widget medium11WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium11Warning(
          context,
        ),
      ),
    );
  }

  static Widget medium11WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium11WarningLight(
          context,
        ),
      );

  static Widget medium11WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium11WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget medium11WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium11WarningDark(
          context,
        ),
      );

  static Widget medium11WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium11WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget medium11Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium11Danger(
          context,
        ),
      );

  static Widget medium11DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium11Danger(
          context,
        ),
      ),
    );
  }

  static Widget medium11DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium11DangerLight(
          context,
        ),
      );

  static Widget medium11DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium11DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget medium11DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium11DangerDark(
          context,
        ),
      );

  static Widget medium11DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium11DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget medium12White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium12White(
          context,
        ),
      );

  static Widget medium12WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium12WhiteAlways(
          context,
        ),
      );

  static Widget medium12Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium12Black(
          context,
        ),
      );

  static Widget medium12BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium12BlackAlways(
          context,
        ),
      );

  static Widget medium12Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium12Primary(
          context,
        ),
      );

  static Widget medium12PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium12PrimaryInternal(
          context,
        ),
      );

  static Widget medium12PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium12Primary(
          context,
        ),
      ),
    );
  }

  static Widget medium12PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium12PrimaryLight(
          context,
        ),
      );

  static Widget medium12PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium12PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget medium12PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium12PrimaryDark(
          context,
        ),
      );

  static Widget medium12PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium12PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget medium12Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium12Secondary(
          context,
        ),
      );

  static Widget medium12SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium12SecondaryInternal(
          context,
        ),
      );

  static Widget medium12SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium12Secondary(
          context,
        ),
      ),
    );
  }

  static Widget medium12SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium12SecondaryLight(
          context,
        ),
      );

  static Widget medium12SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium12SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget medium12SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium12SecondaryDark(
          context,
        ),
      );

  static Widget medium12SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium12SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget medium12Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium12Accent(
          context,
        ),
      );

  static Widget medium12AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium12AccentInternal(
          context,
        ),
      );

  static Widget medium12AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium12Accent(
          context,
        ),
      ),
    );
  }

  static Widget medium12AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium12AccentLight(
          context,
        ),
      );

  static Widget medium12AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium12AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget medium12AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium12AccentDark(
          context,
        ),
      );

  static Widget medium12AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium12AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget medium12Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium12Grey(
          context,
        ),
      );

  static Widget medium12GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium12Grey(
          context,
        ),
      ),
    );
  }

  static Widget medium12GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium12GreyLight(
          context,
        ),
      );

  static Widget medium12GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium12GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget medium12GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium12GreyDark(
          context,
        ),
      );

  static Widget medium12GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium12GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget medium12Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium12Info(
          context,
        ),
      );

  static Widget medium12InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium12Info(
          context,
        ),
      ),
    );
  }

  static Widget medium12InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium12InfoLight(
          context,
        ),
      );

  static Widget medium12InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium12InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget medium12InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium12InfoDark(
          context,
        ),
      );

  static Widget medium12InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium12InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget medium12Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium12Success(
          context,
        ),
      );

  static Widget medium12SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium12Success(
          context,
        ),
      ),
    );
  }

  static Widget medium12SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium12SuccessLight(
          context,
        ),
      );

  static Widget medium12SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium12SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget medium12SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium12SuccessDark(
          context,
        ),
      );

  static Widget medium12SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium12SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget medium12Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium12Warning(
          context,
        ),
      );

  static Widget medium12WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium12Warning(
          context,
        ),
      ),
    );
  }

  static Widget medium12WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium12WarningLight(
          context,
        ),
      );

  static Widget medium12WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium12WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget medium12WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium12WarningDark(
          context,
        ),
      );

  static Widget medium12WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium12WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget medium12Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium12Danger(
          context,
        ),
      );

  static Widget medium12DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium12Danger(
          context,
        ),
      ),
    );
  }

  static Widget medium12DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium12DangerLight(
          context,
        ),
      );

  static Widget medium12DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium12DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget medium12DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium12DangerDark(
          context,
        ),
      );

  static Widget medium12DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium12DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget medium13White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium13White(
          context,
        ),
      );

  static Widget medium13WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium13WhiteAlways(
          context,
        ),
      );

  static Widget medium13Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium13Black(
          context,
        ),
      );

  static Widget medium13BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium13BlackAlways(
          context,
        ),
      );

  static Widget medium13Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium13Primary(
          context,
        ),
      );

  static Widget medium13PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium13PrimaryInternal(
          context,
        ),
      );

  static Widget medium13PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium13Primary(
          context,
        ),
      ),
    );
  }

  static Widget medium13PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium13PrimaryLight(
          context,
        ),
      );

  static Widget medium13PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium13PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget medium13PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium13PrimaryDark(
          context,
        ),
      );

  static Widget medium13PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium13PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget medium13Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium13Secondary(
          context,
        ),
      );

  static Widget medium13SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium13SecondaryInternal(
          context,
        ),
      );

  static Widget medium13SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium13Secondary(
          context,
        ),
      ),
    );
  }

  static Widget medium13SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium13SecondaryLight(
          context,
        ),
      );

  static Widget medium13SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium13SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget medium13SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium13SecondaryDark(
          context,
        ),
      );

  static Widget medium13SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium13SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget medium13Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium13Accent(
          context,
        ),
      );

  static Widget medium13AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium13AccentInternal(
          context,
        ),
      );

  static Widget medium13AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium13Accent(
          context,
        ),
      ),
    );
  }

  static Widget medium13AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium13AccentLight(
          context,
        ),
      );

  static Widget medium13AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium13AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget medium13AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium13AccentDark(
          context,
        ),
      );

  static Widget medium13AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium13AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget medium13Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium13Grey(
          context,
        ),
      );

  static Widget medium13GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium13Grey(
          context,
        ),
      ),
    );
  }

  static Widget medium13GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium13GreyLight(
          context,
        ),
      );

  static Widget medium13GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium13GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget medium13GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium13GreyDark(
          context,
        ),
      );

  static Widget medium13GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium13GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget medium13Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium13Info(
          context,
        ),
      );

  static Widget medium13InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium13Info(
          context,
        ),
      ),
    );
  }

  static Widget medium13InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium13InfoLight(
          context,
        ),
      );

  static Widget medium13InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium13InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget medium13InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium13InfoDark(
          context,
        ),
      );

  static Widget medium13InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium13InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget medium13Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium13Success(
          context,
        ),
      );

  static Widget medium13SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium13Success(
          context,
        ),
      ),
    );
  }

  static Widget medium13SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium13SuccessLight(
          context,
        ),
      );

  static Widget medium13SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium13SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget medium13SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium13SuccessDark(
          context,
        ),
      );

  static Widget medium13SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium13SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget medium13Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium13Warning(
          context,
        ),
      );

  static Widget medium13WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium13Warning(
          context,
        ),
      ),
    );
  }

  static Widget medium13WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium13WarningLight(
          context,
        ),
      );

  static Widget medium13WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium13WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget medium13WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium13WarningDark(
          context,
        ),
      );

  static Widget medium13WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium13WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget medium13Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium13Danger(
          context,
        ),
      );

  static Widget medium13DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium13Danger(
          context,
        ),
      ),
    );
  }

  static Widget medium13DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium13DangerLight(
          context,
        ),
      );

  static Widget medium13DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium13DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget medium13DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium13DangerDark(
          context,
        ),
      );

  static Widget medium13DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium13DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget medium14White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium14White(
          context,
        ),
      );

  static Widget medium14WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium14WhiteAlways(
          context,
        ),
      );

  static Widget medium14Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium14Black(
          context,
        ),
      );

  static Widget medium14BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium14BlackAlways(
          context,
        ),
      );

  static Widget medium14Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium14Primary(
          context,
        ),
      );

  static Widget medium14PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium14PrimaryInternal(
          context,
        ),
      );

  static Widget medium14PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium14Primary(
          context,
        ),
      ),
    );
  }

  static Widget medium14PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium14PrimaryLight(
          context,
        ),
      );

  static Widget medium14PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium14PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget medium14PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium14PrimaryDark(
          context,
        ),
      );

  static Widget medium14PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium14PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget medium14Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium14Secondary(
          context,
        ),
      );

  static Widget medium14SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium14SecondaryInternal(
          context,
        ),
      );

  static Widget medium14SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium14Secondary(
          context,
        ),
      ),
    );
  }

  static Widget medium14SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium14SecondaryLight(
          context,
        ),
      );

  static Widget medium14SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium14SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget medium14SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium14SecondaryDark(
          context,
        ),
      );

  static Widget medium14SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium14SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget medium14Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium14Accent(
          context,
        ),
      );

  static Widget medium14AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium14AccentInternal(
          context,
        ),
      );

  static Widget medium14AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium14Accent(
          context,
        ),
      ),
    );
  }

  static Widget medium14AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium14AccentLight(
          context,
        ),
      );

  static Widget medium14AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium14AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget medium14AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium14AccentDark(
          context,
        ),
      );

  static Widget medium14AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium14AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget medium14Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium14Grey(
          context,
        ),
      );

  static Widget medium14GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium14Grey(
          context,
        ),
      ),
    );
  }

  static Widget medium14GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium14GreyLight(
          context,
        ),
      );

  static Widget medium14GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium14GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget medium14GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium14GreyDark(
          context,
        ),
      );

  static Widget medium14GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium14GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget medium14Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium14Info(
          context,
        ),
      );

  static Widget medium14InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium14Info(
          context,
        ),
      ),
    );
  }

  static Widget medium14InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium14InfoLight(
          context,
        ),
      );

  static Widget medium14InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium14InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget medium14InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium14InfoDark(
          context,
        ),
      );

  static Widget medium14InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium14InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget medium14Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium14Success(
          context,
        ),
      );

  static Widget medium14SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium14Success(
          context,
        ),
      ),
    );
  }

  static Widget medium14SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium14SuccessLight(
          context,
        ),
      );

  static Widget medium14SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium14SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget medium14SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium14SuccessDark(
          context,
        ),
      );

  static Widget medium14SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium14SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget medium14Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium14Warning(
          context,
        ),
      );

  static Widget medium14WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium14Warning(
          context,
        ),
      ),
    );
  }

  static Widget medium14WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium14WarningLight(
          context,
        ),
      );

  static Widget medium14WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium14WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget medium14WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium14WarningDark(
          context,
        ),
      );

  static Widget medium14WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium14WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget medium14Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium14Danger(
          context,
        ),
      );

  static Widget medium14DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium14Danger(
          context,
        ),
      ),
    );
  }

  static Widget medium14DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium14DangerLight(
          context,
        ),
      );

  static Widget medium14DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium14DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget medium14DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium14DangerDark(
          context,
        ),
      );

  static Widget medium14DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium14DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget medium15White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium15White(
          context,
        ),
      );

  static Widget medium15WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium15WhiteAlways(
          context,
        ),
      );

  static Widget medium15Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium15Black(
          context,
        ),
      );

  static Widget medium15BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium15BlackAlways(
          context,
        ),
      );

  static Widget medium15Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium15Primary(
          context,
        ),
      );

  static Widget medium15PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium15PrimaryInternal(
          context,
        ),
      );

  static Widget medium15PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium15Primary(
          context,
        ),
      ),
    );
  }

  static Widget medium15PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium15PrimaryLight(
          context,
        ),
      );

  static Widget medium15PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium15PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget medium15PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium15PrimaryDark(
          context,
        ),
      );

  static Widget medium15PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium15PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget medium15Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium15Secondary(
          context,
        ),
      );

  static Widget medium15SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium15SecondaryInternal(
          context,
        ),
      );

  static Widget medium15SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium15Secondary(
          context,
        ),
      ),
    );
  }

  static Widget medium15SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium15SecondaryLight(
          context,
        ),
      );

  static Widget medium15SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium15SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget medium15SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium15SecondaryDark(
          context,
        ),
      );

  static Widget medium15SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium15SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget medium15Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium15Accent(
          context,
        ),
      );

  static Widget medium15AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium15AccentInternal(
          context,
        ),
      );

  static Widget medium15AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium15Accent(
          context,
        ),
      ),
    );
  }

  static Widget medium15AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium15AccentLight(
          context,
        ),
      );

  static Widget medium15AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium15AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget medium15AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium15AccentDark(
          context,
        ),
      );

  static Widget medium15AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium15AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget medium15Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium15Grey(
          context,
        ),
      );

  static Widget medium15GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium15Grey(
          context,
        ),
      ),
    );
  }

  static Widget medium15GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium15GreyLight(
          context,
        ),
      );

  static Widget medium15GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium15GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget medium15GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium15GreyDark(
          context,
        ),
      );

  static Widget medium15GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium15GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget medium15Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium15Info(
          context,
        ),
      );

  static Widget medium15InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium15Info(
          context,
        ),
      ),
    );
  }

  static Widget medium15InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium15InfoLight(
          context,
        ),
      );

  static Widget medium15InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium15InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget medium15InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium15InfoDark(
          context,
        ),
      );

  static Widget medium15InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium15InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget medium15Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium15Success(
          context,
        ),
      );

  static Widget medium15SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium15Success(
          context,
        ),
      ),
    );
  }

  static Widget medium15SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium15SuccessLight(
          context,
        ),
      );

  static Widget medium15SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium15SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget medium15SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium15SuccessDark(
          context,
        ),
      );

  static Widget medium15SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium15SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget medium15Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium15Warning(
          context,
        ),
      );

  static Widget medium15WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium15Warning(
          context,
        ),
      ),
    );
  }

  static Widget medium15WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium15WarningLight(
          context,
        ),
      );

  static Widget medium15WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium15WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget medium15WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium15WarningDark(
          context,
        ),
      );

  static Widget medium15WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium15WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget medium15Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium15Danger(
          context,
        ),
      );

  static Widget medium15DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium15Danger(
          context,
        ),
      ),
    );
  }

  static Widget medium15DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium15DangerLight(
          context,
        ),
      );

  static Widget medium15DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium15DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget medium15DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium15DangerDark(
          context,
        ),
      );

  static Widget medium15DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium15DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget medium16White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium16White(
          context,
        ),
      );

  static Widget medium16WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium16WhiteAlways(
          context,
        ),
      );

  static Widget medium16Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium16Black(
          context,
        ),
      );

  static Widget medium16BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium16BlackAlways(
          context,
        ),
      );

  static Widget medium16Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium16Primary(
          context,
        ),
      );

  static Widget medium16PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium16PrimaryInternal(
          context,
        ),
      );

  static Widget medium16PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium16Primary(
          context,
        ),
      ),
    );
  }

  static Widget medium16PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium16PrimaryLight(
          context,
        ),
      );

  static Widget medium16PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium16PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget medium16PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium16PrimaryDark(
          context,
        ),
      );

  static Widget medium16PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium16PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget medium16Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium16Secondary(
          context,
        ),
      );

  static Widget medium16SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium16SecondaryInternal(
          context,
        ),
      );

  static Widget medium16SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium16Secondary(
          context,
        ),
      ),
    );
  }

  static Widget medium16SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium16SecondaryLight(
          context,
        ),
      );

  static Widget medium16SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium16SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget medium16SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium16SecondaryDark(
          context,
        ),
      );

  static Widget medium16SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium16SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget medium16Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium16Accent(
          context,
        ),
      );

  static Widget medium16AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium16AccentInternal(
          context,
        ),
      );

  static Widget medium16AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium16Accent(
          context,
        ),
      ),
    );
  }

  static Widget medium16AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium16AccentLight(
          context,
        ),
      );

  static Widget medium16AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium16AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget medium16AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium16AccentDark(
          context,
        ),
      );

  static Widget medium16AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium16AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget medium16Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium16Grey(
          context,
        ),
      );

  static Widget medium16GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium16Grey(
          context,
        ),
      ),
    );
  }

  static Widget medium16GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium16GreyLight(
          context,
        ),
      );

  static Widget medium16GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium16GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget medium16GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium16GreyDark(
          context,
        ),
      );

  static Widget medium16GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium16GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget medium16Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium16Info(
          context,
        ),
      );

  static Widget medium16InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium16Info(
          context,
        ),
      ),
    );
  }

  static Widget medium16InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium16InfoLight(
          context,
        ),
      );

  static Widget medium16InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium16InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget medium16InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium16InfoDark(
          context,
        ),
      );

  static Widget medium16InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium16InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget medium16Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium16Success(
          context,
        ),
      );

  static Widget medium16SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium16Success(
          context,
        ),
      ),
    );
  }

  static Widget medium16SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium16SuccessLight(
          context,
        ),
      );

  static Widget medium16SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium16SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget medium16SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium16SuccessDark(
          context,
        ),
      );

  static Widget medium16SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium16SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget medium16Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium16Warning(
          context,
        ),
      );

  static Widget medium16WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium16Warning(
          context,
        ),
      ),
    );
  }

  static Widget medium16WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium16WarningLight(
          context,
        ),
      );

  static Widget medium16WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium16WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget medium16WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium16WarningDark(
          context,
        ),
      );

  static Widget medium16WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium16WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget medium16Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium16Danger(
          context,
        ),
      );

  static Widget medium16DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium16Danger(
          context,
        ),
      ),
    );
  }

  static Widget medium16DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium16DangerLight(
          context,
        ),
      );

  static Widget medium16DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium16DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget medium16DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium16DangerDark(
          context,
        ),
      );

  static Widget medium16DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium16DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget medium17White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium17White(
          context,
        ),
      );

  static Widget medium17WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium17WhiteAlways(
          context,
        ),
      );

  static Widget medium17Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium17Black(
          context,
        ),
      );

  static Widget medium17BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium17BlackAlways(
          context,
        ),
      );

  static Widget medium17Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium17Primary(
          context,
        ),
      );

  static Widget medium17PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium17PrimaryInternal(
          context,
        ),
      );

  static Widget medium17PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium17Primary(
          context,
        ),
      ),
    );
  }

  static Widget medium17PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium17PrimaryLight(
          context,
        ),
      );

  static Widget medium17PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium17PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget medium17PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium17PrimaryDark(
          context,
        ),
      );

  static Widget medium17PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium17PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget medium17Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium17Secondary(
          context,
        ),
      );

  static Widget medium17SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium17SecondaryInternal(
          context,
        ),
      );

  static Widget medium17SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium17Secondary(
          context,
        ),
      ),
    );
  }

  static Widget medium17SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium17SecondaryLight(
          context,
        ),
      );

  static Widget medium17SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium17SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget medium17SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium17SecondaryDark(
          context,
        ),
      );

  static Widget medium17SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium17SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget medium17Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium17Accent(
          context,
        ),
      );

  static Widget medium17AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium17AccentInternal(
          context,
        ),
      );

  static Widget medium17AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium17Accent(
          context,
        ),
      ),
    );
  }

  static Widget medium17AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium17AccentLight(
          context,
        ),
      );

  static Widget medium17AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium17AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget medium17AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium17AccentDark(
          context,
        ),
      );

  static Widget medium17AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium17AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget medium17Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium17Grey(
          context,
        ),
      );

  static Widget medium17GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium17Grey(
          context,
        ),
      ),
    );
  }

  static Widget medium17GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium17GreyLight(
          context,
        ),
      );

  static Widget medium17GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium17GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget medium17GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium17GreyDark(
          context,
        ),
      );

  static Widget medium17GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium17GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget medium17Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium17Info(
          context,
        ),
      );

  static Widget medium17InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium17Info(
          context,
        ),
      ),
    );
  }

  static Widget medium17InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium17InfoLight(
          context,
        ),
      );

  static Widget medium17InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium17InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget medium17InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium17InfoDark(
          context,
        ),
      );

  static Widget medium17InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium17InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget medium17Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium17Success(
          context,
        ),
      );

  static Widget medium17SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium17Success(
          context,
        ),
      ),
    );
  }

  static Widget medium17SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium17SuccessLight(
          context,
        ),
      );

  static Widget medium17SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium17SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget medium17SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium17SuccessDark(
          context,
        ),
      );

  static Widget medium17SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium17SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget medium17Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium17Warning(
          context,
        ),
      );

  static Widget medium17WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium17Warning(
          context,
        ),
      ),
    );
  }

  static Widget medium17WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium17WarningLight(
          context,
        ),
      );

  static Widget medium17WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium17WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget medium17WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium17WarningDark(
          context,
        ),
      );

  static Widget medium17WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium17WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget medium17Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium17Danger(
          context,
        ),
      );

  static Widget medium17DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium17Danger(
          context,
        ),
      ),
    );
  }

  static Widget medium17DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium17DangerLight(
          context,
        ),
      );

  static Widget medium17DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium17DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget medium17DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium17DangerDark(
          context,
        ),
      );

  static Widget medium17DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium17DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget medium18White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium18White(
          context,
        ),
      );

  static Widget medium18WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium18WhiteAlways(
          context,
        ),
      );

  static Widget medium18Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium18Black(
          context,
        ),
      );

  static Widget medium18BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium18BlackAlways(
          context,
        ),
      );

  static Widget medium18Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium18Primary(
          context,
        ),
      );

  static Widget medium18PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium18PrimaryInternal(
          context,
        ),
      );

  static Widget medium18PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium18Primary(
          context,
        ),
      ),
    );
  }

  static Widget medium18PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium18PrimaryLight(
          context,
        ),
      );

  static Widget medium18PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium18PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget medium18PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium18PrimaryDark(
          context,
        ),
      );

  static Widget medium18PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium18PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget medium18Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium18Secondary(
          context,
        ),
      );

  static Widget medium18SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium18SecondaryInternal(
          context,
        ),
      );

  static Widget medium18SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium18Secondary(
          context,
        ),
      ),
    );
  }

  static Widget medium18SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium18SecondaryLight(
          context,
        ),
      );

  static Widget medium18SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium18SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget medium18SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium18SecondaryDark(
          context,
        ),
      );

  static Widget medium18SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium18SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget medium18Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium18Accent(
          context,
        ),
      );

  static Widget medium18AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium18AccentInternal(
          context,
        ),
      );

  static Widget medium18AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium18Accent(
          context,
        ),
      ),
    );
  }

  static Widget medium18AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium18AccentLight(
          context,
        ),
      );

  static Widget medium18AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium18AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget medium18AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium18AccentDark(
          context,
        ),
      );

  static Widget medium18AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium18AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget medium18Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium18Grey(
          context,
        ),
      );

  static Widget medium18GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium18Grey(
          context,
        ),
      ),
    );
  }

  static Widget medium18GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium18GreyLight(
          context,
        ),
      );

  static Widget medium18GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium18GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget medium18GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium18GreyDark(
          context,
        ),
      );

  static Widget medium18GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium18GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget medium18Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium18Info(
          context,
        ),
      );

  static Widget medium18InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium18Info(
          context,
        ),
      ),
    );
  }

  static Widget medium18InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium18InfoLight(
          context,
        ),
      );

  static Widget medium18InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium18InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget medium18InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium18InfoDark(
          context,
        ),
      );

  static Widget medium18InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium18InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget medium18Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium18Success(
          context,
        ),
      );

  static Widget medium18SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium18Success(
          context,
        ),
      ),
    );
  }

  static Widget medium18SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium18SuccessLight(
          context,
        ),
      );

  static Widget medium18SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium18SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget medium18SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium18SuccessDark(
          context,
        ),
      );

  static Widget medium18SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium18SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget medium18Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium18Warning(
          context,
        ),
      );

  static Widget medium18WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium18Warning(
          context,
        ),
      ),
    );
  }

  static Widget medium18WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium18WarningLight(
          context,
        ),
      );

  static Widget medium18WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium18WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget medium18WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium18WarningDark(
          context,
        ),
      );

  static Widget medium18WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium18WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget medium18Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium18Danger(
          context,
        ),
      );

  static Widget medium18DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium18Danger(
          context,
        ),
      ),
    );
  }

  static Widget medium18DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium18DangerLight(
          context,
        ),
      );

  static Widget medium18DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium18DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget medium18DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium18DangerDark(
          context,
        ),
      );

  static Widget medium18DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium18DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget medium19White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium19White(
          context,
        ),
      );

  static Widget medium19WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium19WhiteAlways(
          context,
        ),
      );

  static Widget medium19Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium19Black(
          context,
        ),
      );

  static Widget medium19BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium19BlackAlways(
          context,
        ),
      );

  static Widget medium19Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium19Primary(
          context,
        ),
      );

  static Widget medium19PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium19PrimaryInternal(
          context,
        ),
      );

  static Widget medium19PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium19Primary(
          context,
        ),
      ),
    );
  }

  static Widget medium19PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium19PrimaryLight(
          context,
        ),
      );

  static Widget medium19PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium19PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget medium19PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium19PrimaryDark(
          context,
        ),
      );

  static Widget medium19PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium19PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget medium19Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium19Secondary(
          context,
        ),
      );

  static Widget medium19SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium19SecondaryInternal(
          context,
        ),
      );

  static Widget medium19SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium19Secondary(
          context,
        ),
      ),
    );
  }

  static Widget medium19SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium19SecondaryLight(
          context,
        ),
      );

  static Widget medium19SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium19SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget medium19SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium19SecondaryDark(
          context,
        ),
      );

  static Widget medium19SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium19SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget medium19Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium19Accent(
          context,
        ),
      );

  static Widget medium19AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium19AccentInternal(
          context,
        ),
      );

  static Widget medium19AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium19Accent(
          context,
        ),
      ),
    );
  }

  static Widget medium19AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium19AccentLight(
          context,
        ),
      );

  static Widget medium19AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium19AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget medium19AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium19AccentDark(
          context,
        ),
      );

  static Widget medium19AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium19AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget medium19Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium19Grey(
          context,
        ),
      );

  static Widget medium19GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium19Grey(
          context,
        ),
      ),
    );
  }

  static Widget medium19GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium19GreyLight(
          context,
        ),
      );

  static Widget medium19GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium19GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget medium19GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium19GreyDark(
          context,
        ),
      );

  static Widget medium19GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium19GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget medium19Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium19Info(
          context,
        ),
      );

  static Widget medium19InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium19Info(
          context,
        ),
      ),
    );
  }

  static Widget medium19InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium19InfoLight(
          context,
        ),
      );

  static Widget medium19InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium19InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget medium19InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium19InfoDark(
          context,
        ),
      );

  static Widget medium19InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium19InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget medium19Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium19Success(
          context,
        ),
      );

  static Widget medium19SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium19Success(
          context,
        ),
      ),
    );
  }

  static Widget medium19SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium19SuccessLight(
          context,
        ),
      );

  static Widget medium19SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium19SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget medium19SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium19SuccessDark(
          context,
        ),
      );

  static Widget medium19SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium19SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget medium19Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium19Warning(
          context,
        ),
      );

  static Widget medium19WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium19Warning(
          context,
        ),
      ),
    );
  }

  static Widget medium19WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium19WarningLight(
          context,
        ),
      );

  static Widget medium19WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium19WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget medium19WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium19WarningDark(
          context,
        ),
      );

  static Widget medium19WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium19WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget medium19Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium19Danger(
          context,
        ),
      );

  static Widget medium19DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium19Danger(
          context,
        ),
      ),
    );
  }

  static Widget medium19DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium19DangerLight(
          context,
        ),
      );

  static Widget medium19DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium19DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget medium19DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium19DangerDark(
          context,
        ),
      );

  static Widget medium19DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium19DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget medium20White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium20White(
          context,
        ),
      );

  static Widget medium20WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium20WhiteAlways(
          context,
        ),
      );

  static Widget medium20Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium20Black(
          context,
        ),
      );

  static Widget medium20BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium20BlackAlways(
          context,
        ),
      );

  static Widget medium20Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium20Primary(
          context,
        ),
      );

  static Widget medium20PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium20PrimaryInternal(
          context,
        ),
      );

  static Widget medium20PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium20Primary(
          context,
        ),
      ),
    );
  }

  static Widget medium20PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium20PrimaryLight(
          context,
        ),
      );

  static Widget medium20PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium20PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget medium20PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium20PrimaryDark(
          context,
        ),
      );

  static Widget medium20PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium20PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget medium20Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium20Secondary(
          context,
        ),
      );

  static Widget medium20SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium20SecondaryInternal(
          context,
        ),
      );

  static Widget medium20SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium20Secondary(
          context,
        ),
      ),
    );
  }

  static Widget medium20SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium20SecondaryLight(
          context,
        ),
      );

  static Widget medium20SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium20SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget medium20SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium20SecondaryDark(
          context,
        ),
      );

  static Widget medium20SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium20SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget medium20Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium20Accent(
          context,
        ),
      );

  static Widget medium20AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium20AccentInternal(
          context,
        ),
      );

  static Widget medium20AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium20Accent(
          context,
        ),
      ),
    );
  }

  static Widget medium20AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium20AccentLight(
          context,
        ),
      );

  static Widget medium20AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium20AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget medium20AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium20AccentDark(
          context,
        ),
      );

  static Widget medium20AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium20AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget medium20Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium20Grey(
          context,
        ),
      );

  static Widget medium20GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium20Grey(
          context,
        ),
      ),
    );
  }

  static Widget medium20GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium20GreyLight(
          context,
        ),
      );

  static Widget medium20GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium20GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget medium20GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium20GreyDark(
          context,
        ),
      );

  static Widget medium20GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium20GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget medium20Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium20Info(
          context,
        ),
      );

  static Widget medium20InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium20Info(
          context,
        ),
      ),
    );
  }

  static Widget medium20InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium20InfoLight(
          context,
        ),
      );

  static Widget medium20InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium20InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget medium20InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium20InfoDark(
          context,
        ),
      );

  static Widget medium20InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium20InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget medium20Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium20Success(
          context,
        ),
      );

  static Widget medium20SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium20Success(
          context,
        ),
      ),
    );
  }

  static Widget medium20SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium20SuccessLight(
          context,
        ),
      );

  static Widget medium20SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium20SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget medium20SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium20SuccessDark(
          context,
        ),
      );

  static Widget medium20SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium20SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget medium20Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium20Warning(
          context,
        ),
      );

  static Widget medium20WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium20Warning(
          context,
        ),
      ),
    );
  }

  static Widget medium20WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium20WarningLight(
          context,
        ),
      );

  static Widget medium20WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium20WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget medium20WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium20WarningDark(
          context,
        ),
      );

  static Widget medium20WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium20WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget medium20Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium20Danger(
          context,
        ),
      );

  static Widget medium20DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium20Danger(
          context,
        ),
      ),
    );
  }

  static Widget medium20DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium20DangerLight(
          context,
        ),
      );

  static Widget medium20DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium20DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget medium20DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium20DangerDark(
          context,
        ),
      );

  static Widget medium20DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium20DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget medium22White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium22White(
          context,
        ),
      );

  static Widget medium22WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium22WhiteAlways(
          context,
        ),
      );

  static Widget medium22Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium22Black(
          context,
        ),
      );

  static Widget medium22BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium22BlackAlways(
          context,
        ),
      );

  static Widget medium22Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium22Primary(
          context,
        ),
      );

  static Widget medium22PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium22PrimaryInternal(
          context,
        ),
      );

  static Widget medium22PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium22Primary(
          context,
        ),
      ),
    );
  }

  static Widget medium22PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium22PrimaryLight(
          context,
        ),
      );

  static Widget medium22PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium22PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget medium22PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium22PrimaryDark(
          context,
        ),
      );

  static Widget medium22PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium22PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget medium22Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium22Secondary(
          context,
        ),
      );

  static Widget medium22SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium22SecondaryInternal(
          context,
        ),
      );

  static Widget medium22SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium22Secondary(
          context,
        ),
      ),
    );
  }

  static Widget medium22SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium22SecondaryLight(
          context,
        ),
      );

  static Widget medium22SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium22SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget medium22SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium22SecondaryDark(
          context,
        ),
      );

  static Widget medium22SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium22SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget medium22Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium22Accent(
          context,
        ),
      );

  static Widget medium22AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium22AccentInternal(
          context,
        ),
      );

  static Widget medium22AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium22Accent(
          context,
        ),
      ),
    );
  }

  static Widget medium22AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium22AccentLight(
          context,
        ),
      );

  static Widget medium22AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium22AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget medium22AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium22AccentDark(
          context,
        ),
      );

  static Widget medium22AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium22AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget medium22Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium22Grey(
          context,
        ),
      );

  static Widget medium22GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium22Grey(
          context,
        ),
      ),
    );
  }

  static Widget medium22GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium22GreyLight(
          context,
        ),
      );

  static Widget medium22GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium22GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget medium22GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium22GreyDark(
          context,
        ),
      );

  static Widget medium22GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium22GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget medium22Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium22Info(
          context,
        ),
      );

  static Widget medium22InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium22Info(
          context,
        ),
      ),
    );
  }

  static Widget medium22InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium22InfoLight(
          context,
        ),
      );

  static Widget medium22InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium22InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget medium22InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium22InfoDark(
          context,
        ),
      );

  static Widget medium22InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium22InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget medium22Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium22Success(
          context,
        ),
      );

  static Widget medium22SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium22Success(
          context,
        ),
      ),
    );
  }

  static Widget medium22SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium22SuccessLight(
          context,
        ),
      );

  static Widget medium22SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium22SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget medium22SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium22SuccessDark(
          context,
        ),
      );

  static Widget medium22SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium22SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget medium22Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium22Warning(
          context,
        ),
      );

  static Widget medium22WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium22Warning(
          context,
        ),
      ),
    );
  }

  static Widget medium22WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium22WarningLight(
          context,
        ),
      );

  static Widget medium22WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium22WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget medium22WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium22WarningDark(
          context,
        ),
      );

  static Widget medium22WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium22WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget medium22Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium22Danger(
          context,
        ),
      );

  static Widget medium22DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium22Danger(
          context,
        ),
      ),
    );
  }

  static Widget medium22DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium22DangerLight(
          context,
        ),
      );

  static Widget medium22DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium22DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget medium22DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium22DangerDark(
          context,
        ),
      );

  static Widget medium22DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium22DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget medium24White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium24White(
          context,
        ),
      );

  static Widget medium24WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium24WhiteAlways(
          context,
        ),
      );

  static Widget medium24Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium24Black(
          context,
        ),
      );

  static Widget medium24BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium24BlackAlways(
          context,
        ),
      );

  static Widget medium24Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium24Primary(
          context,
        ),
      );

  static Widget medium24PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium24PrimaryInternal(
          context,
        ),
      );

  static Widget medium24PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium24Primary(
          context,
        ),
      ),
    );
  }

  static Widget medium24PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium24PrimaryLight(
          context,
        ),
      );

  static Widget medium24PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium24PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget medium24PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium24PrimaryDark(
          context,
        ),
      );

  static Widget medium24PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium24PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget medium24Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium24Secondary(
          context,
        ),
      );

  static Widget medium24SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium24SecondaryInternal(
          context,
        ),
      );

  static Widget medium24SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium24Secondary(
          context,
        ),
      ),
    );
  }

  static Widget medium24SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium24SecondaryLight(
          context,
        ),
      );

  static Widget medium24SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium24SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget medium24SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium24SecondaryDark(
          context,
        ),
      );

  static Widget medium24SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium24SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget medium24Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium24Accent(
          context,
        ),
      );

  static Widget medium24AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium24AccentInternal(
          context,
        ),
      );

  static Widget medium24AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium24Accent(
          context,
        ),
      ),
    );
  }

  static Widget medium24AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium24AccentLight(
          context,
        ),
      );

  static Widget medium24AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium24AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget medium24AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium24AccentDark(
          context,
        ),
      );

  static Widget medium24AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium24AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget medium24Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium24Grey(
          context,
        ),
      );

  static Widget medium24GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium24Grey(
          context,
        ),
      ),
    );
  }

  static Widget medium24GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium24GreyLight(
          context,
        ),
      );

  static Widget medium24GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium24GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget medium24GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium24GreyDark(
          context,
        ),
      );

  static Widget medium24GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium24GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget medium24Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium24Info(
          context,
        ),
      );

  static Widget medium24InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium24Info(
          context,
        ),
      ),
    );
  }

  static Widget medium24InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium24InfoLight(
          context,
        ),
      );

  static Widget medium24InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium24InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget medium24InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium24InfoDark(
          context,
        ),
      );

  static Widget medium24InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium24InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget medium24Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium24Success(
          context,
        ),
      );

  static Widget medium24SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium24Success(
          context,
        ),
      ),
    );
  }

  static Widget medium24SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium24SuccessLight(
          context,
        ),
      );

  static Widget medium24SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium24SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget medium24SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium24SuccessDark(
          context,
        ),
      );

  static Widget medium24SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium24SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget medium24Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium24Warning(
          context,
        ),
      );

  static Widget medium24WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium24Warning(
          context,
        ),
      ),
    );
  }

  static Widget medium24WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium24WarningLight(
          context,
        ),
      );

  static Widget medium24WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium24WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget medium24WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium24WarningDark(
          context,
        ),
      );

  static Widget medium24WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium24WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget medium24Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium24Danger(
          context,
        ),
      );

  static Widget medium24DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium24Danger(
          context,
        ),
      ),
    );
  }

  static Widget medium24DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium24DangerLight(
          context,
        ),
      );

  static Widget medium24DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium24DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget medium24DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium24DangerDark(
          context,
        ),
      );

  static Widget medium24DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium24DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget medium26White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium26White(
          context,
        ),
      );

  static Widget medium26WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium26WhiteAlways(
          context,
        ),
      );

  static Widget medium26Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium26Black(
          context,
        ),
      );

  static Widget medium26BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium26BlackAlways(
          context,
        ),
      );

  static Widget medium26Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium26Primary(
          context,
        ),
      );

  static Widget medium26PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium26PrimaryInternal(
          context,
        ),
      );

  static Widget medium26PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium26Primary(
          context,
        ),
      ),
    );
  }

  static Widget medium26PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium26PrimaryLight(
          context,
        ),
      );

  static Widget medium26PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium26PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget medium26PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium26PrimaryDark(
          context,
        ),
      );

  static Widget medium26PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium26PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget medium26Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium26Secondary(
          context,
        ),
      );

  static Widget medium26SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium26SecondaryInternal(
          context,
        ),
      );

  static Widget medium26SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium26Secondary(
          context,
        ),
      ),
    );
  }

  static Widget medium26SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium26SecondaryLight(
          context,
        ),
      );

  static Widget medium26SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium26SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget medium26SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium26SecondaryDark(
          context,
        ),
      );

  static Widget medium26SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium26SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget medium26Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium26Accent(
          context,
        ),
      );

  static Widget medium26AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium26AccentInternal(
          context,
        ),
      );

  static Widget medium26AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium26Accent(
          context,
        ),
      ),
    );
  }

  static Widget medium26AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium26AccentLight(
          context,
        ),
      );

  static Widget medium26AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium26AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget medium26AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium26AccentDark(
          context,
        ),
      );

  static Widget medium26AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium26AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget medium26Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium26Grey(
          context,
        ),
      );

  static Widget medium26GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium26Grey(
          context,
        ),
      ),
    );
  }

  static Widget medium26GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium26GreyLight(
          context,
        ),
      );

  static Widget medium26GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium26GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget medium26GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium26GreyDark(
          context,
        ),
      );

  static Widget medium26GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium26GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget medium26Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium26Info(
          context,
        ),
      );

  static Widget medium26InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium26Info(
          context,
        ),
      ),
    );
  }

  static Widget medium26InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium26InfoLight(
          context,
        ),
      );

  static Widget medium26InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium26InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget medium26InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium26InfoDark(
          context,
        ),
      );

  static Widget medium26InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium26InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget medium26Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium26Success(
          context,
        ),
      );

  static Widget medium26SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium26Success(
          context,
        ),
      ),
    );
  }

  static Widget medium26SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium26SuccessLight(
          context,
        ),
      );

  static Widget medium26SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium26SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget medium26SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium26SuccessDark(
          context,
        ),
      );

  static Widget medium26SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium26SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget medium26Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium26Warning(
          context,
        ),
      );

  static Widget medium26WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium26Warning(
          context,
        ),
      ),
    );
  }

  static Widget medium26WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium26WarningLight(
          context,
        ),
      );

  static Widget medium26WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium26WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget medium26WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium26WarningDark(
          context,
        ),
      );

  static Widget medium26WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium26WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget medium26Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium26Danger(
          context,
        ),
      );

  static Widget medium26DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium26Danger(
          context,
        ),
      ),
    );
  }

  static Widget medium26DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium26DangerLight(
          context,
        ),
      );

  static Widget medium26DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium26DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget medium26DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium26DangerDark(
          context,
        ),
      );

  static Widget medium26DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium26DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget medium28White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium28White(
          context,
        ),
      );

  static Widget medium28WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium28WhiteAlways(
          context,
        ),
      );

  static Widget medium28Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium28Black(
          context,
        ),
      );

  static Widget medium28BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium28BlackAlways(
          context,
        ),
      );

  static Widget medium28Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium28Primary(
          context,
        ),
      );

  static Widget medium28PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium28PrimaryInternal(
          context,
        ),
      );

  static Widget medium28PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium28Primary(
          context,
        ),
      ),
    );
  }

  static Widget medium28PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium28PrimaryLight(
          context,
        ),
      );

  static Widget medium28PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium28PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget medium28PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium28PrimaryDark(
          context,
        ),
      );

  static Widget medium28PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium28PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget medium28Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium28Secondary(
          context,
        ),
      );

  static Widget medium28SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium28SecondaryInternal(
          context,
        ),
      );

  static Widget medium28SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium28Secondary(
          context,
        ),
      ),
    );
  }

  static Widget medium28SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium28SecondaryLight(
          context,
        ),
      );

  static Widget medium28SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium28SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget medium28SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium28SecondaryDark(
          context,
        ),
      );

  static Widget medium28SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium28SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget medium28Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium28Accent(
          context,
        ),
      );

  static Widget medium28AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium28AccentInternal(
          context,
        ),
      );

  static Widget medium28AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium28Accent(
          context,
        ),
      ),
    );
  }

  static Widget medium28AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium28AccentLight(
          context,
        ),
      );

  static Widget medium28AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium28AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget medium28AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium28AccentDark(
          context,
        ),
      );

  static Widget medium28AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium28AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget medium28Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium28Grey(
          context,
        ),
      );

  static Widget medium28GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium28Grey(
          context,
        ),
      ),
    );
  }

  static Widget medium28GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium28GreyLight(
          context,
        ),
      );

  static Widget medium28GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium28GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget medium28GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium28GreyDark(
          context,
        ),
      );

  static Widget medium28GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium28GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget medium28Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium28Info(
          context,
        ),
      );

  static Widget medium28InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium28Info(
          context,
        ),
      ),
    );
  }

  static Widget medium28InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium28InfoLight(
          context,
        ),
      );

  static Widget medium28InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium28InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget medium28InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium28InfoDark(
          context,
        ),
      );

  static Widget medium28InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium28InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget medium28Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium28Success(
          context,
        ),
      );

  static Widget medium28SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium28Success(
          context,
        ),
      ),
    );
  }

  static Widget medium28SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium28SuccessLight(
          context,
        ),
      );

  static Widget medium28SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium28SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget medium28SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium28SuccessDark(
          context,
        ),
      );

  static Widget medium28SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium28SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget medium28Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium28Warning(
          context,
        ),
      );

  static Widget medium28WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium28Warning(
          context,
        ),
      ),
    );
  }

  static Widget medium28WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium28WarningLight(
          context,
        ),
      );

  static Widget medium28WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium28WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget medium28WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium28WarningDark(
          context,
        ),
      );

  static Widget medium28WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium28WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget medium28Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium28Danger(
          context,
        ),
      );

  static Widget medium28DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium28Danger(
          context,
        ),
      ),
    );
  }

  static Widget medium28DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium28DangerLight(
          context,
        ),
      );

  static Widget medium28DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium28DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget medium28DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium28DangerDark(
          context,
        ),
      );

  static Widget medium28DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium28DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget medium32White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium32White(
          context,
        ),
      );

  static Widget medium32WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium32WhiteAlways(
          context,
        ),
      );

  static Widget medium32Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium32Black(
          context,
        ),
      );

  static Widget medium32BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium32BlackAlways(
          context,
        ),
      );

  static Widget medium32Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium32Primary(
          context,
        ),
      );

  static Widget medium32PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium32PrimaryInternal(
          context,
        ),
      );

  static Widget medium32PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium32Primary(
          context,
        ),
      ),
    );
  }

  static Widget medium32PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium32PrimaryLight(
          context,
        ),
      );

  static Widget medium32PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium32PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget medium32PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium32PrimaryDark(
          context,
        ),
      );

  static Widget medium32PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium32PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget medium32Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium32Secondary(
          context,
        ),
      );

  static Widget medium32SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium32SecondaryInternal(
          context,
        ),
      );

  static Widget medium32SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium32Secondary(
          context,
        ),
      ),
    );
  }

  static Widget medium32SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium32SecondaryLight(
          context,
        ),
      );

  static Widget medium32SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium32SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget medium32SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium32SecondaryDark(
          context,
        ),
      );

  static Widget medium32SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium32SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget medium32Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium32Accent(
          context,
        ),
      );

  static Widget medium32AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium32AccentInternal(
          context,
        ),
      );

  static Widget medium32AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium32Accent(
          context,
        ),
      ),
    );
  }

  static Widget medium32AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium32AccentLight(
          context,
        ),
      );

  static Widget medium32AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium32AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget medium32AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium32AccentDark(
          context,
        ),
      );

  static Widget medium32AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium32AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget medium32Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium32Grey(
          context,
        ),
      );

  static Widget medium32GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium32Grey(
          context,
        ),
      ),
    );
  }

  static Widget medium32GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium32GreyLight(
          context,
        ),
      );

  static Widget medium32GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium32GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget medium32GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium32GreyDark(
          context,
        ),
      );

  static Widget medium32GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium32GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget medium32Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium32Info(
          context,
        ),
      );

  static Widget medium32InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium32Info(
          context,
        ),
      ),
    );
  }

  static Widget medium32InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium32InfoLight(
          context,
        ),
      );

  static Widget medium32InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium32InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget medium32InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium32InfoDark(
          context,
        ),
      );

  static Widget medium32InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium32InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget medium32Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium32Success(
          context,
        ),
      );

  static Widget medium32SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium32Success(
          context,
        ),
      ),
    );
  }

  static Widget medium32SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium32SuccessLight(
          context,
        ),
      );

  static Widget medium32SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium32SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget medium32SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium32SuccessDark(
          context,
        ),
      );

  static Widget medium32SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium32SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget medium32Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium32Warning(
          context,
        ),
      );

  static Widget medium32WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium32Warning(
          context,
        ),
      ),
    );
  }

  static Widget medium32WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium32WarningLight(
          context,
        ),
      );

  static Widget medium32WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium32WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget medium32WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium32WarningDark(
          context,
        ),
      );

  static Widget medium32WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium32WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget medium32Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium32Danger(
          context,
        ),
      );

  static Widget medium32DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium32Danger(
          context,
        ),
      ),
    );
  }

  static Widget medium32DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium32DangerLight(
          context,
        ),
      );

  static Widget medium32DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium32DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget medium32DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium32DangerDark(
          context,
        ),
      );

  static Widget medium32DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.medium32DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold10White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold10White(
          context,
        ),
      );

  static Widget semiBold10WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold10WhiteAlways(
          context,
        ),
      );

  static Widget semiBold10Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold10Black(
          context,
        ),
      );

  static Widget semiBold10BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold10BlackAlways(
          context,
        ),
      );

  static Widget semiBold10Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold10Primary(
          context,
        ),
      );

  static Widget semiBold10PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold10PrimaryInternal(
          context,
        ),
      );

  static Widget semiBold10PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold10Primary(
          context,
        ),
      ),
    );
  }

  static Widget semiBold10PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold10PrimaryLight(
          context,
        ),
      );

  static Widget semiBold10PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold10PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold10PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold10PrimaryDark(
          context,
        ),
      );

  static Widget semiBold10PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold10PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold10Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold10Secondary(
          context,
        ),
      );

  static Widget semiBold10SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold10SecondaryInternal(
          context,
        ),
      );

  static Widget semiBold10SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold10Secondary(
          context,
        ),
      ),
    );
  }

  static Widget semiBold10SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold10SecondaryLight(
          context,
        ),
      );

  static Widget semiBold10SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold10SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold10SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold10SecondaryDark(
          context,
        ),
      );

  static Widget semiBold10SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold10SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold10Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold10Accent(
          context,
        ),
      );

  static Widget semiBold10AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold10AccentInternal(
          context,
        ),
      );

  static Widget semiBold10AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold10Accent(
          context,
        ),
      ),
    );
  }

  static Widget semiBold10AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold10AccentLight(
          context,
        ),
      );

  static Widget semiBold10AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold10AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold10AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold10AccentDark(
          context,
        ),
      );

  static Widget semiBold10AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold10AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold10Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold10Grey(
          context,
        ),
      );

  static Widget semiBold10GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold10Grey(
          context,
        ),
      ),
    );
  }

  static Widget semiBold10GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold10GreyLight(
          context,
        ),
      );

  static Widget semiBold10GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold10GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold10GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold10GreyDark(
          context,
        ),
      );

  static Widget semiBold10GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold10GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold10Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold10Info(
          context,
        ),
      );

  static Widget semiBold10InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold10Info(
          context,
        ),
      ),
    );
  }

  static Widget semiBold10InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold10InfoLight(
          context,
        ),
      );

  static Widget semiBold10InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold10InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold10InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold10InfoDark(
          context,
        ),
      );

  static Widget semiBold10InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold10InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold10Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold10Success(
          context,
        ),
      );

  static Widget semiBold10SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold10Success(
          context,
        ),
      ),
    );
  }

  static Widget semiBold10SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold10SuccessLight(
          context,
        ),
      );

  static Widget semiBold10SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold10SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold10SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold10SuccessDark(
          context,
        ),
      );

  static Widget semiBold10SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold10SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold10Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold10Warning(
          context,
        ),
      );

  static Widget semiBold10WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold10Warning(
          context,
        ),
      ),
    );
  }

  static Widget semiBold10WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold10WarningLight(
          context,
        ),
      );

  static Widget semiBold10WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold10WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold10WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold10WarningDark(
          context,
        ),
      );

  static Widget semiBold10WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold10WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold10Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold10Danger(
          context,
        ),
      );

  static Widget semiBold10DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold10Danger(
          context,
        ),
      ),
    );
  }

  static Widget semiBold10DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold10DangerLight(
          context,
        ),
      );

  static Widget semiBold10DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold10DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold10DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold10DangerDark(
          context,
        ),
      );

  static Widget semiBold10DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold10DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold11White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold11White(
          context,
        ),
      );

  static Widget semiBold11WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold11WhiteAlways(
          context,
        ),
      );

  static Widget semiBold11Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold11Black(
          context,
        ),
      );

  static Widget semiBold11BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold11BlackAlways(
          context,
        ),
      );

  static Widget semiBold11Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold11Primary(
          context,
        ),
      );

  static Widget semiBold11PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold11PrimaryInternal(
          context,
        ),
      );

  static Widget semiBold11PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold11Primary(
          context,
        ),
      ),
    );
  }

  static Widget semiBold11PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold11PrimaryLight(
          context,
        ),
      );

  static Widget semiBold11PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold11PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold11PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold11PrimaryDark(
          context,
        ),
      );

  static Widget semiBold11PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold11PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold11Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold11Secondary(
          context,
        ),
      );

  static Widget semiBold11SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold11SecondaryInternal(
          context,
        ),
      );

  static Widget semiBold11SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold11Secondary(
          context,
        ),
      ),
    );
  }

  static Widget semiBold11SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold11SecondaryLight(
          context,
        ),
      );

  static Widget semiBold11SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold11SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold11SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold11SecondaryDark(
          context,
        ),
      );

  static Widget semiBold11SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold11SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold11Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold11Accent(
          context,
        ),
      );

  static Widget semiBold11AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold11AccentInternal(
          context,
        ),
      );

  static Widget semiBold11AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold11Accent(
          context,
        ),
      ),
    );
  }

  static Widget semiBold11AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold11AccentLight(
          context,
        ),
      );

  static Widget semiBold11AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold11AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold11AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold11AccentDark(
          context,
        ),
      );

  static Widget semiBold11AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold11AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold11Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold11Grey(
          context,
        ),
      );

  static Widget semiBold11GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold11Grey(
          context,
        ),
      ),
    );
  }

  static Widget semiBold11GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold11GreyLight(
          context,
        ),
      );

  static Widget semiBold11GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold11GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold11GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold11GreyDark(
          context,
        ),
      );

  static Widget semiBold11GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold11GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold11Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold11Info(
          context,
        ),
      );

  static Widget semiBold11InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold11Info(
          context,
        ),
      ),
    );
  }

  static Widget semiBold11InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold11InfoLight(
          context,
        ),
      );

  static Widget semiBold11InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold11InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold11InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold11InfoDark(
          context,
        ),
      );

  static Widget semiBold11InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold11InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold11Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold11Success(
          context,
        ),
      );

  static Widget semiBold11SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold11Success(
          context,
        ),
      ),
    );
  }

  static Widget semiBold11SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold11SuccessLight(
          context,
        ),
      );

  static Widget semiBold11SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold11SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold11SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold11SuccessDark(
          context,
        ),
      );

  static Widget semiBold11SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold11SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold11Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold11Warning(
          context,
        ),
      );

  static Widget semiBold11WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold11Warning(
          context,
        ),
      ),
    );
  }

  static Widget semiBold11WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold11WarningLight(
          context,
        ),
      );

  static Widget semiBold11WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold11WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold11WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold11WarningDark(
          context,
        ),
      );

  static Widget semiBold11WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold11WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold11Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold11Danger(
          context,
        ),
      );

  static Widget semiBold11DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold11Danger(
          context,
        ),
      ),
    );
  }

  static Widget semiBold11DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold11DangerLight(
          context,
        ),
      );

  static Widget semiBold11DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold11DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold11DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold11DangerDark(
          context,
        ),
      );

  static Widget semiBold11DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold11DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold12White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold12White(
          context,
        ),
      );

  static Widget semiBold12WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold12WhiteAlways(
          context,
        ),
      );

  static Widget semiBold12Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold12Black(
          context,
        ),
      );

  static Widget semiBold12BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold12BlackAlways(
          context,
        ),
      );

  static Widget semiBold12Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold12Primary(
          context,
        ),
      );

  static Widget semiBold12PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold12PrimaryInternal(
          context,
        ),
      );

  static Widget semiBold12PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold12Primary(
          context,
        ),
      ),
    );
  }

  static Widget semiBold12PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold12PrimaryLight(
          context,
        ),
      );

  static Widget semiBold12PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold12PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold12PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold12PrimaryDark(
          context,
        ),
      );

  static Widget semiBold12PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold12PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold12Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold12Secondary(
          context,
        ),
      );

  static Widget semiBold12SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold12SecondaryInternal(
          context,
        ),
      );

  static Widget semiBold12SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold12Secondary(
          context,
        ),
      ),
    );
  }

  static Widget semiBold12SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold12SecondaryLight(
          context,
        ),
      );

  static Widget semiBold12SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold12SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold12SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold12SecondaryDark(
          context,
        ),
      );

  static Widget semiBold12SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold12SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold12Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold12Accent(
          context,
        ),
      );

  static Widget semiBold12AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold12AccentInternal(
          context,
        ),
      );

  static Widget semiBold12AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold12Accent(
          context,
        ),
      ),
    );
  }

  static Widget semiBold12AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold12AccentLight(
          context,
        ),
      );

  static Widget semiBold12AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold12AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold12AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold12AccentDark(
          context,
        ),
      );

  static Widget semiBold12AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold12AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold12Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold12Grey(
          context,
        ),
      );

  static Widget semiBold12GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold12Grey(
          context,
        ),
      ),
    );
  }

  static Widget semiBold12GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold12GreyLight(
          context,
        ),
      );

  static Widget semiBold12GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold12GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold12GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold12GreyDark(
          context,
        ),
      );

  static Widget semiBold12GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold12GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold12Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold12Info(
          context,
        ),
      );

  static Widget semiBold12InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold12Info(
          context,
        ),
      ),
    );
  }

  static Widget semiBold12InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold12InfoLight(
          context,
        ),
      );

  static Widget semiBold12InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold12InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold12InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold12InfoDark(
          context,
        ),
      );

  static Widget semiBold12InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold12InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold12Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold12Success(
          context,
        ),
      );

  static Widget semiBold12SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold12Success(
          context,
        ),
      ),
    );
  }

  static Widget semiBold12SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold12SuccessLight(
          context,
        ),
      );

  static Widget semiBold12SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold12SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold12SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold12SuccessDark(
          context,
        ),
      );

  static Widget semiBold12SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold12SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold12Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold12Warning(
          context,
        ),
      );

  static Widget semiBold12WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold12Warning(
          context,
        ),
      ),
    );
  }

  static Widget semiBold12WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold12WarningLight(
          context,
        ),
      );

  static Widget semiBold12WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold12WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold12WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold12WarningDark(
          context,
        ),
      );

  static Widget semiBold12WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold12WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold12Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold12Danger(
          context,
        ),
      );

  static Widget semiBold12DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold12Danger(
          context,
        ),
      ),
    );
  }

  static Widget semiBold12DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold12DangerLight(
          context,
        ),
      );

  static Widget semiBold12DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold12DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold12DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold12DangerDark(
          context,
        ),
      );

  static Widget semiBold12DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold12DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold13White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold13White(
          context,
        ),
      );

  static Widget semiBold13WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold13WhiteAlways(
          context,
        ),
      );

  static Widget semiBold13Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold13Black(
          context,
        ),
      );

  static Widget semiBold13BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold13BlackAlways(
          context,
        ),
      );

  static Widget semiBold13Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold13Primary(
          context,
        ),
      );

  static Widget semiBold13PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold13PrimaryInternal(
          context,
        ),
      );

  static Widget semiBold13PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold13Primary(
          context,
        ),
      ),
    );
  }

  static Widget semiBold13PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold13PrimaryLight(
          context,
        ),
      );

  static Widget semiBold13PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold13PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold13PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold13PrimaryDark(
          context,
        ),
      );

  static Widget semiBold13PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold13PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold13Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold13Secondary(
          context,
        ),
      );

  static Widget semiBold13SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold13SecondaryInternal(
          context,
        ),
      );

  static Widget semiBold13SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold13Secondary(
          context,
        ),
      ),
    );
  }

  static Widget semiBold13SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold13SecondaryLight(
          context,
        ),
      );

  static Widget semiBold13SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold13SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold13SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold13SecondaryDark(
          context,
        ),
      );

  static Widget semiBold13SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold13SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold13Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold13Accent(
          context,
        ),
      );

  static Widget semiBold13AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold13AccentInternal(
          context,
        ),
      );

  static Widget semiBold13AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold13Accent(
          context,
        ),
      ),
    );
  }

  static Widget semiBold13AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold13AccentLight(
          context,
        ),
      );

  static Widget semiBold13AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold13AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold13AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold13AccentDark(
          context,
        ),
      );

  static Widget semiBold13AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold13AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold13Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold13Grey(
          context,
        ),
      );

  static Widget semiBold13GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold13Grey(
          context,
        ),
      ),
    );
  }

  static Widget semiBold13GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold13GreyLight(
          context,
        ),
      );

  static Widget semiBold13GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold13GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold13GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold13GreyDark(
          context,
        ),
      );

  static Widget semiBold13GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold13GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold13Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold13Info(
          context,
        ),
      );

  static Widget semiBold13InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold13Info(
          context,
        ),
      ),
    );
  }

  static Widget semiBold13InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold13InfoLight(
          context,
        ),
      );

  static Widget semiBold13InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold13InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold13InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold13InfoDark(
          context,
        ),
      );

  static Widget semiBold13InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold13InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold13Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold13Success(
          context,
        ),
      );

  static Widget semiBold13SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold13Success(
          context,
        ),
      ),
    );
  }

  static Widget semiBold13SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold13SuccessLight(
          context,
        ),
      );

  static Widget semiBold13SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold13SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold13SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold13SuccessDark(
          context,
        ),
      );

  static Widget semiBold13SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold13SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold13Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold13Warning(
          context,
        ),
      );

  static Widget semiBold13WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold13Warning(
          context,
        ),
      ),
    );
  }

  static Widget semiBold13WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold13WarningLight(
          context,
        ),
      );

  static Widget semiBold13WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold13WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold13WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold13WarningDark(
          context,
        ),
      );

  static Widget semiBold13WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold13WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold13Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold13Danger(
          context,
        ),
      );

  static Widget semiBold13DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold13Danger(
          context,
        ),
      ),
    );
  }

  static Widget semiBold13DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold13DangerLight(
          context,
        ),
      );

  static Widget semiBold13DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold13DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold13DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold13DangerDark(
          context,
        ),
      );

  static Widget semiBold13DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold13DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold14White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold14White(
          context,
        ),
      );

  static Widget semiBold14WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold14WhiteAlways(
          context,
        ),
      );

  static Widget semiBold14Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold14Black(
          context,
        ),
      );

  static Widget semiBold14BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold14BlackAlways(
          context,
        ),
      );

  static Widget semiBold14Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold14Primary(
          context,
        ),
      );

  static Widget semiBold14PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold14PrimaryInternal(
          context,
        ),
      );

  static Widget semiBold14PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold14Primary(
          context,
        ),
      ),
    );
  }

  static Widget semiBold14PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold14PrimaryLight(
          context,
        ),
      );

  static Widget semiBold14PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold14PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold14PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold14PrimaryDark(
          context,
        ),
      );

  static Widget semiBold14PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold14PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold14Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold14Secondary(
          context,
        ),
      );

  static Widget semiBold14SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold14SecondaryInternal(
          context,
        ),
      );

  static Widget semiBold14SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold14Secondary(
          context,
        ),
      ),
    );
  }

  static Widget semiBold14SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold14SecondaryLight(
          context,
        ),
      );

  static Widget semiBold14SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold14SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold14SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold14SecondaryDark(
          context,
        ),
      );

  static Widget semiBold14SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold14SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold14Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold14Accent(
          context,
        ),
      );

  static Widget semiBold14AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold14AccentInternal(
          context,
        ),
      );

  static Widget semiBold14AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold14Accent(
          context,
        ),
      ),
    );
  }

  static Widget semiBold14AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold14AccentLight(
          context,
        ),
      );

  static Widget semiBold14AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold14AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold14AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold14AccentDark(
          context,
        ),
      );

  static Widget semiBold14AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold14AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold14Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold14Grey(
          context,
        ),
      );

  static Widget semiBold14GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold14Grey(
          context,
        ),
      ),
    );
  }

  static Widget semiBold14GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold14GreyLight(
          context,
        ),
      );

  static Widget semiBold14GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold14GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold14GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold14GreyDark(
          context,
        ),
      );

  static Widget semiBold14GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold14GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold14Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold14Info(
          context,
        ),
      );

  static Widget semiBold14InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold14Info(
          context,
        ),
      ),
    );
  }

  static Widget semiBold14InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold14InfoLight(
          context,
        ),
      );

  static Widget semiBold14InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold14InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold14InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold14InfoDark(
          context,
        ),
      );

  static Widget semiBold14InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold14InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold14Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold14Success(
          context,
        ),
      );

  static Widget semiBold14SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold14Success(
          context,
        ),
      ),
    );
  }

  static Widget semiBold14SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold14SuccessLight(
          context,
        ),
      );

  static Widget semiBold14SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold14SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold14SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold14SuccessDark(
          context,
        ),
      );

  static Widget semiBold14SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold14SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold14Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold14Warning(
          context,
        ),
      );

  static Widget semiBold14WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold14Warning(
          context,
        ),
      ),
    );
  }

  static Widget semiBold14WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold14WarningLight(
          context,
        ),
      );

  static Widget semiBold14WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold14WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold14WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold14WarningDark(
          context,
        ),
      );

  static Widget semiBold14WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold14WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold14Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold14Danger(
          context,
        ),
      );

  static Widget semiBold14DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold14Danger(
          context,
        ),
      ),
    );
  }

  static Widget semiBold14DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold14DangerLight(
          context,
        ),
      );

  static Widget semiBold14DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold14DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold14DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold14DangerDark(
          context,
        ),
      );

  static Widget semiBold14DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold14DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold15White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold15White(
          context,
        ),
      );

  static Widget semiBold15WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold15WhiteAlways(
          context,
        ),
      );

  static Widget semiBold15Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold15Black(
          context,
        ),
      );

  static Widget semiBold15BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold15BlackAlways(
          context,
        ),
      );

  static Widget semiBold15Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold15Primary(
          context,
        ),
      );

  static Widget semiBold15PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold15PrimaryInternal(
          context,
        ),
      );

  static Widget semiBold15PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold15Primary(
          context,
        ),
      ),
    );
  }

  static Widget semiBold15PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold15PrimaryLight(
          context,
        ),
      );

  static Widget semiBold15PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold15PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold15PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold15PrimaryDark(
          context,
        ),
      );

  static Widget semiBold15PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold15PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold15Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold15Secondary(
          context,
        ),
      );

  static Widget semiBold15SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold15SecondaryInternal(
          context,
        ),
      );

  static Widget semiBold15SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold15Secondary(
          context,
        ),
      ),
    );
  }

  static Widget semiBold15SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold15SecondaryLight(
          context,
        ),
      );

  static Widget semiBold15SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold15SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold15SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold15SecondaryDark(
          context,
        ),
      );

  static Widget semiBold15SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold15SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold15Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold15Accent(
          context,
        ),
      );

  static Widget semiBold15AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold15AccentInternal(
          context,
        ),
      );

  static Widget semiBold15AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold15Accent(
          context,
        ),
      ),
    );
  }

  static Widget semiBold15AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold15AccentLight(
          context,
        ),
      );

  static Widget semiBold15AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold15AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold15AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold15AccentDark(
          context,
        ),
      );

  static Widget semiBold15AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold15AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold15Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold15Grey(
          context,
        ),
      );

  static Widget semiBold15GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold15Grey(
          context,
        ),
      ),
    );
  }

  static Widget semiBold15GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold15GreyLight(
          context,
        ),
      );

  static Widget semiBold15GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold15GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold15GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold15GreyDark(
          context,
        ),
      );

  static Widget semiBold15GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold15GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold15Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold15Info(
          context,
        ),
      );

  static Widget semiBold15InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold15Info(
          context,
        ),
      ),
    );
  }

  static Widget semiBold15InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold15InfoLight(
          context,
        ),
      );

  static Widget semiBold15InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold15InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold15InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold15InfoDark(
          context,
        ),
      );

  static Widget semiBold15InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold15InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold15Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold15Success(
          context,
        ),
      );

  static Widget semiBold15SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold15Success(
          context,
        ),
      ),
    );
  }

  static Widget semiBold15SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold15SuccessLight(
          context,
        ),
      );

  static Widget semiBold15SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold15SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold15SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold15SuccessDark(
          context,
        ),
      );

  static Widget semiBold15SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold15SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold15Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold15Warning(
          context,
        ),
      );

  static Widget semiBold15WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold15Warning(
          context,
        ),
      ),
    );
  }

  static Widget semiBold15WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold15WarningLight(
          context,
        ),
      );

  static Widget semiBold15WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold15WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold15WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold15WarningDark(
          context,
        ),
      );

  static Widget semiBold15WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold15WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold15Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold15Danger(
          context,
        ),
      );

  static Widget semiBold15DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold15Danger(
          context,
        ),
      ),
    );
  }

  static Widget semiBold15DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold15DangerLight(
          context,
        ),
      );

  static Widget semiBold15DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold15DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold15DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold15DangerDark(
          context,
        ),
      );

  static Widget semiBold15DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold15DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold16White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold16White(
          context,
        ),
      );

  static Widget semiBold16WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold16WhiteAlways(
          context,
        ),
      );

  static Widget semiBold16Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold16Black(
          context,
        ),
      );

  static Widget semiBold16BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold16BlackAlways(
          context,
        ),
      );

  static Widget semiBold16Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold16Primary(
          context,
        ),
      );

  static Widget semiBold16PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold16PrimaryInternal(
          context,
        ),
      );

  static Widget semiBold16PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold16Primary(
          context,
        ),
      ),
    );
  }

  static Widget semiBold16PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold16PrimaryLight(
          context,
        ),
      );

  static Widget semiBold16PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold16PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold16PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold16PrimaryDark(
          context,
        ),
      );

  static Widget semiBold16PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold16PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold16Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold16Secondary(
          context,
        ),
      );

  static Widget semiBold16SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold16SecondaryInternal(
          context,
        ),
      );

  static Widget semiBold16SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold16Secondary(
          context,
        ),
      ),
    );
  }

  static Widget semiBold16SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold16SecondaryLight(
          context,
        ),
      );

  static Widget semiBold16SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold16SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold16SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold16SecondaryDark(
          context,
        ),
      );

  static Widget semiBold16SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold16SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold16Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold16Accent(
          context,
        ),
      );

  static Widget semiBold16AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold16AccentInternal(
          context,
        ),
      );

  static Widget semiBold16AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold16Accent(
          context,
        ),
      ),
    );
  }

  static Widget semiBold16AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold16AccentLight(
          context,
        ),
      );

  static Widget semiBold16AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold16AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold16AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold16AccentDark(
          context,
        ),
      );

  static Widget semiBold16AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold16AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold16Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold16Grey(
          context,
        ),
      );

  static Widget semiBold16GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold16Grey(
          context,
        ),
      ),
    );
  }

  static Widget semiBold16GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold16GreyLight(
          context,
        ),
      );

  static Widget semiBold16GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold16GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold16GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold16GreyDark(
          context,
        ),
      );

  static Widget semiBold16GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold16GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold16Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold16Info(
          context,
        ),
      );

  static Widget semiBold16InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold16Info(
          context,
        ),
      ),
    );
  }

  static Widget semiBold16InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold16InfoLight(
          context,
        ),
      );

  static Widget semiBold16InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold16InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold16InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold16InfoDark(
          context,
        ),
      );

  static Widget semiBold16InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold16InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold16Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold16Success(
          context,
        ),
      );

  static Widget semiBold16SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold16Success(
          context,
        ),
      ),
    );
  }

  static Widget semiBold16SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold16SuccessLight(
          context,
        ),
      );

  static Widget semiBold16SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold16SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold16SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold16SuccessDark(
          context,
        ),
      );

  static Widget semiBold16SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold16SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold16Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold16Warning(
          context,
        ),
      );

  static Widget semiBold16WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold16Warning(
          context,
        ),
      ),
    );
  }

  static Widget semiBold16WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold16WarningLight(
          context,
        ),
      );

  static Widget semiBold16WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold16WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold16WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold16WarningDark(
          context,
        ),
      );

  static Widget semiBold16WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold16WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold16Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold16Danger(
          context,
        ),
      );

  static Widget semiBold16DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold16Danger(
          context,
        ),
      ),
    );
  }

  static Widget semiBold16DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold16DangerLight(
          context,
        ),
      );

  static Widget semiBold16DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold16DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold16DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold16DangerDark(
          context,
        ),
      );

  static Widget semiBold16DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold16DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold17White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold17White(
          context,
        ),
      );

  static Widget semiBold17WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold17WhiteAlways(
          context,
        ),
      );

  static Widget semiBold17Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold17Black(
          context,
        ),
      );

  static Widget semiBold17BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold17BlackAlways(
          context,
        ),
      );

  static Widget semiBold17Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold17Primary(
          context,
        ),
      );

  static Widget semiBold17PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold17PrimaryInternal(
          context,
        ),
      );

  static Widget semiBold17PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold17Primary(
          context,
        ),
      ),
    );
  }

  static Widget semiBold17PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold17PrimaryLight(
          context,
        ),
      );

  static Widget semiBold17PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold17PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold17PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold17PrimaryDark(
          context,
        ),
      );

  static Widget semiBold17PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold17PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold17Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold17Secondary(
          context,
        ),
      );

  static Widget semiBold17SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold17SecondaryInternal(
          context,
        ),
      );

  static Widget semiBold17SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold17Secondary(
          context,
        ),
      ),
    );
  }

  static Widget semiBold17SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold17SecondaryLight(
          context,
        ),
      );

  static Widget semiBold17SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold17SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold17SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold17SecondaryDark(
          context,
        ),
      );

  static Widget semiBold17SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold17SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold17Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold17Accent(
          context,
        ),
      );

  static Widget semiBold17AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold17AccentInternal(
          context,
        ),
      );

  static Widget semiBold17AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold17Accent(
          context,
        ),
      ),
    );
  }

  static Widget semiBold17AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold17AccentLight(
          context,
        ),
      );

  static Widget semiBold17AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold17AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold17AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold17AccentDark(
          context,
        ),
      );

  static Widget semiBold17AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold17AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold17Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold17Grey(
          context,
        ),
      );

  static Widget semiBold17GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold17Grey(
          context,
        ),
      ),
    );
  }

  static Widget semiBold17GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold17GreyLight(
          context,
        ),
      );

  static Widget semiBold17GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold17GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold17GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold17GreyDark(
          context,
        ),
      );

  static Widget semiBold17GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold17GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold17Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold17Info(
          context,
        ),
      );

  static Widget semiBold17InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold17Info(
          context,
        ),
      ),
    );
  }

  static Widget semiBold17InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold17InfoLight(
          context,
        ),
      );

  static Widget semiBold17InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold17InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold17InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold17InfoDark(
          context,
        ),
      );

  static Widget semiBold17InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold17InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold17Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold17Success(
          context,
        ),
      );

  static Widget semiBold17SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold17Success(
          context,
        ),
      ),
    );
  }

  static Widget semiBold17SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold17SuccessLight(
          context,
        ),
      );

  static Widget semiBold17SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold17SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold17SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold17SuccessDark(
          context,
        ),
      );

  static Widget semiBold17SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold17SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold17Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold17Warning(
          context,
        ),
      );

  static Widget semiBold17WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold17Warning(
          context,
        ),
      ),
    );
  }

  static Widget semiBold17WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold17WarningLight(
          context,
        ),
      );

  static Widget semiBold17WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold17WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold17WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold17WarningDark(
          context,
        ),
      );

  static Widget semiBold17WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold17WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold17Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold17Danger(
          context,
        ),
      );

  static Widget semiBold17DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold17Danger(
          context,
        ),
      ),
    );
  }

  static Widget semiBold17DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold17DangerLight(
          context,
        ),
      );

  static Widget semiBold17DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold17DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold17DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold17DangerDark(
          context,
        ),
      );

  static Widget semiBold17DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold17DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold18White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold18White(
          context,
        ),
      );

  static Widget semiBold18WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold18WhiteAlways(
          context,
        ),
      );

  static Widget semiBold18Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold18Black(
          context,
        ),
      );

  static Widget semiBold18BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold18BlackAlways(
          context,
        ),
      );

  static Widget semiBold18Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold18Primary(
          context,
        ),
      );

  static Widget semiBold18PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold18PrimaryInternal(
          context,
        ),
      );

  static Widget semiBold18PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold18Primary(
          context,
        ),
      ),
    );
  }

  static Widget semiBold18PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold18PrimaryLight(
          context,
        ),
      );

  static Widget semiBold18PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold18PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold18PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold18PrimaryDark(
          context,
        ),
      );

  static Widget semiBold18PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold18PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold18Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold18Secondary(
          context,
        ),
      );

  static Widget semiBold18SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold18SecondaryInternal(
          context,
        ),
      );

  static Widget semiBold18SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold18Secondary(
          context,
        ),
      ),
    );
  }

  static Widget semiBold18SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold18SecondaryLight(
          context,
        ),
      );

  static Widget semiBold18SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold18SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold18SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold18SecondaryDark(
          context,
        ),
      );

  static Widget semiBold18SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold18SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold18Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold18Accent(
          context,
        ),
      );

  static Widget semiBold18AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold18AccentInternal(
          context,
        ),
      );

  static Widget semiBold18AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold18Accent(
          context,
        ),
      ),
    );
  }

  static Widget semiBold18AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold18AccentLight(
          context,
        ),
      );

  static Widget semiBold18AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold18AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold18AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold18AccentDark(
          context,
        ),
      );

  static Widget semiBold18AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold18AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold18Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold18Grey(
          context,
        ),
      );

  static Widget semiBold18GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold18Grey(
          context,
        ),
      ),
    );
  }

  static Widget semiBold18GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold18GreyLight(
          context,
        ),
      );

  static Widget semiBold18GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold18GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold18GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold18GreyDark(
          context,
        ),
      );

  static Widget semiBold18GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold18GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold18Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold18Info(
          context,
        ),
      );

  static Widget semiBold18InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold18Info(
          context,
        ),
      ),
    );
  }

  static Widget semiBold18InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold18InfoLight(
          context,
        ),
      );

  static Widget semiBold18InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold18InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold18InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold18InfoDark(
          context,
        ),
      );

  static Widget semiBold18InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold18InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold18Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold18Success(
          context,
        ),
      );

  static Widget semiBold18SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold18Success(
          context,
        ),
      ),
    );
  }

  static Widget semiBold18SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold18SuccessLight(
          context,
        ),
      );

  static Widget semiBold18SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold18SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold18SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold18SuccessDark(
          context,
        ),
      );

  static Widget semiBold18SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold18SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold18Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold18Warning(
          context,
        ),
      );

  static Widget semiBold18WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold18Warning(
          context,
        ),
      ),
    );
  }

  static Widget semiBold18WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold18WarningLight(
          context,
        ),
      );

  static Widget semiBold18WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold18WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold18WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold18WarningDark(
          context,
        ),
      );

  static Widget semiBold18WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold18WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold18Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold18Danger(
          context,
        ),
      );

  static Widget semiBold18DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold18Danger(
          context,
        ),
      ),
    );
  }

  static Widget semiBold18DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold18DangerLight(
          context,
        ),
      );

  static Widget semiBold18DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold18DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold18DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold18DangerDark(
          context,
        ),
      );

  static Widget semiBold18DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold18DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold19White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold19White(
          context,
        ),
      );

  static Widget semiBold19WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold19WhiteAlways(
          context,
        ),
      );

  static Widget semiBold19Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold19Black(
          context,
        ),
      );

  static Widget semiBold19BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold19BlackAlways(
          context,
        ),
      );

  static Widget semiBold19Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold19Primary(
          context,
        ),
      );

  static Widget semiBold19PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold19PrimaryInternal(
          context,
        ),
      );

  static Widget semiBold19PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold19Primary(
          context,
        ),
      ),
    );
  }

  static Widget semiBold19PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold19PrimaryLight(
          context,
        ),
      );

  static Widget semiBold19PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold19PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold19PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold19PrimaryDark(
          context,
        ),
      );

  static Widget semiBold19PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold19PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold19Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold19Secondary(
          context,
        ),
      );

  static Widget semiBold19SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold19SecondaryInternal(
          context,
        ),
      );

  static Widget semiBold19SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold19Secondary(
          context,
        ),
      ),
    );
  }

  static Widget semiBold19SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold19SecondaryLight(
          context,
        ),
      );

  static Widget semiBold19SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold19SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold19SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold19SecondaryDark(
          context,
        ),
      );

  static Widget semiBold19SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold19SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold19Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold19Accent(
          context,
        ),
      );

  static Widget semiBold19AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold19AccentInternal(
          context,
        ),
      );

  static Widget semiBold19AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold19Accent(
          context,
        ),
      ),
    );
  }

  static Widget semiBold19AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold19AccentLight(
          context,
        ),
      );

  static Widget semiBold19AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold19AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold19AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold19AccentDark(
          context,
        ),
      );

  static Widget semiBold19AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold19AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold19Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold19Grey(
          context,
        ),
      );

  static Widget semiBold19GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold19Grey(
          context,
        ),
      ),
    );
  }

  static Widget semiBold19GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold19GreyLight(
          context,
        ),
      );

  static Widget semiBold19GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold19GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold19GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold19GreyDark(
          context,
        ),
      );

  static Widget semiBold19GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold19GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold19Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold19Info(
          context,
        ),
      );

  static Widget semiBold19InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold19Info(
          context,
        ),
      ),
    );
  }

  static Widget semiBold19InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold19InfoLight(
          context,
        ),
      );

  static Widget semiBold19InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold19InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold19InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold19InfoDark(
          context,
        ),
      );

  static Widget semiBold19InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold19InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold19Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold19Success(
          context,
        ),
      );

  static Widget semiBold19SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold19Success(
          context,
        ),
      ),
    );
  }

  static Widget semiBold19SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold19SuccessLight(
          context,
        ),
      );

  static Widget semiBold19SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold19SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold19SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold19SuccessDark(
          context,
        ),
      );

  static Widget semiBold19SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold19SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold19Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold19Warning(
          context,
        ),
      );

  static Widget semiBold19WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold19Warning(
          context,
        ),
      ),
    );
  }

  static Widget semiBold19WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold19WarningLight(
          context,
        ),
      );

  static Widget semiBold19WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold19WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold19WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold19WarningDark(
          context,
        ),
      );

  static Widget semiBold19WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold19WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold19Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold19Danger(
          context,
        ),
      );

  static Widget semiBold19DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold19Danger(
          context,
        ),
      ),
    );
  }

  static Widget semiBold19DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold19DangerLight(
          context,
        ),
      );

  static Widget semiBold19DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold19DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold19DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold19DangerDark(
          context,
        ),
      );

  static Widget semiBold19DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold19DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold20White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold20White(
          context,
        ),
      );

  static Widget semiBold20WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold20WhiteAlways(
          context,
        ),
      );

  static Widget semiBold20Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold20Black(
          context,
        ),
      );

  static Widget semiBold20BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold20BlackAlways(
          context,
        ),
      );

  static Widget semiBold20Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold20Primary(
          context,
        ),
      );

  static Widget semiBold20PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold20PrimaryInternal(
          context,
        ),
      );

  static Widget semiBold20PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold20Primary(
          context,
        ),
      ),
    );
  }

  static Widget semiBold20PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold20PrimaryLight(
          context,
        ),
      );

  static Widget semiBold20PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold20PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold20PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold20PrimaryDark(
          context,
        ),
      );

  static Widget semiBold20PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold20PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold20Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold20Secondary(
          context,
        ),
      );

  static Widget semiBold20SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold20SecondaryInternal(
          context,
        ),
      );

  static Widget semiBold20SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold20Secondary(
          context,
        ),
      ),
    );
  }

  static Widget semiBold20SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold20SecondaryLight(
          context,
        ),
      );

  static Widget semiBold20SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold20SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold20SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold20SecondaryDark(
          context,
        ),
      );

  static Widget semiBold20SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold20SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold20Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold20Accent(
          context,
        ),
      );

  static Widget semiBold20AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold20AccentInternal(
          context,
        ),
      );

  static Widget semiBold20AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold20Accent(
          context,
        ),
      ),
    );
  }

  static Widget semiBold20AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold20AccentLight(
          context,
        ),
      );

  static Widget semiBold20AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold20AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold20AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold20AccentDark(
          context,
        ),
      );

  static Widget semiBold20AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold20AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold20Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold20Grey(
          context,
        ),
      );

  static Widget semiBold20GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold20Grey(
          context,
        ),
      ),
    );
  }

  static Widget semiBold20GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold20GreyLight(
          context,
        ),
      );

  static Widget semiBold20GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold20GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold20GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold20GreyDark(
          context,
        ),
      );

  static Widget semiBold20GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold20GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold20Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold20Info(
          context,
        ),
      );

  static Widget semiBold20InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold20Info(
          context,
        ),
      ),
    );
  }

  static Widget semiBold20InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold20InfoLight(
          context,
        ),
      );

  static Widget semiBold20InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold20InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold20InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold20InfoDark(
          context,
        ),
      );

  static Widget semiBold20InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold20InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold20Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold20Success(
          context,
        ),
      );

  static Widget semiBold20SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold20Success(
          context,
        ),
      ),
    );
  }

  static Widget semiBold20SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold20SuccessLight(
          context,
        ),
      );

  static Widget semiBold20SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold20SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold20SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold20SuccessDark(
          context,
        ),
      );

  static Widget semiBold20SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold20SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold20Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold20Warning(
          context,
        ),
      );

  static Widget semiBold20WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold20Warning(
          context,
        ),
      ),
    );
  }

  static Widget semiBold20WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold20WarningLight(
          context,
        ),
      );

  static Widget semiBold20WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold20WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold20WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold20WarningDark(
          context,
        ),
      );

  static Widget semiBold20WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold20WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold20Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold20Danger(
          context,
        ),
      );

  static Widget semiBold20DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold20Danger(
          context,
        ),
      ),
    );
  }

  static Widget semiBold20DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold20DangerLight(
          context,
        ),
      );

  static Widget semiBold20DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold20DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold20DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold20DangerDark(
          context,
        ),
      );

  static Widget semiBold20DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold20DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold22White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold22White(
          context,
        ),
      );

  static Widget semiBold22WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold22WhiteAlways(
          context,
        ),
      );

  static Widget semiBold22Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold22Black(
          context,
        ),
      );

  static Widget semiBold22BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold22BlackAlways(
          context,
        ),
      );

  static Widget semiBold22Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold22Primary(
          context,
        ),
      );

  static Widget semiBold22PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold22PrimaryInternal(
          context,
        ),
      );

  static Widget semiBold22PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold22Primary(
          context,
        ),
      ),
    );
  }

  static Widget semiBold22PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold22PrimaryLight(
          context,
        ),
      );

  static Widget semiBold22PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold22PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold22PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold22PrimaryDark(
          context,
        ),
      );

  static Widget semiBold22PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold22PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold22Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold22Secondary(
          context,
        ),
      );

  static Widget semiBold22SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold22SecondaryInternal(
          context,
        ),
      );

  static Widget semiBold22SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold22Secondary(
          context,
        ),
      ),
    );
  }

  static Widget semiBold22SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold22SecondaryLight(
          context,
        ),
      );

  static Widget semiBold22SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold22SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold22SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold22SecondaryDark(
          context,
        ),
      );

  static Widget semiBold22SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold22SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold22Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold22Accent(
          context,
        ),
      );

  static Widget semiBold22AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold22AccentInternal(
          context,
        ),
      );

  static Widget semiBold22AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold22Accent(
          context,
        ),
      ),
    );
  }

  static Widget semiBold22AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold22AccentLight(
          context,
        ),
      );

  static Widget semiBold22AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold22AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold22AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold22AccentDark(
          context,
        ),
      );

  static Widget semiBold22AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold22AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold22Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold22Grey(
          context,
        ),
      );

  static Widget semiBold22GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold22Grey(
          context,
        ),
      ),
    );
  }

  static Widget semiBold22GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold22GreyLight(
          context,
        ),
      );

  static Widget semiBold22GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold22GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold22GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold22GreyDark(
          context,
        ),
      );

  static Widget semiBold22GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold22GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold22Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold22Info(
          context,
        ),
      );

  static Widget semiBold22InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold22Info(
          context,
        ),
      ),
    );
  }

  static Widget semiBold22InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold22InfoLight(
          context,
        ),
      );

  static Widget semiBold22InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold22InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold22InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold22InfoDark(
          context,
        ),
      );

  static Widget semiBold22InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold22InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold22Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold22Success(
          context,
        ),
      );

  static Widget semiBold22SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold22Success(
          context,
        ),
      ),
    );
  }

  static Widget semiBold22SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold22SuccessLight(
          context,
        ),
      );

  static Widget semiBold22SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold22SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold22SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold22SuccessDark(
          context,
        ),
      );

  static Widget semiBold22SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold22SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold22Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold22Warning(
          context,
        ),
      );

  static Widget semiBold22WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold22Warning(
          context,
        ),
      ),
    );
  }

  static Widget semiBold22WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold22WarningLight(
          context,
        ),
      );

  static Widget semiBold22WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold22WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold22WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold22WarningDark(
          context,
        ),
      );

  static Widget semiBold22WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold22WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold22Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold22Danger(
          context,
        ),
      );

  static Widget semiBold22DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold22Danger(
          context,
        ),
      ),
    );
  }

  static Widget semiBold22DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold22DangerLight(
          context,
        ),
      );

  static Widget semiBold22DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold22DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold22DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold22DangerDark(
          context,
        ),
      );

  static Widget semiBold22DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold22DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold24White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold24White(
          context,
        ),
      );

  static Widget semiBold24WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold24WhiteAlways(
          context,
        ),
      );

  static Widget semiBold24Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold24Black(
          context,
        ),
      );

  static Widget semiBold24BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold24BlackAlways(
          context,
        ),
      );

  static Widget semiBold24Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold24Primary(
          context,
        ),
      );

  static Widget semiBold24PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold24PrimaryInternal(
          context,
        ),
      );

  static Widget semiBold24PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold24Primary(
          context,
        ),
      ),
    );
  }

  static Widget semiBold24PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold24PrimaryLight(
          context,
        ),
      );

  static Widget semiBold24PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold24PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold24PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold24PrimaryDark(
          context,
        ),
      );

  static Widget semiBold24PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold24PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold24Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold24Secondary(
          context,
        ),
      );

  static Widget semiBold24SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold24SecondaryInternal(
          context,
        ),
      );

  static Widget semiBold24SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold24Secondary(
          context,
        ),
      ),
    );
  }

  static Widget semiBold24SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold24SecondaryLight(
          context,
        ),
      );

  static Widget semiBold24SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold24SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold24SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold24SecondaryDark(
          context,
        ),
      );

  static Widget semiBold24SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold24SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold24Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold24Accent(
          context,
        ),
      );

  static Widget semiBold24AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold24AccentInternal(
          context,
        ),
      );

  static Widget semiBold24AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold24Accent(
          context,
        ),
      ),
    );
  }

  static Widget semiBold24AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold24AccentLight(
          context,
        ),
      );

  static Widget semiBold24AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold24AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold24AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold24AccentDark(
          context,
        ),
      );

  static Widget semiBold24AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold24AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold24Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold24Grey(
          context,
        ),
      );

  static Widget semiBold24GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold24Grey(
          context,
        ),
      ),
    );
  }

  static Widget semiBold24GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold24GreyLight(
          context,
        ),
      );

  static Widget semiBold24GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold24GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold24GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold24GreyDark(
          context,
        ),
      );

  static Widget semiBold24GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold24GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold24Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold24Info(
          context,
        ),
      );

  static Widget semiBold24InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold24Info(
          context,
        ),
      ),
    );
  }

  static Widget semiBold24InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold24InfoLight(
          context,
        ),
      );

  static Widget semiBold24InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold24InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold24InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold24InfoDark(
          context,
        ),
      );

  static Widget semiBold24InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold24InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold24Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold24Success(
          context,
        ),
      );

  static Widget semiBold24SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold24Success(
          context,
        ),
      ),
    );
  }

  static Widget semiBold24SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold24SuccessLight(
          context,
        ),
      );

  static Widget semiBold24SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold24SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold24SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold24SuccessDark(
          context,
        ),
      );

  static Widget semiBold24SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold24SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold24Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold24Warning(
          context,
        ),
      );

  static Widget semiBold24WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold24Warning(
          context,
        ),
      ),
    );
  }

  static Widget semiBold24WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold24WarningLight(
          context,
        ),
      );

  static Widget semiBold24WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold24WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold24WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold24WarningDark(
          context,
        ),
      );

  static Widget semiBold24WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold24WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold24Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold24Danger(
          context,
        ),
      );

  static Widget semiBold24DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold24Danger(
          context,
        ),
      ),
    );
  }

  static Widget semiBold24DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold24DangerLight(
          context,
        ),
      );

  static Widget semiBold24DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold24DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold24DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold24DangerDark(
          context,
        ),
      );

  static Widget semiBold24DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold24DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold26White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold26White(
          context,
        ),
      );

  static Widget semiBold26WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold26WhiteAlways(
          context,
        ),
      );

  static Widget semiBold26Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold26Black(
          context,
        ),
      );

  static Widget semiBold26BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold26BlackAlways(
          context,
        ),
      );

  static Widget semiBold26Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold26Primary(
          context,
        ),
      );

  static Widget semiBold26PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold26PrimaryInternal(
          context,
        ),
      );

  static Widget semiBold26PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold26Primary(
          context,
        ),
      ),
    );
  }

  static Widget semiBold26PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold26PrimaryLight(
          context,
        ),
      );

  static Widget semiBold26PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold26PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold26PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold26PrimaryDark(
          context,
        ),
      );

  static Widget semiBold26PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold26PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold26Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold26Secondary(
          context,
        ),
      );

  static Widget semiBold26SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold26SecondaryInternal(
          context,
        ),
      );

  static Widget semiBold26SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold26Secondary(
          context,
        ),
      ),
    );
  }

  static Widget semiBold26SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold26SecondaryLight(
          context,
        ),
      );

  static Widget semiBold26SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold26SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold26SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold26SecondaryDark(
          context,
        ),
      );

  static Widget semiBold26SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold26SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold26Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold26Accent(
          context,
        ),
      );

  static Widget semiBold26AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold26AccentInternal(
          context,
        ),
      );

  static Widget semiBold26AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold26Accent(
          context,
        ),
      ),
    );
  }

  static Widget semiBold26AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold26AccentLight(
          context,
        ),
      );

  static Widget semiBold26AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold26AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold26AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold26AccentDark(
          context,
        ),
      );

  static Widget semiBold26AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold26AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold26Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold26Grey(
          context,
        ),
      );

  static Widget semiBold26GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold26Grey(
          context,
        ),
      ),
    );
  }

  static Widget semiBold26GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold26GreyLight(
          context,
        ),
      );

  static Widget semiBold26GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold26GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold26GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold26GreyDark(
          context,
        ),
      );

  static Widget semiBold26GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold26GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold26Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold26Info(
          context,
        ),
      );

  static Widget semiBold26InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold26Info(
          context,
        ),
      ),
    );
  }

  static Widget semiBold26InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold26InfoLight(
          context,
        ),
      );

  static Widget semiBold26InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold26InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold26InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold26InfoDark(
          context,
        ),
      );

  static Widget semiBold26InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold26InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold26Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold26Success(
          context,
        ),
      );

  static Widget semiBold26SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold26Success(
          context,
        ),
      ),
    );
  }

  static Widget semiBold26SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold26SuccessLight(
          context,
        ),
      );

  static Widget semiBold26SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold26SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold26SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold26SuccessDark(
          context,
        ),
      );

  static Widget semiBold26SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold26SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold26Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold26Warning(
          context,
        ),
      );

  static Widget semiBold26WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold26Warning(
          context,
        ),
      ),
    );
  }

  static Widget semiBold26WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold26WarningLight(
          context,
        ),
      );

  static Widget semiBold26WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold26WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold26WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold26WarningDark(
          context,
        ),
      );

  static Widget semiBold26WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold26WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold26Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold26Danger(
          context,
        ),
      );

  static Widget semiBold26DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold26Danger(
          context,
        ),
      ),
    );
  }

  static Widget semiBold26DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold26DangerLight(
          context,
        ),
      );

  static Widget semiBold26DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold26DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold26DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold26DangerDark(
          context,
        ),
      );

  static Widget semiBold26DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold26DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold28White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold28White(
          context,
        ),
      );

  static Widget semiBold28WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold28WhiteAlways(
          context,
        ),
      );

  static Widget semiBold28Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold28Black(
          context,
        ),
      );

  static Widget semiBold28BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold28BlackAlways(
          context,
        ),
      );

  static Widget semiBold28Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold28Primary(
          context,
        ),
      );

  static Widget semiBold28PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold28PrimaryInternal(
          context,
        ),
      );

  static Widget semiBold28PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold28Primary(
          context,
        ),
      ),
    );
  }

  static Widget semiBold28PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold28PrimaryLight(
          context,
        ),
      );

  static Widget semiBold28PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold28PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold28PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold28PrimaryDark(
          context,
        ),
      );

  static Widget semiBold28PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold28PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold28Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold28Secondary(
          context,
        ),
      );

  static Widget semiBold28SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold28SecondaryInternal(
          context,
        ),
      );

  static Widget semiBold28SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold28Secondary(
          context,
        ),
      ),
    );
  }

  static Widget semiBold28SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold28SecondaryLight(
          context,
        ),
      );

  static Widget semiBold28SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold28SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold28SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold28SecondaryDark(
          context,
        ),
      );

  static Widget semiBold28SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold28SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold28Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold28Accent(
          context,
        ),
      );

  static Widget semiBold28AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold28AccentInternal(
          context,
        ),
      );

  static Widget semiBold28AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold28Accent(
          context,
        ),
      ),
    );
  }

  static Widget semiBold28AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold28AccentLight(
          context,
        ),
      );

  static Widget semiBold28AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold28AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold28AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold28AccentDark(
          context,
        ),
      );

  static Widget semiBold28AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold28AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold28Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold28Grey(
          context,
        ),
      );

  static Widget semiBold28GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold28Grey(
          context,
        ),
      ),
    );
  }

  static Widget semiBold28GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold28GreyLight(
          context,
        ),
      );

  static Widget semiBold28GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold28GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold28GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold28GreyDark(
          context,
        ),
      );

  static Widget semiBold28GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold28GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold28Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold28Info(
          context,
        ),
      );

  static Widget semiBold28InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold28Info(
          context,
        ),
      ),
    );
  }

  static Widget semiBold28InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold28InfoLight(
          context,
        ),
      );

  static Widget semiBold28InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold28InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold28InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold28InfoDark(
          context,
        ),
      );

  static Widget semiBold28InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold28InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold28Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold28Success(
          context,
        ),
      );

  static Widget semiBold28SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold28Success(
          context,
        ),
      ),
    );
  }

  static Widget semiBold28SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold28SuccessLight(
          context,
        ),
      );

  static Widget semiBold28SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold28SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold28SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold28SuccessDark(
          context,
        ),
      );

  static Widget semiBold28SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold28SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold28Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold28Warning(
          context,
        ),
      );

  static Widget semiBold28WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold28Warning(
          context,
        ),
      ),
    );
  }

  static Widget semiBold28WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold28WarningLight(
          context,
        ),
      );

  static Widget semiBold28WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold28WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold28WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold28WarningDark(
          context,
        ),
      );

  static Widget semiBold28WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold28WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold28Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold28Danger(
          context,
        ),
      );

  static Widget semiBold28DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold28Danger(
          context,
        ),
      ),
    );
  }

  static Widget semiBold28DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold28DangerLight(
          context,
        ),
      );

  static Widget semiBold28DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold28DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold28DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold28DangerDark(
          context,
        ),
      );

  static Widget semiBold28DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold28DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold32White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold32White(
          context,
        ),
      );

  static Widget semiBold32WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold32WhiteAlways(
          context,
        ),
      );

  static Widget semiBold32Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold32Black(
          context,
        ),
      );

  static Widget semiBold32BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold32BlackAlways(
          context,
        ),
      );

  static Widget semiBold32Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold32Primary(
          context,
        ),
      );

  static Widget semiBold32PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold32PrimaryInternal(
          context,
        ),
      );

  static Widget semiBold32PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold32Primary(
          context,
        ),
      ),
    );
  }

  static Widget semiBold32PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold32PrimaryLight(
          context,
        ),
      );

  static Widget semiBold32PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold32PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold32PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold32PrimaryDark(
          context,
        ),
      );

  static Widget semiBold32PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold32PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold32Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold32Secondary(
          context,
        ),
      );

  static Widget semiBold32SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold32SecondaryInternal(
          context,
        ),
      );

  static Widget semiBold32SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold32Secondary(
          context,
        ),
      ),
    );
  }

  static Widget semiBold32SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold32SecondaryLight(
          context,
        ),
      );

  static Widget semiBold32SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold32SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold32SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold32SecondaryDark(
          context,
        ),
      );

  static Widget semiBold32SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold32SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold32Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold32Accent(
          context,
        ),
      );

  static Widget semiBold32AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold32AccentInternal(
          context,
        ),
      );

  static Widget semiBold32AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold32Accent(
          context,
        ),
      ),
    );
  }

  static Widget semiBold32AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold32AccentLight(
          context,
        ),
      );

  static Widget semiBold32AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold32AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold32AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold32AccentDark(
          context,
        ),
      );

  static Widget semiBold32AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold32AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold32Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold32Grey(
          context,
        ),
      );

  static Widget semiBold32GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold32Grey(
          context,
        ),
      ),
    );
  }

  static Widget semiBold32GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold32GreyLight(
          context,
        ),
      );

  static Widget semiBold32GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold32GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold32GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold32GreyDark(
          context,
        ),
      );

  static Widget semiBold32GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold32GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold32Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold32Info(
          context,
        ),
      );

  static Widget semiBold32InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold32Info(
          context,
        ),
      ),
    );
  }

  static Widget semiBold32InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold32InfoLight(
          context,
        ),
      );

  static Widget semiBold32InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold32InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold32InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold32InfoDark(
          context,
        ),
      );

  static Widget semiBold32InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold32InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold32Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold32Success(
          context,
        ),
      );

  static Widget semiBold32SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold32Success(
          context,
        ),
      ),
    );
  }

  static Widget semiBold32SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold32SuccessLight(
          context,
        ),
      );

  static Widget semiBold32SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold32SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold32SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold32SuccessDark(
          context,
        ),
      );

  static Widget semiBold32SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold32SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold32Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold32Warning(
          context,
        ),
      );

  static Widget semiBold32WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold32Warning(
          context,
        ),
      ),
    );
  }

  static Widget semiBold32WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold32WarningLight(
          context,
        ),
      );

  static Widget semiBold32WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold32WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold32WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold32WarningDark(
          context,
        ),
      );

  static Widget semiBold32WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold32WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget semiBold32Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold32Danger(
          context,
        ),
      );

  static Widget semiBold32DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold32Danger(
          context,
        ),
      ),
    );
  }

  static Widget semiBold32DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold32DangerLight(
          context,
        ),
      );

  static Widget semiBold32DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold32DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget semiBold32DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold32DangerDark(
          context,
        ),
      );

  static Widget semiBold32DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.semiBold32DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget bold10White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold10White(
          context,
        ),
      );

  static Widget bold10WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold10WhiteAlways(
          context,
        ),
      );

  static Widget bold10Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold10Black(
          context,
        ),
      );

  static Widget bold10BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold10BlackAlways(
          context,
        ),
      );

  static Widget bold10Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold10Primary(
          context,
        ),
      );

  static Widget bold10PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold10PrimaryInternal(
          context,
        ),
      );

  static Widget bold10PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold10Primary(
          context,
        ),
      ),
    );
  }

  static Widget bold10PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold10PrimaryLight(
          context,
        ),
      );

  static Widget bold10PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold10PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget bold10PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold10PrimaryDark(
          context,
        ),
      );

  static Widget bold10PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold10PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget bold10Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold10Secondary(
          context,
        ),
      );

  static Widget bold10SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold10SecondaryInternal(
          context,
        ),
      );

  static Widget bold10SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold10Secondary(
          context,
        ),
      ),
    );
  }

  static Widget bold10SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold10SecondaryLight(
          context,
        ),
      );

  static Widget bold10SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold10SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget bold10SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold10SecondaryDark(
          context,
        ),
      );

  static Widget bold10SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold10SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget bold10Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold10Accent(
          context,
        ),
      );

  static Widget bold10AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold10AccentInternal(
          context,
        ),
      );

  static Widget bold10AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold10Accent(
          context,
        ),
      ),
    );
  }

  static Widget bold10AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold10AccentLight(
          context,
        ),
      );

  static Widget bold10AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold10AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget bold10AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold10AccentDark(
          context,
        ),
      );

  static Widget bold10AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold10AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget bold10Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold10Grey(
          context,
        ),
      );

  static Widget bold10GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold10Grey(
          context,
        ),
      ),
    );
  }

  static Widget bold10GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold10GreyLight(
          context,
        ),
      );

  static Widget bold10GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold10GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget bold10GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold10GreyDark(
          context,
        ),
      );

  static Widget bold10GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold10GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget bold10Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold10Info(
          context,
        ),
      );

  static Widget bold10InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold10Info(
          context,
        ),
      ),
    );
  }

  static Widget bold10InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold10InfoLight(
          context,
        ),
      );

  static Widget bold10InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold10InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget bold10InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold10InfoDark(
          context,
        ),
      );

  static Widget bold10InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold10InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget bold10Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold10Success(
          context,
        ),
      );

  static Widget bold10SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold10Success(
          context,
        ),
      ),
    );
  }

  static Widget bold10SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold10SuccessLight(
          context,
        ),
      );

  static Widget bold10SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold10SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget bold10SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold10SuccessDark(
          context,
        ),
      );

  static Widget bold10SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold10SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget bold10Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold10Warning(
          context,
        ),
      );

  static Widget bold10WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold10Warning(
          context,
        ),
      ),
    );
  }

  static Widget bold10WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold10WarningLight(
          context,
        ),
      );

  static Widget bold10WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold10WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget bold10WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold10WarningDark(
          context,
        ),
      );

  static Widget bold10WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold10WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget bold10Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold10Danger(
          context,
        ),
      );

  static Widget bold10DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold10Danger(
          context,
        ),
      ),
    );
  }

  static Widget bold10DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold10DangerLight(
          context,
        ),
      );

  static Widget bold10DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold10DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget bold10DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold10DangerDark(
          context,
        ),
      );

  static Widget bold10DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold10DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget bold11White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold11White(
          context,
        ),
      );

  static Widget bold11WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold11WhiteAlways(
          context,
        ),
      );

  static Widget bold11Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold11Black(
          context,
        ),
      );

  static Widget bold11BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold11BlackAlways(
          context,
        ),
      );

  static Widget bold11Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold11Primary(
          context,
        ),
      );

  static Widget bold11PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold11PrimaryInternal(
          context,
        ),
      );

  static Widget bold11PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold11Primary(
          context,
        ),
      ),
    );
  }

  static Widget bold11PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold11PrimaryLight(
          context,
        ),
      );

  static Widget bold11PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold11PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget bold11PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold11PrimaryDark(
          context,
        ),
      );

  static Widget bold11PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold11PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget bold11Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold11Secondary(
          context,
        ),
      );

  static Widget bold11SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold11SecondaryInternal(
          context,
        ),
      );

  static Widget bold11SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold11Secondary(
          context,
        ),
      ),
    );
  }

  static Widget bold11SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold11SecondaryLight(
          context,
        ),
      );

  static Widget bold11SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold11SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget bold11SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold11SecondaryDark(
          context,
        ),
      );

  static Widget bold11SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold11SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget bold11Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold11Accent(
          context,
        ),
      );

  static Widget bold11AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold11AccentInternal(
          context,
        ),
      );

  static Widget bold11AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold11Accent(
          context,
        ),
      ),
    );
  }

  static Widget bold11AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold11AccentLight(
          context,
        ),
      );

  static Widget bold11AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold11AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget bold11AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold11AccentDark(
          context,
        ),
      );

  static Widget bold11AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold11AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget bold11Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold11Grey(
          context,
        ),
      );

  static Widget bold11GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold11Grey(
          context,
        ),
      ),
    );
  }

  static Widget bold11GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold11GreyLight(
          context,
        ),
      );

  static Widget bold11GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold11GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget bold11GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold11GreyDark(
          context,
        ),
      );

  static Widget bold11GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold11GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget bold11Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold11Info(
          context,
        ),
      );

  static Widget bold11InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold11Info(
          context,
        ),
      ),
    );
  }

  static Widget bold11InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold11InfoLight(
          context,
        ),
      );

  static Widget bold11InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold11InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget bold11InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold11InfoDark(
          context,
        ),
      );

  static Widget bold11InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold11InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget bold11Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold11Success(
          context,
        ),
      );

  static Widget bold11SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold11Success(
          context,
        ),
      ),
    );
  }

  static Widget bold11SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold11SuccessLight(
          context,
        ),
      );

  static Widget bold11SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold11SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget bold11SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold11SuccessDark(
          context,
        ),
      );

  static Widget bold11SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold11SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget bold11Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold11Warning(
          context,
        ),
      );

  static Widget bold11WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold11Warning(
          context,
        ),
      ),
    );
  }

  static Widget bold11WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold11WarningLight(
          context,
        ),
      );

  static Widget bold11WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold11WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget bold11WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold11WarningDark(
          context,
        ),
      );

  static Widget bold11WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold11WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget bold11Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold11Danger(
          context,
        ),
      );

  static Widget bold11DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold11Danger(
          context,
        ),
      ),
    );
  }

  static Widget bold11DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold11DangerLight(
          context,
        ),
      );

  static Widget bold11DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold11DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget bold11DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold11DangerDark(
          context,
        ),
      );

  static Widget bold11DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold11DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget bold12White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold12White(
          context,
        ),
      );

  static Widget bold12WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold12WhiteAlways(
          context,
        ),
      );

  static Widget bold12Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold12Black(
          context,
        ),
      );

  static Widget bold12BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold12BlackAlways(
          context,
        ),
      );

  static Widget bold12Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold12Primary(
          context,
        ),
      );

  static Widget bold12PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold12PrimaryInternal(
          context,
        ),
      );

  static Widget bold12PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold12Primary(
          context,
        ),
      ),
    );
  }

  static Widget bold12PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold12PrimaryLight(
          context,
        ),
      );

  static Widget bold12PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold12PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget bold12PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold12PrimaryDark(
          context,
        ),
      );

  static Widget bold12PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold12PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget bold12Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold12Secondary(
          context,
        ),
      );

  static Widget bold12SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold12SecondaryInternal(
          context,
        ),
      );

  static Widget bold12SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold12Secondary(
          context,
        ),
      ),
    );
  }

  static Widget bold12SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold12SecondaryLight(
          context,
        ),
      );

  static Widget bold12SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold12SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget bold12SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold12SecondaryDark(
          context,
        ),
      );

  static Widget bold12SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold12SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget bold12Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold12Accent(
          context,
        ),
      );

  static Widget bold12AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold12AccentInternal(
          context,
        ),
      );

  static Widget bold12AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold12Accent(
          context,
        ),
      ),
    );
  }

  static Widget bold12AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold12AccentLight(
          context,
        ),
      );

  static Widget bold12AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold12AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget bold12AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold12AccentDark(
          context,
        ),
      );

  static Widget bold12AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold12AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget bold12Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold12Grey(
          context,
        ),
      );

  static Widget bold12GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold12Grey(
          context,
        ),
      ),
    );
  }

  static Widget bold12GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold12GreyLight(
          context,
        ),
      );

  static Widget bold12GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold12GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget bold12GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold12GreyDark(
          context,
        ),
      );

  static Widget bold12GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold12GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget bold12Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold12Info(
          context,
        ),
      );

  static Widget bold12InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold12Info(
          context,
        ),
      ),
    );
  }

  static Widget bold12InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold12InfoLight(
          context,
        ),
      );

  static Widget bold12InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold12InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget bold12InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold12InfoDark(
          context,
        ),
      );

  static Widget bold12InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold12InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget bold12Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold12Success(
          context,
        ),
      );

  static Widget bold12SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold12Success(
          context,
        ),
      ),
    );
  }

  static Widget bold12SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold12SuccessLight(
          context,
        ),
      );

  static Widget bold12SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold12SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget bold12SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold12SuccessDark(
          context,
        ),
      );

  static Widget bold12SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold12SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget bold12Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold12Warning(
          context,
        ),
      );

  static Widget bold12WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold12Warning(
          context,
        ),
      ),
    );
  }

  static Widget bold12WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold12WarningLight(
          context,
        ),
      );

  static Widget bold12WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold12WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget bold12WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold12WarningDark(
          context,
        ),
      );

  static Widget bold12WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold12WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget bold12Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold12Danger(
          context,
        ),
      );

  static Widget bold12DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold12Danger(
          context,
        ),
      ),
    );
  }

  static Widget bold12DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold12DangerLight(
          context,
        ),
      );

  static Widget bold12DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold12DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget bold12DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold12DangerDark(
          context,
        ),
      );

  static Widget bold12DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold12DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget bold13White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold13White(
          context,
        ),
      );

  static Widget bold13WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold13WhiteAlways(
          context,
        ),
      );

  static Widget bold13Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold13Black(
          context,
        ),
      );

  static Widget bold13BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold13BlackAlways(
          context,
        ),
      );

  static Widget bold13Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold13Primary(
          context,
        ),
      );

  static Widget bold13PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold13PrimaryInternal(
          context,
        ),
      );

  static Widget bold13PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold13Primary(
          context,
        ),
      ),
    );
  }

  static Widget bold13PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold13PrimaryLight(
          context,
        ),
      );

  static Widget bold13PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold13PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget bold13PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold13PrimaryDark(
          context,
        ),
      );

  static Widget bold13PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold13PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget bold13Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold13Secondary(
          context,
        ),
      );

  static Widget bold13SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold13SecondaryInternal(
          context,
        ),
      );

  static Widget bold13SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold13Secondary(
          context,
        ),
      ),
    );
  }

  static Widget bold13SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold13SecondaryLight(
          context,
        ),
      );

  static Widget bold13SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold13SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget bold13SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold13SecondaryDark(
          context,
        ),
      );

  static Widget bold13SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold13SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget bold13Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold13Accent(
          context,
        ),
      );

  static Widget bold13AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold13AccentInternal(
          context,
        ),
      );

  static Widget bold13AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold13Accent(
          context,
        ),
      ),
    );
  }

  static Widget bold13AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold13AccentLight(
          context,
        ),
      );

  static Widget bold13AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold13AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget bold13AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold13AccentDark(
          context,
        ),
      );

  static Widget bold13AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold13AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget bold13Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold13Grey(
          context,
        ),
      );

  static Widget bold13GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold13Grey(
          context,
        ),
      ),
    );
  }

  static Widget bold13GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold13GreyLight(
          context,
        ),
      );

  static Widget bold13GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold13GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget bold13GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold13GreyDark(
          context,
        ),
      );

  static Widget bold13GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold13GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget bold13Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold13Info(
          context,
        ),
      );

  static Widget bold13InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold13Info(
          context,
        ),
      ),
    );
  }

  static Widget bold13InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold13InfoLight(
          context,
        ),
      );

  static Widget bold13InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold13InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget bold13InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold13InfoDark(
          context,
        ),
      );

  static Widget bold13InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold13InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget bold13Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold13Success(
          context,
        ),
      );

  static Widget bold13SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold13Success(
          context,
        ),
      ),
    );
  }

  static Widget bold13SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold13SuccessLight(
          context,
        ),
      );

  static Widget bold13SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold13SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget bold13SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold13SuccessDark(
          context,
        ),
      );

  static Widget bold13SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold13SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget bold13Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold13Warning(
          context,
        ),
      );

  static Widget bold13WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold13Warning(
          context,
        ),
      ),
    );
  }

  static Widget bold13WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold13WarningLight(
          context,
        ),
      );

  static Widget bold13WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold13WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget bold13WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold13WarningDark(
          context,
        ),
      );

  static Widget bold13WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold13WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget bold13Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold13Danger(
          context,
        ),
      );

  static Widget bold13DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold13Danger(
          context,
        ),
      ),
    );
  }

  static Widget bold13DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold13DangerLight(
          context,
        ),
      );

  static Widget bold13DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold13DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget bold13DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold13DangerDark(
          context,
        ),
      );

  static Widget bold13DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold13DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget bold14White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold14White(
          context,
        ),
      );

  static Widget bold14WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold14WhiteAlways(
          context,
        ),
      );

  static Widget bold14Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold14Black(
          context,
        ),
      );

  static Widget bold14BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold14BlackAlways(
          context,
        ),
      );

  static Widget bold14Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold14Primary(
          context,
        ),
      );

  static Widget bold14PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold14PrimaryInternal(
          context,
        ),
      );

  static Widget bold14PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold14Primary(
          context,
        ),
      ),
    );
  }

  static Widget bold14PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold14PrimaryLight(
          context,
        ),
      );

  static Widget bold14PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold14PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget bold14PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold14PrimaryDark(
          context,
        ),
      );

  static Widget bold14PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold14PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget bold14Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold14Secondary(
          context,
        ),
      );

  static Widget bold14SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold14SecondaryInternal(
          context,
        ),
      );

  static Widget bold14SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold14Secondary(
          context,
        ),
      ),
    );
  }

  static Widget bold14SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold14SecondaryLight(
          context,
        ),
      );

  static Widget bold14SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold14SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget bold14SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold14SecondaryDark(
          context,
        ),
      );

  static Widget bold14SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold14SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget bold14Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold14Accent(
          context,
        ),
      );

  static Widget bold14AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold14AccentInternal(
          context,
        ),
      );

  static Widget bold14AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold14Accent(
          context,
        ),
      ),
    );
  }

  static Widget bold14AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold14AccentLight(
          context,
        ),
      );

  static Widget bold14AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold14AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget bold14AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold14AccentDark(
          context,
        ),
      );

  static Widget bold14AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold14AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget bold14Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold14Grey(
          context,
        ),
      );

  static Widget bold14GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold14Grey(
          context,
        ),
      ),
    );
  }

  static Widget bold14GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold14GreyLight(
          context,
        ),
      );

  static Widget bold14GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold14GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget bold14GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold14GreyDark(
          context,
        ),
      );

  static Widget bold14GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold14GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget bold14Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold14Info(
          context,
        ),
      );

  static Widget bold14InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold14Info(
          context,
        ),
      ),
    );
  }

  static Widget bold14InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold14InfoLight(
          context,
        ),
      );

  static Widget bold14InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold14InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget bold14InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold14InfoDark(
          context,
        ),
      );

  static Widget bold14InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold14InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget bold14Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold14Success(
          context,
        ),
      );

  static Widget bold14SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold14Success(
          context,
        ),
      ),
    );
  }

  static Widget bold14SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold14SuccessLight(
          context,
        ),
      );

  static Widget bold14SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold14SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget bold14SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold14SuccessDark(
          context,
        ),
      );

  static Widget bold14SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold14SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget bold14Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold14Warning(
          context,
        ),
      );

  static Widget bold14WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold14Warning(
          context,
        ),
      ),
    );
  }

  static Widget bold14WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold14WarningLight(
          context,
        ),
      );

  static Widget bold14WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold14WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget bold14WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold14WarningDark(
          context,
        ),
      );

  static Widget bold14WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold14WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget bold14Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold14Danger(
          context,
        ),
      );

  static Widget bold14DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold14Danger(
          context,
        ),
      ),
    );
  }

  static Widget bold14DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold14DangerLight(
          context,
        ),
      );

  static Widget bold14DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold14DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget bold14DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold14DangerDark(
          context,
        ),
      );

  static Widget bold14DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold14DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget bold15White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold15White(
          context,
        ),
      );

  static Widget bold15WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold15WhiteAlways(
          context,
        ),
      );

  static Widget bold15Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold15Black(
          context,
        ),
      );

  static Widget bold15BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold15BlackAlways(
          context,
        ),
      );

  static Widget bold15Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold15Primary(
          context,
        ),
      );

  static Widget bold15PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold15PrimaryInternal(
          context,
        ),
      );

  static Widget bold15PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold15Primary(
          context,
        ),
      ),
    );
  }

  static Widget bold15PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold15PrimaryLight(
          context,
        ),
      );

  static Widget bold15PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold15PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget bold15PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold15PrimaryDark(
          context,
        ),
      );

  static Widget bold15PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold15PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget bold15Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold15Secondary(
          context,
        ),
      );

  static Widget bold15SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold15SecondaryInternal(
          context,
        ),
      );

  static Widget bold15SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold15Secondary(
          context,
        ),
      ),
    );
  }

  static Widget bold15SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold15SecondaryLight(
          context,
        ),
      );

  static Widget bold15SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold15SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget bold15SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold15SecondaryDark(
          context,
        ),
      );

  static Widget bold15SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold15SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget bold15Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold15Accent(
          context,
        ),
      );

  static Widget bold15AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold15AccentInternal(
          context,
        ),
      );

  static Widget bold15AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold15Accent(
          context,
        ),
      ),
    );
  }

  static Widget bold15AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold15AccentLight(
          context,
        ),
      );

  static Widget bold15AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold15AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget bold15AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold15AccentDark(
          context,
        ),
      );

  static Widget bold15AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold15AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget bold15Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold15Grey(
          context,
        ),
      );

  static Widget bold15GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold15Grey(
          context,
        ),
      ),
    );
  }

  static Widget bold15GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold15GreyLight(
          context,
        ),
      );

  static Widget bold15GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold15GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget bold15GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold15GreyDark(
          context,
        ),
      );

  static Widget bold15GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold15GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget bold15Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold15Info(
          context,
        ),
      );

  static Widget bold15InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold15Info(
          context,
        ),
      ),
    );
  }

  static Widget bold15InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold15InfoLight(
          context,
        ),
      );

  static Widget bold15InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold15InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget bold15InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold15InfoDark(
          context,
        ),
      );

  static Widget bold15InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold15InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget bold15Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold15Success(
          context,
        ),
      );

  static Widget bold15SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold15Success(
          context,
        ),
      ),
    );
  }

  static Widget bold15SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold15SuccessLight(
          context,
        ),
      );

  static Widget bold15SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold15SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget bold15SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold15SuccessDark(
          context,
        ),
      );

  static Widget bold15SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold15SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget bold15Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold15Warning(
          context,
        ),
      );

  static Widget bold15WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold15Warning(
          context,
        ),
      ),
    );
  }

  static Widget bold15WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold15WarningLight(
          context,
        ),
      );

  static Widget bold15WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold15WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget bold15WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold15WarningDark(
          context,
        ),
      );

  static Widget bold15WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold15WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget bold15Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold15Danger(
          context,
        ),
      );

  static Widget bold15DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold15Danger(
          context,
        ),
      ),
    );
  }

  static Widget bold15DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold15DangerLight(
          context,
        ),
      );

  static Widget bold15DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold15DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget bold15DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold15DangerDark(
          context,
        ),
      );

  static Widget bold15DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold15DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget bold16White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold16White(
          context,
        ),
      );

  static Widget bold16WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold16WhiteAlways(
          context,
        ),
      );

  static Widget bold16Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold16Black(
          context,
        ),
      );

  static Widget bold16BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold16BlackAlways(
          context,
        ),
      );

  static Widget bold16Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold16Primary(
          context,
        ),
      );

  static Widget bold16PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold16PrimaryInternal(
          context,
        ),
      );

  static Widget bold16PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold16Primary(
          context,
        ),
      ),
    );
  }

  static Widget bold16PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold16PrimaryLight(
          context,
        ),
      );

  static Widget bold16PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold16PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget bold16PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold16PrimaryDark(
          context,
        ),
      );

  static Widget bold16PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold16PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget bold16Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold16Secondary(
          context,
        ),
      );

  static Widget bold16SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold16SecondaryInternal(
          context,
        ),
      );

  static Widget bold16SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold16Secondary(
          context,
        ),
      ),
    );
  }

  static Widget bold16SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold16SecondaryLight(
          context,
        ),
      );

  static Widget bold16SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold16SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget bold16SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold16SecondaryDark(
          context,
        ),
      );

  static Widget bold16SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold16SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget bold16Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold16Accent(
          context,
        ),
      );

  static Widget bold16AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold16AccentInternal(
          context,
        ),
      );

  static Widget bold16AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold16Accent(
          context,
        ),
      ),
    );
  }

  static Widget bold16AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold16AccentLight(
          context,
        ),
      );

  static Widget bold16AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold16AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget bold16AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold16AccentDark(
          context,
        ),
      );

  static Widget bold16AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold16AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget bold16Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold16Grey(
          context,
        ),
      );

  static Widget bold16GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold16Grey(
          context,
        ),
      ),
    );
  }

  static Widget bold16GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold16GreyLight(
          context,
        ),
      );

  static Widget bold16GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold16GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget bold16GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold16GreyDark(
          context,
        ),
      );

  static Widget bold16GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold16GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget bold16Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold16Info(
          context,
        ),
      );

  static Widget bold16InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold16Info(
          context,
        ),
      ),
    );
  }

  static Widget bold16InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold16InfoLight(
          context,
        ),
      );

  static Widget bold16InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold16InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget bold16InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold16InfoDark(
          context,
        ),
      );

  static Widget bold16InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold16InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget bold16Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold16Success(
          context,
        ),
      );

  static Widget bold16SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold16Success(
          context,
        ),
      ),
    );
  }

  static Widget bold16SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold16SuccessLight(
          context,
        ),
      );

  static Widget bold16SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold16SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget bold16SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold16SuccessDark(
          context,
        ),
      );

  static Widget bold16SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold16SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget bold16Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold16Warning(
          context,
        ),
      );

  static Widget bold16WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold16Warning(
          context,
        ),
      ),
    );
  }

  static Widget bold16WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold16WarningLight(
          context,
        ),
      );

  static Widget bold16WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold16WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget bold16WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold16WarningDark(
          context,
        ),
      );

  static Widget bold16WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold16WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget bold16Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold16Danger(
          context,
        ),
      );

  static Widget bold16DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold16Danger(
          context,
        ),
      ),
    );
  }

  static Widget bold16DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold16DangerLight(
          context,
        ),
      );

  static Widget bold16DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold16DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget bold16DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold16DangerDark(
          context,
        ),
      );

  static Widget bold16DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold16DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget bold17White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold17White(
          context,
        ),
      );

  static Widget bold17WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold17WhiteAlways(
          context,
        ),
      );

  static Widget bold17Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold17Black(
          context,
        ),
      );

  static Widget bold17BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold17BlackAlways(
          context,
        ),
      );

  static Widget bold17Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold17Primary(
          context,
        ),
      );

  static Widget bold17PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold17PrimaryInternal(
          context,
        ),
      );

  static Widget bold17PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold17Primary(
          context,
        ),
      ),
    );
  }

  static Widget bold17PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold17PrimaryLight(
          context,
        ),
      );

  static Widget bold17PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold17PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget bold17PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold17PrimaryDark(
          context,
        ),
      );

  static Widget bold17PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold17PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget bold17Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold17Secondary(
          context,
        ),
      );

  static Widget bold17SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold17SecondaryInternal(
          context,
        ),
      );

  static Widget bold17SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold17Secondary(
          context,
        ),
      ),
    );
  }

  static Widget bold17SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold17SecondaryLight(
          context,
        ),
      );

  static Widget bold17SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold17SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget bold17SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold17SecondaryDark(
          context,
        ),
      );

  static Widget bold17SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold17SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget bold17Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold17Accent(
          context,
        ),
      );

  static Widget bold17AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold17AccentInternal(
          context,
        ),
      );

  static Widget bold17AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold17Accent(
          context,
        ),
      ),
    );
  }

  static Widget bold17AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold17AccentLight(
          context,
        ),
      );

  static Widget bold17AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold17AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget bold17AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold17AccentDark(
          context,
        ),
      );

  static Widget bold17AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold17AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget bold17Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold17Grey(
          context,
        ),
      );

  static Widget bold17GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold17Grey(
          context,
        ),
      ),
    );
  }

  static Widget bold17GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold17GreyLight(
          context,
        ),
      );

  static Widget bold17GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold17GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget bold17GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold17GreyDark(
          context,
        ),
      );

  static Widget bold17GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold17GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget bold17Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold17Info(
          context,
        ),
      );

  static Widget bold17InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold17Info(
          context,
        ),
      ),
    );
  }

  static Widget bold17InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold17InfoLight(
          context,
        ),
      );

  static Widget bold17InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold17InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget bold17InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold17InfoDark(
          context,
        ),
      );

  static Widget bold17InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold17InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget bold17Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold17Success(
          context,
        ),
      );

  static Widget bold17SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold17Success(
          context,
        ),
      ),
    );
  }

  static Widget bold17SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold17SuccessLight(
          context,
        ),
      );

  static Widget bold17SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold17SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget bold17SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold17SuccessDark(
          context,
        ),
      );

  static Widget bold17SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold17SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget bold17Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold17Warning(
          context,
        ),
      );

  static Widget bold17WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold17Warning(
          context,
        ),
      ),
    );
  }

  static Widget bold17WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold17WarningLight(
          context,
        ),
      );

  static Widget bold17WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold17WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget bold17WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold17WarningDark(
          context,
        ),
      );

  static Widget bold17WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold17WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget bold17Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold17Danger(
          context,
        ),
      );

  static Widget bold17DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold17Danger(
          context,
        ),
      ),
    );
  }

  static Widget bold17DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold17DangerLight(
          context,
        ),
      );

  static Widget bold17DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold17DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget bold17DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold17DangerDark(
          context,
        ),
      );

  static Widget bold17DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold17DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget bold18White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold18White(
          context,
        ),
      );

  static Widget bold18WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold18WhiteAlways(
          context,
        ),
      );

  static Widget bold18Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold18Black(
          context,
        ),
      );

  static Widget bold18BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold18BlackAlways(
          context,
        ),
      );

  static Widget bold18Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold18Primary(
          context,
        ),
      );

  static Widget bold18PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold18PrimaryInternal(
          context,
        ),
      );

  static Widget bold18PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold18Primary(
          context,
        ),
      ),
    );
  }

  static Widget bold18PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold18PrimaryLight(
          context,
        ),
      );

  static Widget bold18PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold18PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget bold18PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold18PrimaryDark(
          context,
        ),
      );

  static Widget bold18PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold18PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget bold18Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold18Secondary(
          context,
        ),
      );

  static Widget bold18SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold18SecondaryInternal(
          context,
        ),
      );

  static Widget bold18SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold18Secondary(
          context,
        ),
      ),
    );
  }

  static Widget bold18SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold18SecondaryLight(
          context,
        ),
      );

  static Widget bold18SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold18SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget bold18SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold18SecondaryDark(
          context,
        ),
      );

  static Widget bold18SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold18SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget bold18Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold18Accent(
          context,
        ),
      );

  static Widget bold18AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold18AccentInternal(
          context,
        ),
      );

  static Widget bold18AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold18Accent(
          context,
        ),
      ),
    );
  }

  static Widget bold18AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold18AccentLight(
          context,
        ),
      );

  static Widget bold18AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold18AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget bold18AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold18AccentDark(
          context,
        ),
      );

  static Widget bold18AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold18AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget bold18Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold18Grey(
          context,
        ),
      );

  static Widget bold18GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold18Grey(
          context,
        ),
      ),
    );
  }

  static Widget bold18GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold18GreyLight(
          context,
        ),
      );

  static Widget bold18GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold18GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget bold18GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold18GreyDark(
          context,
        ),
      );

  static Widget bold18GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold18GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget bold18Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold18Info(
          context,
        ),
      );

  static Widget bold18InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold18Info(
          context,
        ),
      ),
    );
  }

  static Widget bold18InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold18InfoLight(
          context,
        ),
      );

  static Widget bold18InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold18InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget bold18InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold18InfoDark(
          context,
        ),
      );

  static Widget bold18InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold18InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget bold18Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold18Success(
          context,
        ),
      );

  static Widget bold18SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold18Success(
          context,
        ),
      ),
    );
  }

  static Widget bold18SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold18SuccessLight(
          context,
        ),
      );

  static Widget bold18SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold18SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget bold18SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold18SuccessDark(
          context,
        ),
      );

  static Widget bold18SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold18SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget bold18Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold18Warning(
          context,
        ),
      );

  static Widget bold18WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold18Warning(
          context,
        ),
      ),
    );
  }

  static Widget bold18WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold18WarningLight(
          context,
        ),
      );

  static Widget bold18WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold18WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget bold18WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold18WarningDark(
          context,
        ),
      );

  static Widget bold18WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold18WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget bold18Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold18Danger(
          context,
        ),
      );

  static Widget bold18DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold18Danger(
          context,
        ),
      ),
    );
  }

  static Widget bold18DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold18DangerLight(
          context,
        ),
      );

  static Widget bold18DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold18DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget bold18DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold18DangerDark(
          context,
        ),
      );

  static Widget bold18DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold18DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget bold19White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold19White(
          context,
        ),
      );

  static Widget bold19WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold19WhiteAlways(
          context,
        ),
      );

  static Widget bold19Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold19Black(
          context,
        ),
      );

  static Widget bold19BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold19BlackAlways(
          context,
        ),
      );

  static Widget bold19Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold19Primary(
          context,
        ),
      );

  static Widget bold19PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold19PrimaryInternal(
          context,
        ),
      );

  static Widget bold19PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold19Primary(
          context,
        ),
      ),
    );
  }

  static Widget bold19PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold19PrimaryLight(
          context,
        ),
      );

  static Widget bold19PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold19PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget bold19PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold19PrimaryDark(
          context,
        ),
      );

  static Widget bold19PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold19PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget bold19Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold19Secondary(
          context,
        ),
      );

  static Widget bold19SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold19SecondaryInternal(
          context,
        ),
      );

  static Widget bold19SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold19Secondary(
          context,
        ),
      ),
    );
  }

  static Widget bold19SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold19SecondaryLight(
          context,
        ),
      );

  static Widget bold19SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold19SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget bold19SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold19SecondaryDark(
          context,
        ),
      );

  static Widget bold19SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold19SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget bold19Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold19Accent(
          context,
        ),
      );

  static Widget bold19AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold19AccentInternal(
          context,
        ),
      );

  static Widget bold19AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold19Accent(
          context,
        ),
      ),
    );
  }

  static Widget bold19AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold19AccentLight(
          context,
        ),
      );

  static Widget bold19AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold19AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget bold19AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold19AccentDark(
          context,
        ),
      );

  static Widget bold19AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold19AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget bold19Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold19Grey(
          context,
        ),
      );

  static Widget bold19GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold19Grey(
          context,
        ),
      ),
    );
  }

  static Widget bold19GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold19GreyLight(
          context,
        ),
      );

  static Widget bold19GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold19GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget bold19GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold19GreyDark(
          context,
        ),
      );

  static Widget bold19GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold19GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget bold19Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold19Info(
          context,
        ),
      );

  static Widget bold19InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold19Info(
          context,
        ),
      ),
    );
  }

  static Widget bold19InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold19InfoLight(
          context,
        ),
      );

  static Widget bold19InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold19InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget bold19InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold19InfoDark(
          context,
        ),
      );

  static Widget bold19InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold19InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget bold19Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold19Success(
          context,
        ),
      );

  static Widget bold19SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold19Success(
          context,
        ),
      ),
    );
  }

  static Widget bold19SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold19SuccessLight(
          context,
        ),
      );

  static Widget bold19SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold19SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget bold19SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold19SuccessDark(
          context,
        ),
      );

  static Widget bold19SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold19SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget bold19Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold19Warning(
          context,
        ),
      );

  static Widget bold19WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold19Warning(
          context,
        ),
      ),
    );
  }

  static Widget bold19WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold19WarningLight(
          context,
        ),
      );

  static Widget bold19WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold19WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget bold19WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold19WarningDark(
          context,
        ),
      );

  static Widget bold19WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold19WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget bold19Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold19Danger(
          context,
        ),
      );

  static Widget bold19DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold19Danger(
          context,
        ),
      ),
    );
  }

  static Widget bold19DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold19DangerLight(
          context,
        ),
      );

  static Widget bold19DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold19DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget bold19DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold19DangerDark(
          context,
        ),
      );

  static Widget bold19DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold19DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget bold20White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold20White(
          context,
        ),
      );

  static Widget bold20WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold20WhiteAlways(
          context,
        ),
      );

  static Widget bold20Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold20Black(
          context,
        ),
      );

  static Widget bold20BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold20BlackAlways(
          context,
        ),
      );

  static Widget bold20Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold20Primary(
          context,
        ),
      );

  static Widget bold20PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold20PrimaryInternal(
          context,
        ),
      );

  static Widget bold20PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold20Primary(
          context,
        ),
      ),
    );
  }

  static Widget bold20PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold20PrimaryLight(
          context,
        ),
      );

  static Widget bold20PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold20PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget bold20PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold20PrimaryDark(
          context,
        ),
      );

  static Widget bold20PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold20PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget bold20Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold20Secondary(
          context,
        ),
      );

  static Widget bold20SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold20SecondaryInternal(
          context,
        ),
      );

  static Widget bold20SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold20Secondary(
          context,
        ),
      ),
    );
  }

  static Widget bold20SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold20SecondaryLight(
          context,
        ),
      );

  static Widget bold20SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold20SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget bold20SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold20SecondaryDark(
          context,
        ),
      );

  static Widget bold20SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold20SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget bold20Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold20Accent(
          context,
        ),
      );

  static Widget bold20AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold20AccentInternal(
          context,
        ),
      );

  static Widget bold20AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold20Accent(
          context,
        ),
      ),
    );
  }

  static Widget bold20AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold20AccentLight(
          context,
        ),
      );

  static Widget bold20AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold20AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget bold20AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold20AccentDark(
          context,
        ),
      );

  static Widget bold20AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold20AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget bold20Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold20Grey(
          context,
        ),
      );

  static Widget bold20GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold20Grey(
          context,
        ),
      ),
    );
  }

  static Widget bold20GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold20GreyLight(
          context,
        ),
      );

  static Widget bold20GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold20GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget bold20GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold20GreyDark(
          context,
        ),
      );

  static Widget bold20GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold20GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget bold20Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold20Info(
          context,
        ),
      );

  static Widget bold20InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold20Info(
          context,
        ),
      ),
    );
  }

  static Widget bold20InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold20InfoLight(
          context,
        ),
      );

  static Widget bold20InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold20InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget bold20InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold20InfoDark(
          context,
        ),
      );

  static Widget bold20InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold20InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget bold20Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold20Success(
          context,
        ),
      );

  static Widget bold20SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold20Success(
          context,
        ),
      ),
    );
  }

  static Widget bold20SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold20SuccessLight(
          context,
        ),
      );

  static Widget bold20SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold20SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget bold20SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold20SuccessDark(
          context,
        ),
      );

  static Widget bold20SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold20SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget bold20Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold20Warning(
          context,
        ),
      );

  static Widget bold20WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold20Warning(
          context,
        ),
      ),
    );
  }

  static Widget bold20WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold20WarningLight(
          context,
        ),
      );

  static Widget bold20WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold20WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget bold20WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold20WarningDark(
          context,
        ),
      );

  static Widget bold20WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold20WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget bold20Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold20Danger(
          context,
        ),
      );

  static Widget bold20DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold20Danger(
          context,
        ),
      ),
    );
  }

  static Widget bold20DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold20DangerLight(
          context,
        ),
      );

  static Widget bold20DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold20DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget bold20DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold20DangerDark(
          context,
        ),
      );

  static Widget bold20DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold20DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget bold22White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold22White(
          context,
        ),
      );

  static Widget bold22WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold22WhiteAlways(
          context,
        ),
      );

  static Widget bold22Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold22Black(
          context,
        ),
      );

  static Widget bold22BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold22BlackAlways(
          context,
        ),
      );

  static Widget bold22Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold22Primary(
          context,
        ),
      );

  static Widget bold22PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold22PrimaryInternal(
          context,
        ),
      );

  static Widget bold22PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold22Primary(
          context,
        ),
      ),
    );
  }

  static Widget bold22PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold22PrimaryLight(
          context,
        ),
      );

  static Widget bold22PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold22PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget bold22PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold22PrimaryDark(
          context,
        ),
      );

  static Widget bold22PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold22PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget bold22Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold22Secondary(
          context,
        ),
      );

  static Widget bold22SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold22SecondaryInternal(
          context,
        ),
      );

  static Widget bold22SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold22Secondary(
          context,
        ),
      ),
    );
  }

  static Widget bold22SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold22SecondaryLight(
          context,
        ),
      );

  static Widget bold22SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold22SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget bold22SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold22SecondaryDark(
          context,
        ),
      );

  static Widget bold22SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold22SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget bold22Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold22Accent(
          context,
        ),
      );

  static Widget bold22AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold22AccentInternal(
          context,
        ),
      );

  static Widget bold22AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold22Accent(
          context,
        ),
      ),
    );
  }

  static Widget bold22AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold22AccentLight(
          context,
        ),
      );

  static Widget bold22AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold22AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget bold22AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold22AccentDark(
          context,
        ),
      );

  static Widget bold22AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold22AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget bold22Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold22Grey(
          context,
        ),
      );

  static Widget bold22GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold22Grey(
          context,
        ),
      ),
    );
  }

  static Widget bold22GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold22GreyLight(
          context,
        ),
      );

  static Widget bold22GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold22GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget bold22GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold22GreyDark(
          context,
        ),
      );

  static Widget bold22GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold22GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget bold22Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold22Info(
          context,
        ),
      );

  static Widget bold22InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold22Info(
          context,
        ),
      ),
    );
  }

  static Widget bold22InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold22InfoLight(
          context,
        ),
      );

  static Widget bold22InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold22InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget bold22InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold22InfoDark(
          context,
        ),
      );

  static Widget bold22InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold22InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget bold22Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold22Success(
          context,
        ),
      );

  static Widget bold22SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold22Success(
          context,
        ),
      ),
    );
  }

  static Widget bold22SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold22SuccessLight(
          context,
        ),
      );

  static Widget bold22SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold22SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget bold22SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold22SuccessDark(
          context,
        ),
      );

  static Widget bold22SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold22SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget bold22Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold22Warning(
          context,
        ),
      );

  static Widget bold22WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold22Warning(
          context,
        ),
      ),
    );
  }

  static Widget bold22WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold22WarningLight(
          context,
        ),
      );

  static Widget bold22WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold22WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget bold22WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold22WarningDark(
          context,
        ),
      );

  static Widget bold22WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold22WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget bold22Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold22Danger(
          context,
        ),
      );

  static Widget bold22DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold22Danger(
          context,
        ),
      ),
    );
  }

  static Widget bold22DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold22DangerLight(
          context,
        ),
      );

  static Widget bold22DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold22DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget bold22DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold22DangerDark(
          context,
        ),
      );

  static Widget bold22DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold22DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget bold24White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold24White(
          context,
        ),
      );

  static Widget bold24WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold24WhiteAlways(
          context,
        ),
      );

  static Widget bold24Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold24Black(
          context,
        ),
      );

  static Widget bold24BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold24BlackAlways(
          context,
        ),
      );

  static Widget bold24Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold24Primary(
          context,
        ),
      );

  static Widget bold24PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold24PrimaryInternal(
          context,
        ),
      );

  static Widget bold24PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold24Primary(
          context,
        ),
      ),
    );
  }

  static Widget bold24PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold24PrimaryLight(
          context,
        ),
      );

  static Widget bold24PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold24PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget bold24PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold24PrimaryDark(
          context,
        ),
      );

  static Widget bold24PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold24PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget bold24Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold24Secondary(
          context,
        ),
      );

  static Widget bold24SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold24SecondaryInternal(
          context,
        ),
      );

  static Widget bold24SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold24Secondary(
          context,
        ),
      ),
    );
  }

  static Widget bold24SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold24SecondaryLight(
          context,
        ),
      );

  static Widget bold24SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold24SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget bold24SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold24SecondaryDark(
          context,
        ),
      );

  static Widget bold24SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold24SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget bold24Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold24Accent(
          context,
        ),
      );

  static Widget bold24AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold24AccentInternal(
          context,
        ),
      );

  static Widget bold24AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold24Accent(
          context,
        ),
      ),
    );
  }

  static Widget bold24AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold24AccentLight(
          context,
        ),
      );

  static Widget bold24AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold24AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget bold24AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold24AccentDark(
          context,
        ),
      );

  static Widget bold24AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold24AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget bold24Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold24Grey(
          context,
        ),
      );

  static Widget bold24GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold24Grey(
          context,
        ),
      ),
    );
  }

  static Widget bold24GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold24GreyLight(
          context,
        ),
      );

  static Widget bold24GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold24GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget bold24GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold24GreyDark(
          context,
        ),
      );

  static Widget bold24GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold24GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget bold24Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold24Info(
          context,
        ),
      );

  static Widget bold24InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold24Info(
          context,
        ),
      ),
    );
  }

  static Widget bold24InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold24InfoLight(
          context,
        ),
      );

  static Widget bold24InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold24InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget bold24InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold24InfoDark(
          context,
        ),
      );

  static Widget bold24InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold24InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget bold24Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold24Success(
          context,
        ),
      );

  static Widget bold24SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold24Success(
          context,
        ),
      ),
    );
  }

  static Widget bold24SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold24SuccessLight(
          context,
        ),
      );

  static Widget bold24SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold24SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget bold24SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold24SuccessDark(
          context,
        ),
      );

  static Widget bold24SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold24SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget bold24Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold24Warning(
          context,
        ),
      );

  static Widget bold24WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold24Warning(
          context,
        ),
      ),
    );
  }

  static Widget bold24WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold24WarningLight(
          context,
        ),
      );

  static Widget bold24WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold24WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget bold24WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold24WarningDark(
          context,
        ),
      );

  static Widget bold24WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold24WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget bold24Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold24Danger(
          context,
        ),
      );

  static Widget bold24DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold24Danger(
          context,
        ),
      ),
    );
  }

  static Widget bold24DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold24DangerLight(
          context,
        ),
      );

  static Widget bold24DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold24DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget bold24DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold24DangerDark(
          context,
        ),
      );

  static Widget bold24DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold24DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget bold26White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold26White(
          context,
        ),
      );

  static Widget bold26WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold26WhiteAlways(
          context,
        ),
      );

  static Widget bold26Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold26Black(
          context,
        ),
      );

  static Widget bold26BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold26BlackAlways(
          context,
        ),
      );

  static Widget bold26Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold26Primary(
          context,
        ),
      );

  static Widget bold26PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold26PrimaryInternal(
          context,
        ),
      );

  static Widget bold26PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold26Primary(
          context,
        ),
      ),
    );
  }

  static Widget bold26PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold26PrimaryLight(
          context,
        ),
      );

  static Widget bold26PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold26PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget bold26PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold26PrimaryDark(
          context,
        ),
      );

  static Widget bold26PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold26PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget bold26Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold26Secondary(
          context,
        ),
      );

  static Widget bold26SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold26SecondaryInternal(
          context,
        ),
      );

  static Widget bold26SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold26Secondary(
          context,
        ),
      ),
    );
  }

  static Widget bold26SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold26SecondaryLight(
          context,
        ),
      );

  static Widget bold26SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold26SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget bold26SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold26SecondaryDark(
          context,
        ),
      );

  static Widget bold26SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold26SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget bold26Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold26Accent(
          context,
        ),
      );

  static Widget bold26AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold26AccentInternal(
          context,
        ),
      );

  static Widget bold26AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold26Accent(
          context,
        ),
      ),
    );
  }

  static Widget bold26AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold26AccentLight(
          context,
        ),
      );

  static Widget bold26AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold26AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget bold26AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold26AccentDark(
          context,
        ),
      );

  static Widget bold26AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold26AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget bold26Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold26Grey(
          context,
        ),
      );

  static Widget bold26GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold26Grey(
          context,
        ),
      ),
    );
  }

  static Widget bold26GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold26GreyLight(
          context,
        ),
      );

  static Widget bold26GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold26GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget bold26GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold26GreyDark(
          context,
        ),
      );

  static Widget bold26GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold26GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget bold26Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold26Info(
          context,
        ),
      );

  static Widget bold26InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold26Info(
          context,
        ),
      ),
    );
  }

  static Widget bold26InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold26InfoLight(
          context,
        ),
      );

  static Widget bold26InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold26InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget bold26InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold26InfoDark(
          context,
        ),
      );

  static Widget bold26InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold26InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget bold26Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold26Success(
          context,
        ),
      );

  static Widget bold26SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold26Success(
          context,
        ),
      ),
    );
  }

  static Widget bold26SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold26SuccessLight(
          context,
        ),
      );

  static Widget bold26SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold26SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget bold26SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold26SuccessDark(
          context,
        ),
      );

  static Widget bold26SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold26SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget bold26Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold26Warning(
          context,
        ),
      );

  static Widget bold26WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold26Warning(
          context,
        ),
      ),
    );
  }

  static Widget bold26WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold26WarningLight(
          context,
        ),
      );

  static Widget bold26WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold26WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget bold26WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold26WarningDark(
          context,
        ),
      );

  static Widget bold26WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold26WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget bold26Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold26Danger(
          context,
        ),
      );

  static Widget bold26DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold26Danger(
          context,
        ),
      ),
    );
  }

  static Widget bold26DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold26DangerLight(
          context,
        ),
      );

  static Widget bold26DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold26DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget bold26DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold26DangerDark(
          context,
        ),
      );

  static Widget bold26DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold26DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget bold28White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold28White(
          context,
        ),
      );

  static Widget bold28WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold28WhiteAlways(
          context,
        ),
      );

  static Widget bold28Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold28Black(
          context,
        ),
      );

  static Widget bold28BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold28BlackAlways(
          context,
        ),
      );

  static Widget bold28Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold28Primary(
          context,
        ),
      );

  static Widget bold28PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold28PrimaryInternal(
          context,
        ),
      );

  static Widget bold28PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold28Primary(
          context,
        ),
      ),
    );
  }

  static Widget bold28PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold28PrimaryLight(
          context,
        ),
      );

  static Widget bold28PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold28PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget bold28PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold28PrimaryDark(
          context,
        ),
      );

  static Widget bold28PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold28PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget bold28Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold28Secondary(
          context,
        ),
      );

  static Widget bold28SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold28SecondaryInternal(
          context,
        ),
      );

  static Widget bold28SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold28Secondary(
          context,
        ),
      ),
    );
  }

  static Widget bold28SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold28SecondaryLight(
          context,
        ),
      );

  static Widget bold28SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold28SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget bold28SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold28SecondaryDark(
          context,
        ),
      );

  static Widget bold28SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold28SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget bold28Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold28Accent(
          context,
        ),
      );

  static Widget bold28AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold28AccentInternal(
          context,
        ),
      );

  static Widget bold28AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold28Accent(
          context,
        ),
      ),
    );
  }

  static Widget bold28AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold28AccentLight(
          context,
        ),
      );

  static Widget bold28AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold28AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget bold28AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold28AccentDark(
          context,
        ),
      );

  static Widget bold28AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold28AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget bold28Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold28Grey(
          context,
        ),
      );

  static Widget bold28GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold28Grey(
          context,
        ),
      ),
    );
  }

  static Widget bold28GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold28GreyLight(
          context,
        ),
      );

  static Widget bold28GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold28GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget bold28GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold28GreyDark(
          context,
        ),
      );

  static Widget bold28GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold28GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget bold28Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold28Info(
          context,
        ),
      );

  static Widget bold28InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold28Info(
          context,
        ),
      ),
    );
  }

  static Widget bold28InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold28InfoLight(
          context,
        ),
      );

  static Widget bold28InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold28InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget bold28InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold28InfoDark(
          context,
        ),
      );

  static Widget bold28InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold28InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget bold28Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold28Success(
          context,
        ),
      );

  static Widget bold28SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold28Success(
          context,
        ),
      ),
    );
  }

  static Widget bold28SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold28SuccessLight(
          context,
        ),
      );

  static Widget bold28SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold28SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget bold28SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold28SuccessDark(
          context,
        ),
      );

  static Widget bold28SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold28SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget bold28Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold28Warning(
          context,
        ),
      );

  static Widget bold28WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold28Warning(
          context,
        ),
      ),
    );
  }

  static Widget bold28WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold28WarningLight(
          context,
        ),
      );

  static Widget bold28WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold28WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget bold28WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold28WarningDark(
          context,
        ),
      );

  static Widget bold28WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold28WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget bold28Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold28Danger(
          context,
        ),
      );

  static Widget bold28DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold28Danger(
          context,
        ),
      ),
    );
  }

  static Widget bold28DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold28DangerLight(
          context,
        ),
      );

  static Widget bold28DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold28DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget bold28DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold28DangerDark(
          context,
        ),
      );

  static Widget bold28DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold28DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget bold32White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold32White(
          context,
        ),
      );

  static Widget bold32WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold32WhiteAlways(
          context,
        ),
      );

  static Widget bold32Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold32Black(
          context,
        ),
      );

  static Widget bold32BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold32BlackAlways(
          context,
        ),
      );

  static Widget bold32Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold32Primary(
          context,
        ),
      );

  static Widget bold32PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold32PrimaryInternal(
          context,
        ),
      );

  static Widget bold32PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold32Primary(
          context,
        ),
      ),
    );
  }

  static Widget bold32PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold32PrimaryLight(
          context,
        ),
      );

  static Widget bold32PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold32PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget bold32PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold32PrimaryDark(
          context,
        ),
      );

  static Widget bold32PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold32PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget bold32Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold32Secondary(
          context,
        ),
      );

  static Widget bold32SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold32SecondaryInternal(
          context,
        ),
      );

  static Widget bold32SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold32Secondary(
          context,
        ),
      ),
    );
  }

  static Widget bold32SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold32SecondaryLight(
          context,
        ),
      );

  static Widget bold32SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold32SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget bold32SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold32SecondaryDark(
          context,
        ),
      );

  static Widget bold32SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold32SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget bold32Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold32Accent(
          context,
        ),
      );

  static Widget bold32AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold32AccentInternal(
          context,
        ),
      );

  static Widget bold32AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold32Accent(
          context,
        ),
      ),
    );
  }

  static Widget bold32AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold32AccentLight(
          context,
        ),
      );

  static Widget bold32AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold32AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget bold32AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold32AccentDark(
          context,
        ),
      );

  static Widget bold32AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold32AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget bold32Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold32Grey(
          context,
        ),
      );

  static Widget bold32GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold32Grey(
          context,
        ),
      ),
    );
  }

  static Widget bold32GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold32GreyLight(
          context,
        ),
      );

  static Widget bold32GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold32GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget bold32GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold32GreyDark(
          context,
        ),
      );

  static Widget bold32GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold32GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget bold32Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold32Info(
          context,
        ),
      );

  static Widget bold32InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold32Info(
          context,
        ),
      ),
    );
  }

  static Widget bold32InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold32InfoLight(
          context,
        ),
      );

  static Widget bold32InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold32InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget bold32InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold32InfoDark(
          context,
        ),
      );

  static Widget bold32InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold32InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget bold32Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold32Success(
          context,
        ),
      );

  static Widget bold32SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold32Success(
          context,
        ),
      ),
    );
  }

  static Widget bold32SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold32SuccessLight(
          context,
        ),
      );

  static Widget bold32SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold32SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget bold32SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold32SuccessDark(
          context,
        ),
      );

  static Widget bold32SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold32SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget bold32Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold32Warning(
          context,
        ),
      );

  static Widget bold32WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold32Warning(
          context,
        ),
      ),
    );
  }

  static Widget bold32WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold32WarningLight(
          context,
        ),
      );

  static Widget bold32WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold32WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget bold32WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold32WarningDark(
          context,
        ),
      );

  static Widget bold32WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold32WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget bold32Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold32Danger(
          context,
        ),
      );

  static Widget bold32DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold32Danger(
          context,
        ),
      ),
    );
  }

  static Widget bold32DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold32DangerLight(
          context,
        ),
      );

  static Widget bold32DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold32DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget bold32DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold32DangerDark(
          context,
        ),
      );

  static Widget bold32DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.bold32DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold10White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold10White(
          context,
        ),
      );

  static Widget extraBold10WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold10WhiteAlways(
          context,
        ),
      );

  static Widget extraBold10Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold10Black(
          context,
        ),
      );

  static Widget extraBold10BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold10BlackAlways(
          context,
        ),
      );

  static Widget extraBold10Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold10Primary(
          context,
        ),
      );

  static Widget extraBold10PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold10PrimaryInternal(
          context,
        ),
      );

  static Widget extraBold10PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold10Primary(
          context,
        ),
      ),
    );
  }

  static Widget extraBold10PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold10PrimaryLight(
          context,
        ),
      );

  static Widget extraBold10PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold10PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold10PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold10PrimaryDark(
          context,
        ),
      );

  static Widget extraBold10PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold10PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold10Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold10Secondary(
          context,
        ),
      );

  static Widget extraBold10SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold10SecondaryInternal(
          context,
        ),
      );

  static Widget extraBold10SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold10Secondary(
          context,
        ),
      ),
    );
  }

  static Widget extraBold10SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold10SecondaryLight(
          context,
        ),
      );

  static Widget extraBold10SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold10SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold10SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold10SecondaryDark(
          context,
        ),
      );

  static Widget extraBold10SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold10SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold10Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold10Accent(
          context,
        ),
      );

  static Widget extraBold10AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold10AccentInternal(
          context,
        ),
      );

  static Widget extraBold10AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold10Accent(
          context,
        ),
      ),
    );
  }

  static Widget extraBold10AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold10AccentLight(
          context,
        ),
      );

  static Widget extraBold10AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold10AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold10AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold10AccentDark(
          context,
        ),
      );

  static Widget extraBold10AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold10AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold10Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold10Grey(
          context,
        ),
      );

  static Widget extraBold10GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold10Grey(
          context,
        ),
      ),
    );
  }

  static Widget extraBold10GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold10GreyLight(
          context,
        ),
      );

  static Widget extraBold10GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold10GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold10GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold10GreyDark(
          context,
        ),
      );

  static Widget extraBold10GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold10GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold10Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold10Info(
          context,
        ),
      );

  static Widget extraBold10InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold10Info(
          context,
        ),
      ),
    );
  }

  static Widget extraBold10InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold10InfoLight(
          context,
        ),
      );

  static Widget extraBold10InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold10InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold10InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold10InfoDark(
          context,
        ),
      );

  static Widget extraBold10InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold10InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold10Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold10Success(
          context,
        ),
      );

  static Widget extraBold10SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold10Success(
          context,
        ),
      ),
    );
  }

  static Widget extraBold10SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold10SuccessLight(
          context,
        ),
      );

  static Widget extraBold10SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold10SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold10SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold10SuccessDark(
          context,
        ),
      );

  static Widget extraBold10SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold10SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold10Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold10Warning(
          context,
        ),
      );

  static Widget extraBold10WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold10Warning(
          context,
        ),
      ),
    );
  }

  static Widget extraBold10WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold10WarningLight(
          context,
        ),
      );

  static Widget extraBold10WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold10WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold10WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold10WarningDark(
          context,
        ),
      );

  static Widget extraBold10WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold10WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold10Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold10Danger(
          context,
        ),
      );

  static Widget extraBold10DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold10Danger(
          context,
        ),
      ),
    );
  }

  static Widget extraBold10DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold10DangerLight(
          context,
        ),
      );

  static Widget extraBold10DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold10DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold10DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold10DangerDark(
          context,
        ),
      );

  static Widget extraBold10DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold10DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold11White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold11White(
          context,
        ),
      );

  static Widget extraBold11WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold11WhiteAlways(
          context,
        ),
      );

  static Widget extraBold11Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold11Black(
          context,
        ),
      );

  static Widget extraBold11BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold11BlackAlways(
          context,
        ),
      );

  static Widget extraBold11Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold11Primary(
          context,
        ),
      );

  static Widget extraBold11PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold11PrimaryInternal(
          context,
        ),
      );

  static Widget extraBold11PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold11Primary(
          context,
        ),
      ),
    );
  }

  static Widget extraBold11PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold11PrimaryLight(
          context,
        ),
      );

  static Widget extraBold11PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold11PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold11PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold11PrimaryDark(
          context,
        ),
      );

  static Widget extraBold11PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold11PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold11Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold11Secondary(
          context,
        ),
      );

  static Widget extraBold11SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold11SecondaryInternal(
          context,
        ),
      );

  static Widget extraBold11SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold11Secondary(
          context,
        ),
      ),
    );
  }

  static Widget extraBold11SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold11SecondaryLight(
          context,
        ),
      );

  static Widget extraBold11SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold11SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold11SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold11SecondaryDark(
          context,
        ),
      );

  static Widget extraBold11SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold11SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold11Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold11Accent(
          context,
        ),
      );

  static Widget extraBold11AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold11AccentInternal(
          context,
        ),
      );

  static Widget extraBold11AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold11Accent(
          context,
        ),
      ),
    );
  }

  static Widget extraBold11AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold11AccentLight(
          context,
        ),
      );

  static Widget extraBold11AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold11AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold11AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold11AccentDark(
          context,
        ),
      );

  static Widget extraBold11AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold11AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold11Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold11Grey(
          context,
        ),
      );

  static Widget extraBold11GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold11Grey(
          context,
        ),
      ),
    );
  }

  static Widget extraBold11GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold11GreyLight(
          context,
        ),
      );

  static Widget extraBold11GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold11GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold11GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold11GreyDark(
          context,
        ),
      );

  static Widget extraBold11GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold11GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold11Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold11Info(
          context,
        ),
      );

  static Widget extraBold11InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold11Info(
          context,
        ),
      ),
    );
  }

  static Widget extraBold11InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold11InfoLight(
          context,
        ),
      );

  static Widget extraBold11InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold11InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold11InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold11InfoDark(
          context,
        ),
      );

  static Widget extraBold11InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold11InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold11Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold11Success(
          context,
        ),
      );

  static Widget extraBold11SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold11Success(
          context,
        ),
      ),
    );
  }

  static Widget extraBold11SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold11SuccessLight(
          context,
        ),
      );

  static Widget extraBold11SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold11SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold11SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold11SuccessDark(
          context,
        ),
      );

  static Widget extraBold11SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold11SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold11Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold11Warning(
          context,
        ),
      );

  static Widget extraBold11WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold11Warning(
          context,
        ),
      ),
    );
  }

  static Widget extraBold11WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold11WarningLight(
          context,
        ),
      );

  static Widget extraBold11WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold11WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold11WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold11WarningDark(
          context,
        ),
      );

  static Widget extraBold11WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold11WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold11Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold11Danger(
          context,
        ),
      );

  static Widget extraBold11DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold11Danger(
          context,
        ),
      ),
    );
  }

  static Widget extraBold11DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold11DangerLight(
          context,
        ),
      );

  static Widget extraBold11DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold11DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold11DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold11DangerDark(
          context,
        ),
      );

  static Widget extraBold11DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold11DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold12White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold12White(
          context,
        ),
      );

  static Widget extraBold12WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold12WhiteAlways(
          context,
        ),
      );

  static Widget extraBold12Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold12Black(
          context,
        ),
      );

  static Widget extraBold12BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold12BlackAlways(
          context,
        ),
      );

  static Widget extraBold12Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold12Primary(
          context,
        ),
      );

  static Widget extraBold12PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold12PrimaryInternal(
          context,
        ),
      );

  static Widget extraBold12PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold12Primary(
          context,
        ),
      ),
    );
  }

  static Widget extraBold12PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold12PrimaryLight(
          context,
        ),
      );

  static Widget extraBold12PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold12PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold12PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold12PrimaryDark(
          context,
        ),
      );

  static Widget extraBold12PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold12PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold12Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold12Secondary(
          context,
        ),
      );

  static Widget extraBold12SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold12SecondaryInternal(
          context,
        ),
      );

  static Widget extraBold12SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold12Secondary(
          context,
        ),
      ),
    );
  }

  static Widget extraBold12SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold12SecondaryLight(
          context,
        ),
      );

  static Widget extraBold12SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold12SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold12SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold12SecondaryDark(
          context,
        ),
      );

  static Widget extraBold12SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold12SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold12Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold12Accent(
          context,
        ),
      );

  static Widget extraBold12AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold12AccentInternal(
          context,
        ),
      );

  static Widget extraBold12AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold12Accent(
          context,
        ),
      ),
    );
  }

  static Widget extraBold12AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold12AccentLight(
          context,
        ),
      );

  static Widget extraBold12AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold12AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold12AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold12AccentDark(
          context,
        ),
      );

  static Widget extraBold12AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold12AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold12Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold12Grey(
          context,
        ),
      );

  static Widget extraBold12GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold12Grey(
          context,
        ),
      ),
    );
  }

  static Widget extraBold12GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold12GreyLight(
          context,
        ),
      );

  static Widget extraBold12GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold12GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold12GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold12GreyDark(
          context,
        ),
      );

  static Widget extraBold12GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold12GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold12Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold12Info(
          context,
        ),
      );

  static Widget extraBold12InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold12Info(
          context,
        ),
      ),
    );
  }

  static Widget extraBold12InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold12InfoLight(
          context,
        ),
      );

  static Widget extraBold12InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold12InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold12InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold12InfoDark(
          context,
        ),
      );

  static Widget extraBold12InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold12InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold12Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold12Success(
          context,
        ),
      );

  static Widget extraBold12SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold12Success(
          context,
        ),
      ),
    );
  }

  static Widget extraBold12SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold12SuccessLight(
          context,
        ),
      );

  static Widget extraBold12SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold12SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold12SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold12SuccessDark(
          context,
        ),
      );

  static Widget extraBold12SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold12SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold12Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold12Warning(
          context,
        ),
      );

  static Widget extraBold12WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold12Warning(
          context,
        ),
      ),
    );
  }

  static Widget extraBold12WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold12WarningLight(
          context,
        ),
      );

  static Widget extraBold12WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold12WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold12WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold12WarningDark(
          context,
        ),
      );

  static Widget extraBold12WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold12WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold12Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold12Danger(
          context,
        ),
      );

  static Widget extraBold12DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold12Danger(
          context,
        ),
      ),
    );
  }

  static Widget extraBold12DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold12DangerLight(
          context,
        ),
      );

  static Widget extraBold12DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold12DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold12DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold12DangerDark(
          context,
        ),
      );

  static Widget extraBold12DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold12DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold13White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold13White(
          context,
        ),
      );

  static Widget extraBold13WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold13WhiteAlways(
          context,
        ),
      );

  static Widget extraBold13Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold13Black(
          context,
        ),
      );

  static Widget extraBold13BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold13BlackAlways(
          context,
        ),
      );

  static Widget extraBold13Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold13Primary(
          context,
        ),
      );

  static Widget extraBold13PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold13PrimaryInternal(
          context,
        ),
      );

  static Widget extraBold13PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold13Primary(
          context,
        ),
      ),
    );
  }

  static Widget extraBold13PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold13PrimaryLight(
          context,
        ),
      );

  static Widget extraBold13PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold13PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold13PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold13PrimaryDark(
          context,
        ),
      );

  static Widget extraBold13PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold13PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold13Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold13Secondary(
          context,
        ),
      );

  static Widget extraBold13SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold13SecondaryInternal(
          context,
        ),
      );

  static Widget extraBold13SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold13Secondary(
          context,
        ),
      ),
    );
  }

  static Widget extraBold13SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold13SecondaryLight(
          context,
        ),
      );

  static Widget extraBold13SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold13SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold13SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold13SecondaryDark(
          context,
        ),
      );

  static Widget extraBold13SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold13SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold13Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold13Accent(
          context,
        ),
      );

  static Widget extraBold13AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold13AccentInternal(
          context,
        ),
      );

  static Widget extraBold13AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold13Accent(
          context,
        ),
      ),
    );
  }

  static Widget extraBold13AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold13AccentLight(
          context,
        ),
      );

  static Widget extraBold13AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold13AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold13AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold13AccentDark(
          context,
        ),
      );

  static Widget extraBold13AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold13AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold13Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold13Grey(
          context,
        ),
      );

  static Widget extraBold13GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold13Grey(
          context,
        ),
      ),
    );
  }

  static Widget extraBold13GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold13GreyLight(
          context,
        ),
      );

  static Widget extraBold13GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold13GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold13GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold13GreyDark(
          context,
        ),
      );

  static Widget extraBold13GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold13GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold13Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold13Info(
          context,
        ),
      );

  static Widget extraBold13InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold13Info(
          context,
        ),
      ),
    );
  }

  static Widget extraBold13InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold13InfoLight(
          context,
        ),
      );

  static Widget extraBold13InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold13InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold13InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold13InfoDark(
          context,
        ),
      );

  static Widget extraBold13InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold13InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold13Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold13Success(
          context,
        ),
      );

  static Widget extraBold13SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold13Success(
          context,
        ),
      ),
    );
  }

  static Widget extraBold13SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold13SuccessLight(
          context,
        ),
      );

  static Widget extraBold13SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold13SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold13SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold13SuccessDark(
          context,
        ),
      );

  static Widget extraBold13SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold13SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold13Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold13Warning(
          context,
        ),
      );

  static Widget extraBold13WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold13Warning(
          context,
        ),
      ),
    );
  }

  static Widget extraBold13WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold13WarningLight(
          context,
        ),
      );

  static Widget extraBold13WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold13WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold13WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold13WarningDark(
          context,
        ),
      );

  static Widget extraBold13WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold13WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold13Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold13Danger(
          context,
        ),
      );

  static Widget extraBold13DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold13Danger(
          context,
        ),
      ),
    );
  }

  static Widget extraBold13DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold13DangerLight(
          context,
        ),
      );

  static Widget extraBold13DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold13DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold13DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold13DangerDark(
          context,
        ),
      );

  static Widget extraBold13DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold13DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold14White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold14White(
          context,
        ),
      );

  static Widget extraBold14WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold14WhiteAlways(
          context,
        ),
      );

  static Widget extraBold14Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold14Black(
          context,
        ),
      );

  static Widget extraBold14BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold14BlackAlways(
          context,
        ),
      );

  static Widget extraBold14Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold14Primary(
          context,
        ),
      );

  static Widget extraBold14PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold14PrimaryInternal(
          context,
        ),
      );

  static Widget extraBold14PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold14Primary(
          context,
        ),
      ),
    );
  }

  static Widget extraBold14PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold14PrimaryLight(
          context,
        ),
      );

  static Widget extraBold14PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold14PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold14PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold14PrimaryDark(
          context,
        ),
      );

  static Widget extraBold14PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold14PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold14Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold14Secondary(
          context,
        ),
      );

  static Widget extraBold14SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold14SecondaryInternal(
          context,
        ),
      );

  static Widget extraBold14SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold14Secondary(
          context,
        ),
      ),
    );
  }

  static Widget extraBold14SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold14SecondaryLight(
          context,
        ),
      );

  static Widget extraBold14SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold14SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold14SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold14SecondaryDark(
          context,
        ),
      );

  static Widget extraBold14SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold14SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold14Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold14Accent(
          context,
        ),
      );

  static Widget extraBold14AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold14AccentInternal(
          context,
        ),
      );

  static Widget extraBold14AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold14Accent(
          context,
        ),
      ),
    );
  }

  static Widget extraBold14AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold14AccentLight(
          context,
        ),
      );

  static Widget extraBold14AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold14AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold14AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold14AccentDark(
          context,
        ),
      );

  static Widget extraBold14AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold14AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold14Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold14Grey(
          context,
        ),
      );

  static Widget extraBold14GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold14Grey(
          context,
        ),
      ),
    );
  }

  static Widget extraBold14GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold14GreyLight(
          context,
        ),
      );

  static Widget extraBold14GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold14GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold14GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold14GreyDark(
          context,
        ),
      );

  static Widget extraBold14GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold14GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold14Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold14Info(
          context,
        ),
      );

  static Widget extraBold14InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold14Info(
          context,
        ),
      ),
    );
  }

  static Widget extraBold14InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold14InfoLight(
          context,
        ),
      );

  static Widget extraBold14InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold14InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold14InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold14InfoDark(
          context,
        ),
      );

  static Widget extraBold14InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold14InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold14Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold14Success(
          context,
        ),
      );

  static Widget extraBold14SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold14Success(
          context,
        ),
      ),
    );
  }

  static Widget extraBold14SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold14SuccessLight(
          context,
        ),
      );

  static Widget extraBold14SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold14SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold14SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold14SuccessDark(
          context,
        ),
      );

  static Widget extraBold14SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold14SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold14Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold14Warning(
          context,
        ),
      );

  static Widget extraBold14WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold14Warning(
          context,
        ),
      ),
    );
  }

  static Widget extraBold14WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold14WarningLight(
          context,
        ),
      );

  static Widget extraBold14WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold14WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold14WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold14WarningDark(
          context,
        ),
      );

  static Widget extraBold14WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold14WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold14Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold14Danger(
          context,
        ),
      );

  static Widget extraBold14DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold14Danger(
          context,
        ),
      ),
    );
  }

  static Widget extraBold14DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold14DangerLight(
          context,
        ),
      );

  static Widget extraBold14DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold14DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold14DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold14DangerDark(
          context,
        ),
      );

  static Widget extraBold14DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold14DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold15White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold15White(
          context,
        ),
      );

  static Widget extraBold15WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold15WhiteAlways(
          context,
        ),
      );

  static Widget extraBold15Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold15Black(
          context,
        ),
      );

  static Widget extraBold15BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold15BlackAlways(
          context,
        ),
      );

  static Widget extraBold15Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold15Primary(
          context,
        ),
      );

  static Widget extraBold15PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold15PrimaryInternal(
          context,
        ),
      );

  static Widget extraBold15PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold15Primary(
          context,
        ),
      ),
    );
  }

  static Widget extraBold15PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold15PrimaryLight(
          context,
        ),
      );

  static Widget extraBold15PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold15PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold15PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold15PrimaryDark(
          context,
        ),
      );

  static Widget extraBold15PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold15PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold15Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold15Secondary(
          context,
        ),
      );

  static Widget extraBold15SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold15SecondaryInternal(
          context,
        ),
      );

  static Widget extraBold15SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold15Secondary(
          context,
        ),
      ),
    );
  }

  static Widget extraBold15SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold15SecondaryLight(
          context,
        ),
      );

  static Widget extraBold15SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold15SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold15SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold15SecondaryDark(
          context,
        ),
      );

  static Widget extraBold15SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold15SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold15Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold15Accent(
          context,
        ),
      );

  static Widget extraBold15AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold15AccentInternal(
          context,
        ),
      );

  static Widget extraBold15AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold15Accent(
          context,
        ),
      ),
    );
  }

  static Widget extraBold15AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold15AccentLight(
          context,
        ),
      );

  static Widget extraBold15AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold15AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold15AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold15AccentDark(
          context,
        ),
      );

  static Widget extraBold15AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold15AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold15Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold15Grey(
          context,
        ),
      );

  static Widget extraBold15GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold15Grey(
          context,
        ),
      ),
    );
  }

  static Widget extraBold15GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold15GreyLight(
          context,
        ),
      );

  static Widget extraBold15GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold15GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold15GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold15GreyDark(
          context,
        ),
      );

  static Widget extraBold15GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold15GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold15Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold15Info(
          context,
        ),
      );

  static Widget extraBold15InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold15Info(
          context,
        ),
      ),
    );
  }

  static Widget extraBold15InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold15InfoLight(
          context,
        ),
      );

  static Widget extraBold15InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold15InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold15InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold15InfoDark(
          context,
        ),
      );

  static Widget extraBold15InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold15InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold15Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold15Success(
          context,
        ),
      );

  static Widget extraBold15SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold15Success(
          context,
        ),
      ),
    );
  }

  static Widget extraBold15SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold15SuccessLight(
          context,
        ),
      );

  static Widget extraBold15SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold15SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold15SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold15SuccessDark(
          context,
        ),
      );

  static Widget extraBold15SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold15SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold15Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold15Warning(
          context,
        ),
      );

  static Widget extraBold15WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold15Warning(
          context,
        ),
      ),
    );
  }

  static Widget extraBold15WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold15WarningLight(
          context,
        ),
      );

  static Widget extraBold15WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold15WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold15WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold15WarningDark(
          context,
        ),
      );

  static Widget extraBold15WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold15WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold15Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold15Danger(
          context,
        ),
      );

  static Widget extraBold15DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold15Danger(
          context,
        ),
      ),
    );
  }

  static Widget extraBold15DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold15DangerLight(
          context,
        ),
      );

  static Widget extraBold15DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold15DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold15DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold15DangerDark(
          context,
        ),
      );

  static Widget extraBold15DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold15DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold16White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold16White(
          context,
        ),
      );

  static Widget extraBold16WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold16WhiteAlways(
          context,
        ),
      );

  static Widget extraBold16Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold16Black(
          context,
        ),
      );

  static Widget extraBold16BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold16BlackAlways(
          context,
        ),
      );

  static Widget extraBold16Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold16Primary(
          context,
        ),
      );

  static Widget extraBold16PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold16PrimaryInternal(
          context,
        ),
      );

  static Widget extraBold16PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold16Primary(
          context,
        ),
      ),
    );
  }

  static Widget extraBold16PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold16PrimaryLight(
          context,
        ),
      );

  static Widget extraBold16PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold16PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold16PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold16PrimaryDark(
          context,
        ),
      );

  static Widget extraBold16PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold16PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold16Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold16Secondary(
          context,
        ),
      );

  static Widget extraBold16SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold16SecondaryInternal(
          context,
        ),
      );

  static Widget extraBold16SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold16Secondary(
          context,
        ),
      ),
    );
  }

  static Widget extraBold16SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold16SecondaryLight(
          context,
        ),
      );

  static Widget extraBold16SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold16SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold16SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold16SecondaryDark(
          context,
        ),
      );

  static Widget extraBold16SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold16SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold16Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold16Accent(
          context,
        ),
      );

  static Widget extraBold16AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold16AccentInternal(
          context,
        ),
      );

  static Widget extraBold16AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold16Accent(
          context,
        ),
      ),
    );
  }

  static Widget extraBold16AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold16AccentLight(
          context,
        ),
      );

  static Widget extraBold16AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold16AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold16AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold16AccentDark(
          context,
        ),
      );

  static Widget extraBold16AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold16AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold16Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold16Grey(
          context,
        ),
      );

  static Widget extraBold16GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold16Grey(
          context,
        ),
      ),
    );
  }

  static Widget extraBold16GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold16GreyLight(
          context,
        ),
      );

  static Widget extraBold16GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold16GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold16GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold16GreyDark(
          context,
        ),
      );

  static Widget extraBold16GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold16GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold16Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold16Info(
          context,
        ),
      );

  static Widget extraBold16InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold16Info(
          context,
        ),
      ),
    );
  }

  static Widget extraBold16InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold16InfoLight(
          context,
        ),
      );

  static Widget extraBold16InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold16InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold16InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold16InfoDark(
          context,
        ),
      );

  static Widget extraBold16InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold16InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold16Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold16Success(
          context,
        ),
      );

  static Widget extraBold16SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold16Success(
          context,
        ),
      ),
    );
  }

  static Widget extraBold16SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold16SuccessLight(
          context,
        ),
      );

  static Widget extraBold16SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold16SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold16SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold16SuccessDark(
          context,
        ),
      );

  static Widget extraBold16SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold16SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold16Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold16Warning(
          context,
        ),
      );

  static Widget extraBold16WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold16Warning(
          context,
        ),
      ),
    );
  }

  static Widget extraBold16WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold16WarningLight(
          context,
        ),
      );

  static Widget extraBold16WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold16WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold16WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold16WarningDark(
          context,
        ),
      );

  static Widget extraBold16WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold16WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold16Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold16Danger(
          context,
        ),
      );

  static Widget extraBold16DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold16Danger(
          context,
        ),
      ),
    );
  }

  static Widget extraBold16DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold16DangerLight(
          context,
        ),
      );

  static Widget extraBold16DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold16DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold16DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold16DangerDark(
          context,
        ),
      );

  static Widget extraBold16DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold16DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold17White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold17White(
          context,
        ),
      );

  static Widget extraBold17WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold17WhiteAlways(
          context,
        ),
      );

  static Widget extraBold17Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold17Black(
          context,
        ),
      );

  static Widget extraBold17BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold17BlackAlways(
          context,
        ),
      );

  static Widget extraBold17Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold17Primary(
          context,
        ),
      );

  static Widget extraBold17PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold17PrimaryInternal(
          context,
        ),
      );

  static Widget extraBold17PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold17Primary(
          context,
        ),
      ),
    );
  }

  static Widget extraBold17PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold17PrimaryLight(
          context,
        ),
      );

  static Widget extraBold17PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold17PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold17PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold17PrimaryDark(
          context,
        ),
      );

  static Widget extraBold17PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold17PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold17Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold17Secondary(
          context,
        ),
      );

  static Widget extraBold17SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold17SecondaryInternal(
          context,
        ),
      );

  static Widget extraBold17SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold17Secondary(
          context,
        ),
      ),
    );
  }

  static Widget extraBold17SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold17SecondaryLight(
          context,
        ),
      );

  static Widget extraBold17SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold17SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold17SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold17SecondaryDark(
          context,
        ),
      );

  static Widget extraBold17SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold17SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold17Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold17Accent(
          context,
        ),
      );

  static Widget extraBold17AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold17AccentInternal(
          context,
        ),
      );

  static Widget extraBold17AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold17Accent(
          context,
        ),
      ),
    );
  }

  static Widget extraBold17AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold17AccentLight(
          context,
        ),
      );

  static Widget extraBold17AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold17AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold17AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold17AccentDark(
          context,
        ),
      );

  static Widget extraBold17AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold17AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold17Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold17Grey(
          context,
        ),
      );

  static Widget extraBold17GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold17Grey(
          context,
        ),
      ),
    );
  }

  static Widget extraBold17GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold17GreyLight(
          context,
        ),
      );

  static Widget extraBold17GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold17GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold17GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold17GreyDark(
          context,
        ),
      );

  static Widget extraBold17GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold17GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold17Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold17Info(
          context,
        ),
      );

  static Widget extraBold17InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold17Info(
          context,
        ),
      ),
    );
  }

  static Widget extraBold17InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold17InfoLight(
          context,
        ),
      );

  static Widget extraBold17InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold17InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold17InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold17InfoDark(
          context,
        ),
      );

  static Widget extraBold17InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold17InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold17Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold17Success(
          context,
        ),
      );

  static Widget extraBold17SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold17Success(
          context,
        ),
      ),
    );
  }

  static Widget extraBold17SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold17SuccessLight(
          context,
        ),
      );

  static Widget extraBold17SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold17SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold17SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold17SuccessDark(
          context,
        ),
      );

  static Widget extraBold17SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold17SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold17Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold17Warning(
          context,
        ),
      );

  static Widget extraBold17WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold17Warning(
          context,
        ),
      ),
    );
  }

  static Widget extraBold17WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold17WarningLight(
          context,
        ),
      );

  static Widget extraBold17WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold17WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold17WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold17WarningDark(
          context,
        ),
      );

  static Widget extraBold17WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold17WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold17Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold17Danger(
          context,
        ),
      );

  static Widget extraBold17DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold17Danger(
          context,
        ),
      ),
    );
  }

  static Widget extraBold17DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold17DangerLight(
          context,
        ),
      );

  static Widget extraBold17DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold17DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold17DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold17DangerDark(
          context,
        ),
      );

  static Widget extraBold17DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold17DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold18White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold18White(
          context,
        ),
      );

  static Widget extraBold18WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold18WhiteAlways(
          context,
        ),
      );

  static Widget extraBold18Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold18Black(
          context,
        ),
      );

  static Widget extraBold18BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold18BlackAlways(
          context,
        ),
      );

  static Widget extraBold18Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold18Primary(
          context,
        ),
      );

  static Widget extraBold18PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold18PrimaryInternal(
          context,
        ),
      );

  static Widget extraBold18PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold18Primary(
          context,
        ),
      ),
    );
  }

  static Widget extraBold18PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold18PrimaryLight(
          context,
        ),
      );

  static Widget extraBold18PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold18PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold18PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold18PrimaryDark(
          context,
        ),
      );

  static Widget extraBold18PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold18PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold18Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold18Secondary(
          context,
        ),
      );

  static Widget extraBold18SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold18SecondaryInternal(
          context,
        ),
      );

  static Widget extraBold18SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold18Secondary(
          context,
        ),
      ),
    );
  }

  static Widget extraBold18SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold18SecondaryLight(
          context,
        ),
      );

  static Widget extraBold18SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold18SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold18SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold18SecondaryDark(
          context,
        ),
      );

  static Widget extraBold18SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold18SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold18Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold18Accent(
          context,
        ),
      );

  static Widget extraBold18AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold18AccentInternal(
          context,
        ),
      );

  static Widget extraBold18AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold18Accent(
          context,
        ),
      ),
    );
  }

  static Widget extraBold18AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold18AccentLight(
          context,
        ),
      );

  static Widget extraBold18AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold18AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold18AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold18AccentDark(
          context,
        ),
      );

  static Widget extraBold18AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold18AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold18Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold18Grey(
          context,
        ),
      );

  static Widget extraBold18GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold18Grey(
          context,
        ),
      ),
    );
  }

  static Widget extraBold18GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold18GreyLight(
          context,
        ),
      );

  static Widget extraBold18GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold18GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold18GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold18GreyDark(
          context,
        ),
      );

  static Widget extraBold18GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold18GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold18Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold18Info(
          context,
        ),
      );

  static Widget extraBold18InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold18Info(
          context,
        ),
      ),
    );
  }

  static Widget extraBold18InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold18InfoLight(
          context,
        ),
      );

  static Widget extraBold18InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold18InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold18InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold18InfoDark(
          context,
        ),
      );

  static Widget extraBold18InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold18InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold18Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold18Success(
          context,
        ),
      );

  static Widget extraBold18SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold18Success(
          context,
        ),
      ),
    );
  }

  static Widget extraBold18SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold18SuccessLight(
          context,
        ),
      );

  static Widget extraBold18SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold18SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold18SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold18SuccessDark(
          context,
        ),
      );

  static Widget extraBold18SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold18SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold18Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold18Warning(
          context,
        ),
      );

  static Widget extraBold18WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold18Warning(
          context,
        ),
      ),
    );
  }

  static Widget extraBold18WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold18WarningLight(
          context,
        ),
      );

  static Widget extraBold18WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold18WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold18WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold18WarningDark(
          context,
        ),
      );

  static Widget extraBold18WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold18WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold18Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold18Danger(
          context,
        ),
      );

  static Widget extraBold18DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold18Danger(
          context,
        ),
      ),
    );
  }

  static Widget extraBold18DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold18DangerLight(
          context,
        ),
      );

  static Widget extraBold18DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold18DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold18DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold18DangerDark(
          context,
        ),
      );

  static Widget extraBold18DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold18DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold19White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold19White(
          context,
        ),
      );

  static Widget extraBold19WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold19WhiteAlways(
          context,
        ),
      );

  static Widget extraBold19Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold19Black(
          context,
        ),
      );

  static Widget extraBold19BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold19BlackAlways(
          context,
        ),
      );

  static Widget extraBold19Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold19Primary(
          context,
        ),
      );

  static Widget extraBold19PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold19PrimaryInternal(
          context,
        ),
      );

  static Widget extraBold19PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold19Primary(
          context,
        ),
      ),
    );
  }

  static Widget extraBold19PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold19PrimaryLight(
          context,
        ),
      );

  static Widget extraBold19PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold19PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold19PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold19PrimaryDark(
          context,
        ),
      );

  static Widget extraBold19PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold19PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold19Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold19Secondary(
          context,
        ),
      );

  static Widget extraBold19SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold19SecondaryInternal(
          context,
        ),
      );

  static Widget extraBold19SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold19Secondary(
          context,
        ),
      ),
    );
  }

  static Widget extraBold19SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold19SecondaryLight(
          context,
        ),
      );

  static Widget extraBold19SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold19SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold19SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold19SecondaryDark(
          context,
        ),
      );

  static Widget extraBold19SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold19SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold19Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold19Accent(
          context,
        ),
      );

  static Widget extraBold19AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold19AccentInternal(
          context,
        ),
      );

  static Widget extraBold19AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold19Accent(
          context,
        ),
      ),
    );
  }

  static Widget extraBold19AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold19AccentLight(
          context,
        ),
      );

  static Widget extraBold19AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold19AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold19AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold19AccentDark(
          context,
        ),
      );

  static Widget extraBold19AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold19AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold19Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold19Grey(
          context,
        ),
      );

  static Widget extraBold19GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold19Grey(
          context,
        ),
      ),
    );
  }

  static Widget extraBold19GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold19GreyLight(
          context,
        ),
      );

  static Widget extraBold19GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold19GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold19GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold19GreyDark(
          context,
        ),
      );

  static Widget extraBold19GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold19GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold19Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold19Info(
          context,
        ),
      );

  static Widget extraBold19InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold19Info(
          context,
        ),
      ),
    );
  }

  static Widget extraBold19InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold19InfoLight(
          context,
        ),
      );

  static Widget extraBold19InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold19InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold19InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold19InfoDark(
          context,
        ),
      );

  static Widget extraBold19InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold19InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold19Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold19Success(
          context,
        ),
      );

  static Widget extraBold19SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold19Success(
          context,
        ),
      ),
    );
  }

  static Widget extraBold19SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold19SuccessLight(
          context,
        ),
      );

  static Widget extraBold19SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold19SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold19SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold19SuccessDark(
          context,
        ),
      );

  static Widget extraBold19SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold19SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold19Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold19Warning(
          context,
        ),
      );

  static Widget extraBold19WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold19Warning(
          context,
        ),
      ),
    );
  }

  static Widget extraBold19WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold19WarningLight(
          context,
        ),
      );

  static Widget extraBold19WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold19WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold19WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold19WarningDark(
          context,
        ),
      );

  static Widget extraBold19WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold19WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold19Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold19Danger(
          context,
        ),
      );

  static Widget extraBold19DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold19Danger(
          context,
        ),
      ),
    );
  }

  static Widget extraBold19DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold19DangerLight(
          context,
        ),
      );

  static Widget extraBold19DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold19DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold19DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold19DangerDark(
          context,
        ),
      );

  static Widget extraBold19DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold19DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold20White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold20White(
          context,
        ),
      );

  static Widget extraBold20WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold20WhiteAlways(
          context,
        ),
      );

  static Widget extraBold20Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold20Black(
          context,
        ),
      );

  static Widget extraBold20BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold20BlackAlways(
          context,
        ),
      );

  static Widget extraBold20Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold20Primary(
          context,
        ),
      );

  static Widget extraBold20PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold20PrimaryInternal(
          context,
        ),
      );

  static Widget extraBold20PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold20Primary(
          context,
        ),
      ),
    );
  }

  static Widget extraBold20PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold20PrimaryLight(
          context,
        ),
      );

  static Widget extraBold20PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold20PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold20PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold20PrimaryDark(
          context,
        ),
      );

  static Widget extraBold20PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold20PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold20Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold20Secondary(
          context,
        ),
      );

  static Widget extraBold20SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold20SecondaryInternal(
          context,
        ),
      );

  static Widget extraBold20SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold20Secondary(
          context,
        ),
      ),
    );
  }

  static Widget extraBold20SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold20SecondaryLight(
          context,
        ),
      );

  static Widget extraBold20SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold20SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold20SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold20SecondaryDark(
          context,
        ),
      );

  static Widget extraBold20SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold20SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold20Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold20Accent(
          context,
        ),
      );

  static Widget extraBold20AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold20AccentInternal(
          context,
        ),
      );

  static Widget extraBold20AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold20Accent(
          context,
        ),
      ),
    );
  }

  static Widget extraBold20AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold20AccentLight(
          context,
        ),
      );

  static Widget extraBold20AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold20AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold20AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold20AccentDark(
          context,
        ),
      );

  static Widget extraBold20AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold20AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold20Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold20Grey(
          context,
        ),
      );

  static Widget extraBold20GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold20Grey(
          context,
        ),
      ),
    );
  }

  static Widget extraBold20GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold20GreyLight(
          context,
        ),
      );

  static Widget extraBold20GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold20GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold20GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold20GreyDark(
          context,
        ),
      );

  static Widget extraBold20GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold20GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold20Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold20Info(
          context,
        ),
      );

  static Widget extraBold20InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold20Info(
          context,
        ),
      ),
    );
  }

  static Widget extraBold20InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold20InfoLight(
          context,
        ),
      );

  static Widget extraBold20InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold20InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold20InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold20InfoDark(
          context,
        ),
      );

  static Widget extraBold20InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold20InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold20Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold20Success(
          context,
        ),
      );

  static Widget extraBold20SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold20Success(
          context,
        ),
      ),
    );
  }

  static Widget extraBold20SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold20SuccessLight(
          context,
        ),
      );

  static Widget extraBold20SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold20SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold20SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold20SuccessDark(
          context,
        ),
      );

  static Widget extraBold20SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold20SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold20Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold20Warning(
          context,
        ),
      );

  static Widget extraBold20WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold20Warning(
          context,
        ),
      ),
    );
  }

  static Widget extraBold20WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold20WarningLight(
          context,
        ),
      );

  static Widget extraBold20WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold20WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold20WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold20WarningDark(
          context,
        ),
      );

  static Widget extraBold20WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold20WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold20Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold20Danger(
          context,
        ),
      );

  static Widget extraBold20DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold20Danger(
          context,
        ),
      ),
    );
  }

  static Widget extraBold20DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold20DangerLight(
          context,
        ),
      );

  static Widget extraBold20DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold20DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold20DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold20DangerDark(
          context,
        ),
      );

  static Widget extraBold20DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold20DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold22White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold22White(
          context,
        ),
      );

  static Widget extraBold22WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold22WhiteAlways(
          context,
        ),
      );

  static Widget extraBold22Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold22Black(
          context,
        ),
      );

  static Widget extraBold22BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold22BlackAlways(
          context,
        ),
      );

  static Widget extraBold22Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold22Primary(
          context,
        ),
      );

  static Widget extraBold22PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold22PrimaryInternal(
          context,
        ),
      );

  static Widget extraBold22PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold22Primary(
          context,
        ),
      ),
    );
  }

  static Widget extraBold22PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold22PrimaryLight(
          context,
        ),
      );

  static Widget extraBold22PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold22PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold22PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold22PrimaryDark(
          context,
        ),
      );

  static Widget extraBold22PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold22PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold22Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold22Secondary(
          context,
        ),
      );

  static Widget extraBold22SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold22SecondaryInternal(
          context,
        ),
      );

  static Widget extraBold22SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold22Secondary(
          context,
        ),
      ),
    );
  }

  static Widget extraBold22SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold22SecondaryLight(
          context,
        ),
      );

  static Widget extraBold22SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold22SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold22SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold22SecondaryDark(
          context,
        ),
      );

  static Widget extraBold22SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold22SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold22Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold22Accent(
          context,
        ),
      );

  static Widget extraBold22AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold22AccentInternal(
          context,
        ),
      );

  static Widget extraBold22AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold22Accent(
          context,
        ),
      ),
    );
  }

  static Widget extraBold22AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold22AccentLight(
          context,
        ),
      );

  static Widget extraBold22AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold22AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold22AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold22AccentDark(
          context,
        ),
      );

  static Widget extraBold22AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold22AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold22Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold22Grey(
          context,
        ),
      );

  static Widget extraBold22GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold22Grey(
          context,
        ),
      ),
    );
  }

  static Widget extraBold22GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold22GreyLight(
          context,
        ),
      );

  static Widget extraBold22GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold22GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold22GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold22GreyDark(
          context,
        ),
      );

  static Widget extraBold22GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold22GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold22Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold22Info(
          context,
        ),
      );

  static Widget extraBold22InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold22Info(
          context,
        ),
      ),
    );
  }

  static Widget extraBold22InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold22InfoLight(
          context,
        ),
      );

  static Widget extraBold22InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold22InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold22InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold22InfoDark(
          context,
        ),
      );

  static Widget extraBold22InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold22InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold22Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold22Success(
          context,
        ),
      );

  static Widget extraBold22SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold22Success(
          context,
        ),
      ),
    );
  }

  static Widget extraBold22SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold22SuccessLight(
          context,
        ),
      );

  static Widget extraBold22SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold22SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold22SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold22SuccessDark(
          context,
        ),
      );

  static Widget extraBold22SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold22SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold22Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold22Warning(
          context,
        ),
      );

  static Widget extraBold22WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold22Warning(
          context,
        ),
      ),
    );
  }

  static Widget extraBold22WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold22WarningLight(
          context,
        ),
      );

  static Widget extraBold22WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold22WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold22WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold22WarningDark(
          context,
        ),
      );

  static Widget extraBold22WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold22WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold22Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold22Danger(
          context,
        ),
      );

  static Widget extraBold22DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold22Danger(
          context,
        ),
      ),
    );
  }

  static Widget extraBold22DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold22DangerLight(
          context,
        ),
      );

  static Widget extraBold22DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold22DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold22DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold22DangerDark(
          context,
        ),
      );

  static Widget extraBold22DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold22DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold24White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold24White(
          context,
        ),
      );

  static Widget extraBold24WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold24WhiteAlways(
          context,
        ),
      );

  static Widget extraBold24Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold24Black(
          context,
        ),
      );

  static Widget extraBold24BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold24BlackAlways(
          context,
        ),
      );

  static Widget extraBold24Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold24Primary(
          context,
        ),
      );

  static Widget extraBold24PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold24PrimaryInternal(
          context,
        ),
      );

  static Widget extraBold24PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold24Primary(
          context,
        ),
      ),
    );
  }

  static Widget extraBold24PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold24PrimaryLight(
          context,
        ),
      );

  static Widget extraBold24PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold24PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold24PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold24PrimaryDark(
          context,
        ),
      );

  static Widget extraBold24PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold24PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold24Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold24Secondary(
          context,
        ),
      );

  static Widget extraBold24SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold24SecondaryInternal(
          context,
        ),
      );

  static Widget extraBold24SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold24Secondary(
          context,
        ),
      ),
    );
  }

  static Widget extraBold24SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold24SecondaryLight(
          context,
        ),
      );

  static Widget extraBold24SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold24SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold24SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold24SecondaryDark(
          context,
        ),
      );

  static Widget extraBold24SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold24SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold24Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold24Accent(
          context,
        ),
      );

  static Widget extraBold24AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold24AccentInternal(
          context,
        ),
      );

  static Widget extraBold24AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold24Accent(
          context,
        ),
      ),
    );
  }

  static Widget extraBold24AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold24AccentLight(
          context,
        ),
      );

  static Widget extraBold24AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold24AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold24AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold24AccentDark(
          context,
        ),
      );

  static Widget extraBold24AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold24AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold24Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold24Grey(
          context,
        ),
      );

  static Widget extraBold24GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold24Grey(
          context,
        ),
      ),
    );
  }

  static Widget extraBold24GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold24GreyLight(
          context,
        ),
      );

  static Widget extraBold24GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold24GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold24GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold24GreyDark(
          context,
        ),
      );

  static Widget extraBold24GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold24GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold24Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold24Info(
          context,
        ),
      );

  static Widget extraBold24InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold24Info(
          context,
        ),
      ),
    );
  }

  static Widget extraBold24InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold24InfoLight(
          context,
        ),
      );

  static Widget extraBold24InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold24InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold24InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold24InfoDark(
          context,
        ),
      );

  static Widget extraBold24InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold24InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold24Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold24Success(
          context,
        ),
      );

  static Widget extraBold24SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold24Success(
          context,
        ),
      ),
    );
  }

  static Widget extraBold24SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold24SuccessLight(
          context,
        ),
      );

  static Widget extraBold24SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold24SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold24SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold24SuccessDark(
          context,
        ),
      );

  static Widget extraBold24SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold24SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold24Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold24Warning(
          context,
        ),
      );

  static Widget extraBold24WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold24Warning(
          context,
        ),
      ),
    );
  }

  static Widget extraBold24WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold24WarningLight(
          context,
        ),
      );

  static Widget extraBold24WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold24WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold24WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold24WarningDark(
          context,
        ),
      );

  static Widget extraBold24WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold24WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold24Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold24Danger(
          context,
        ),
      );

  static Widget extraBold24DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold24Danger(
          context,
        ),
      ),
    );
  }

  static Widget extraBold24DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold24DangerLight(
          context,
        ),
      );

  static Widget extraBold24DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold24DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold24DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold24DangerDark(
          context,
        ),
      );

  static Widget extraBold24DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold24DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold26White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold26White(
          context,
        ),
      );

  static Widget extraBold26WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold26WhiteAlways(
          context,
        ),
      );

  static Widget extraBold26Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold26Black(
          context,
        ),
      );

  static Widget extraBold26BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold26BlackAlways(
          context,
        ),
      );

  static Widget extraBold26Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold26Primary(
          context,
        ),
      );

  static Widget extraBold26PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold26PrimaryInternal(
          context,
        ),
      );

  static Widget extraBold26PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold26Primary(
          context,
        ),
      ),
    );
  }

  static Widget extraBold26PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold26PrimaryLight(
          context,
        ),
      );

  static Widget extraBold26PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold26PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold26PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold26PrimaryDark(
          context,
        ),
      );

  static Widget extraBold26PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold26PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold26Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold26Secondary(
          context,
        ),
      );

  static Widget extraBold26SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold26SecondaryInternal(
          context,
        ),
      );

  static Widget extraBold26SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold26Secondary(
          context,
        ),
      ),
    );
  }

  static Widget extraBold26SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold26SecondaryLight(
          context,
        ),
      );

  static Widget extraBold26SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold26SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold26SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold26SecondaryDark(
          context,
        ),
      );

  static Widget extraBold26SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold26SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold26Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold26Accent(
          context,
        ),
      );

  static Widget extraBold26AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold26AccentInternal(
          context,
        ),
      );

  static Widget extraBold26AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold26Accent(
          context,
        ),
      ),
    );
  }

  static Widget extraBold26AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold26AccentLight(
          context,
        ),
      );

  static Widget extraBold26AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold26AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold26AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold26AccentDark(
          context,
        ),
      );

  static Widget extraBold26AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold26AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold26Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold26Grey(
          context,
        ),
      );

  static Widget extraBold26GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold26Grey(
          context,
        ),
      ),
    );
  }

  static Widget extraBold26GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold26GreyLight(
          context,
        ),
      );

  static Widget extraBold26GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold26GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold26GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold26GreyDark(
          context,
        ),
      );

  static Widget extraBold26GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold26GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold26Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold26Info(
          context,
        ),
      );

  static Widget extraBold26InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold26Info(
          context,
        ),
      ),
    );
  }

  static Widget extraBold26InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold26InfoLight(
          context,
        ),
      );

  static Widget extraBold26InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold26InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold26InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold26InfoDark(
          context,
        ),
      );

  static Widget extraBold26InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold26InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold26Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold26Success(
          context,
        ),
      );

  static Widget extraBold26SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold26Success(
          context,
        ),
      ),
    );
  }

  static Widget extraBold26SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold26SuccessLight(
          context,
        ),
      );

  static Widget extraBold26SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold26SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold26SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold26SuccessDark(
          context,
        ),
      );

  static Widget extraBold26SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold26SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold26Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold26Warning(
          context,
        ),
      );

  static Widget extraBold26WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold26Warning(
          context,
        ),
      ),
    );
  }

  static Widget extraBold26WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold26WarningLight(
          context,
        ),
      );

  static Widget extraBold26WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold26WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold26WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold26WarningDark(
          context,
        ),
      );

  static Widget extraBold26WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold26WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold26Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold26Danger(
          context,
        ),
      );

  static Widget extraBold26DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold26Danger(
          context,
        ),
      ),
    );
  }

  static Widget extraBold26DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold26DangerLight(
          context,
        ),
      );

  static Widget extraBold26DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold26DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold26DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold26DangerDark(
          context,
        ),
      );

  static Widget extraBold26DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold26DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold28White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold28White(
          context,
        ),
      );

  static Widget extraBold28WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold28WhiteAlways(
          context,
        ),
      );

  static Widget extraBold28Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold28Black(
          context,
        ),
      );

  static Widget extraBold28BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold28BlackAlways(
          context,
        ),
      );

  static Widget extraBold28Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold28Primary(
          context,
        ),
      );

  static Widget extraBold28PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold28PrimaryInternal(
          context,
        ),
      );

  static Widget extraBold28PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold28Primary(
          context,
        ),
      ),
    );
  }

  static Widget extraBold28PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold28PrimaryLight(
          context,
        ),
      );

  static Widget extraBold28PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold28PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold28PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold28PrimaryDark(
          context,
        ),
      );

  static Widget extraBold28PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold28PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold28Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold28Secondary(
          context,
        ),
      );

  static Widget extraBold28SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold28SecondaryInternal(
          context,
        ),
      );

  static Widget extraBold28SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold28Secondary(
          context,
        ),
      ),
    );
  }

  static Widget extraBold28SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold28SecondaryLight(
          context,
        ),
      );

  static Widget extraBold28SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold28SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold28SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold28SecondaryDark(
          context,
        ),
      );

  static Widget extraBold28SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold28SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold28Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold28Accent(
          context,
        ),
      );

  static Widget extraBold28AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold28AccentInternal(
          context,
        ),
      );

  static Widget extraBold28AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold28Accent(
          context,
        ),
      ),
    );
  }

  static Widget extraBold28AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold28AccentLight(
          context,
        ),
      );

  static Widget extraBold28AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold28AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold28AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold28AccentDark(
          context,
        ),
      );

  static Widget extraBold28AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold28AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold28Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold28Grey(
          context,
        ),
      );

  static Widget extraBold28GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold28Grey(
          context,
        ),
      ),
    );
  }

  static Widget extraBold28GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold28GreyLight(
          context,
        ),
      );

  static Widget extraBold28GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold28GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold28GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold28GreyDark(
          context,
        ),
      );

  static Widget extraBold28GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold28GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold28Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold28Info(
          context,
        ),
      );

  static Widget extraBold28InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold28Info(
          context,
        ),
      ),
    );
  }

  static Widget extraBold28InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold28InfoLight(
          context,
        ),
      );

  static Widget extraBold28InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold28InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold28InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold28InfoDark(
          context,
        ),
      );

  static Widget extraBold28InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold28InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold28Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold28Success(
          context,
        ),
      );

  static Widget extraBold28SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold28Success(
          context,
        ),
      ),
    );
  }

  static Widget extraBold28SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold28SuccessLight(
          context,
        ),
      );

  static Widget extraBold28SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold28SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold28SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold28SuccessDark(
          context,
        ),
      );

  static Widget extraBold28SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold28SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold28Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold28Warning(
          context,
        ),
      );

  static Widget extraBold28WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold28Warning(
          context,
        ),
      ),
    );
  }

  static Widget extraBold28WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold28WarningLight(
          context,
        ),
      );

  static Widget extraBold28WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold28WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold28WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold28WarningDark(
          context,
        ),
      );

  static Widget extraBold28WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold28WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold28Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold28Danger(
          context,
        ),
      );

  static Widget extraBold28DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold28Danger(
          context,
        ),
      ),
    );
  }

  static Widget extraBold28DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold28DangerLight(
          context,
        ),
      );

  static Widget extraBold28DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold28DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold28DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold28DangerDark(
          context,
        ),
      );

  static Widget extraBold28DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold28DangerDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold32White(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold32White(
          context,
        ),
      );

  static Widget extraBold32WhiteAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold32WhiteAlways(
          context,
        ),
      );

  static Widget extraBold32Black(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold32Black(
          context,
        ),
      );

  static Widget extraBold32BlackAlways(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold32BlackAlways(
          context,
        ),
      );

  static Widget extraBold32Primary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold32Primary(
          context,
        ),
      );

  static Widget extraBold32PrimaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold32PrimaryInternal(
          context,
        ),
      );

  static Widget extraBold32PrimaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold32Primary(
          context,
        ),
      ),
    );
  }

  static Widget extraBold32PrimaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold32PrimaryLight(
          context,
        ),
      );

  static Widget extraBold32PrimaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold32PrimaryLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold32PrimaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold32PrimaryDark(
          context,
        ),
      );

  static Widget extraBold32PrimaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.primaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold32PrimaryDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold32Secondary(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold32Secondary(
          context,
        ),
      );

  static Widget extraBold32SecondaryInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold32SecondaryInternal(
          context,
        ),
      );

  static Widget extraBold32SecondaryGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold32Secondary(
          context,
        ),
      ),
    );
  }

  static Widget extraBold32SecondaryLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold32SecondaryLight(
          context,
        ),
      );

  static Widget extraBold32SecondaryLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold32SecondaryLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold32SecondaryDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold32SecondaryDark(
          context,
        ),
      );

  static Widget extraBold32SecondaryDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.secondaryDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold32SecondaryDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold32Accent(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold32Accent(
          context,
        ),
      );

  static Widget extraBold32AccentInternal(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold32AccentInternal(
          context,
        ),
      );

  static Widget extraBold32AccentGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold32Accent(
          context,
        ),
      ),
    );
  }

  static Widget extraBold32AccentLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold32AccentLight(
          context,
        ),
      );

  static Widget extraBold32AccentLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold32AccentLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold32AccentDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold32AccentDark(
          context,
        ),
      );

  static Widget extraBold32AccentDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.accentDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold32AccentDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold32Grey(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold32Grey(
          context,
        ),
      );

  static Widget extraBold32GreyGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold32Grey(
          context,
        ),
      ),
    );
  }

  static Widget extraBold32GreyLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold32GreyLight(
          context,
        ),
      );

  static Widget extraBold32GreyLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold32GreyLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold32GreyDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold32GreyDark(
          context,
        ),
      );

  static Widget extraBold32GreyDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.greyDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold32GreyDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold32Info(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold32Info(
          context,
        ),
      );

  static Widget extraBold32InfoGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold32Info(
          context,
        ),
      ),
    );
  }

  static Widget extraBold32InfoLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold32InfoLight(
          context,
        ),
      );

  static Widget extraBold32InfoLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold32InfoLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold32InfoDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold32InfoDark(
          context,
        ),
      );

  static Widget extraBold32InfoDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.infoDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold32InfoDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold32Success(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold32Success(
          context,
        ),
      );

  static Widget extraBold32SuccessGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold32Success(
          context,
        ),
      ),
    );
  }

  static Widget extraBold32SuccessLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold32SuccessLight(
          context,
        ),
      );

  static Widget extraBold32SuccessLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold32SuccessLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold32SuccessDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold32SuccessDark(
          context,
        ),
      );

  static Widget extraBold32SuccessDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.successDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold32SuccessDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold32Warning(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold32Warning(
          context,
        ),
      );

  static Widget extraBold32WarningGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold32Warning(
          context,
        ),
      ),
    );
  }

  static Widget extraBold32WarningLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold32WarningLight(
          context,
        ),
      );

  static Widget extraBold32WarningLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold32WarningLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold32WarningDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold32WarningDark(
          context,
        ),
      );

  static Widget extraBold32WarningDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.warningDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold32WarningDark(
          context,
        ),
      ),
    );
  }

  static Widget extraBold32Danger(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold32Danger(
          context,
        ),
      );

  static Widget extraBold32DangerGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold32Danger(
          context,
        ),
      ),
    );
  }

  static Widget extraBold32DangerLight(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold32DangerLight(
          context,
        ),
      );

  static Widget extraBold32DangerLightGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerLightGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold32DangerLight(
          context,
        ),
      ),
    );
  }

  static Widget extraBold32DangerDark(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) =>
      Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold32DangerDark(
          context,
        ),
      );

  static Widget extraBold32DangerDarkGradient(
    BuildContext context,
    String text, {
    TextAlign? align,
    TextOverflow? overflow,
  }) {
    final FPCTheme theme = context.fpcTheme;

    return FPCGradientMask(
      gradient: theme.dangerDarkGradient,
      child: Text(
        text,
        textAlign: align,
        overflow: overflow,
        style: FPCTextStyle.extraBold32DangerDark(
          context,
        ),
      ),
    );
  }

}
