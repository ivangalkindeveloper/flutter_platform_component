import 'package:flutter_platform_component/flutter_platform_component.dart';

import 'package:flutter/widgets.dart' show BuildContext;
import 'package:flutter/cupertino.dart'
    show CupertinoThemeData, CupertinoTextThemeData;
import 'package:flutter/material.dart'
    show
        AppBarTheme,
        BadgeThemeData,
        BottomAppBarTheme,
        BottomNavigationBarThemeData,
        BottomSheetThemeData,
        ButtonBarThemeData,
        ButtonThemeData,
        CardTheme,
        CheckboxThemeData,
        ChipThemeData,
        Colors,
        DataTableThemeData,
        DatePickerThemeData,
        DialogTheme,
        DividerThemeData,
        DrawerThemeData,
        DropdownMenuThemeData,
        ElevatedButtonThemeData,
        ExpansionTileThemeData,
        FilledButtonThemeData,
        FloatingActionButtonThemeData,
        IconButtonThemeData,
        IconThemeData,
        InputDecorationTheme,
        ListTileThemeData,
        MaterialBannerThemeData,
        MaterialStateProperty,
        MenuBarThemeData,
        MenuButtonThemeData,
        MenuThemeData,
        NavigationBarThemeData,
        NavigationDrawerThemeData,
        NavigationRailThemeData,
        OutlinedButtonThemeData,
        PopupMenuThemeData,
        ProgressIndicatorThemeData,
        RadioThemeData,
        ScrollbarThemeData,
        SearchBarThemeData,
        SearchViewThemeData,
        SegmentedButtonThemeData,
        SliderThemeData,
        SnackBarThemeData,
        SwitchThemeData,
        TabBarTheme,
        TextButtonThemeData,
        TextSelectionThemeData,
        ThemeData,
        TimePickerThemeData,
        ToggleButtonsThemeData,
        TooltipThemeData;

extension FPCBuildContextExtension on BuildContext {
  FPCAnimationScope get fpcAnimationScope => FPCAnimationScope.of(this);
  FPCAnimation get fpcAnimation => FPCAnimationScope.of(this).animation;
  void fpcChangeAnimation(FPCAnimation animation) =>
      FPCAnimationScope.of(this).changeAnimation(animation);

  FPCTimeOfDayScope get fpcTimeOfDayScope => FPCTimeOfDayScope.of(this);
  FPCTimeOfDay get fpcTimeOfDay => FPCTimeOfDayScope.of(this).timeOfDay;
  void fpcChangeTimeOfDay(FPCTimeOfDay timeOfDay) =>
      FPCTimeOfDayScope.of(this).changeTimeOfDay(timeOfDay);

  FPCDateTimeScope get fpcDateTimeScope => FPCDateTimeScope.of(this);
  FPCDateTime get fpcDateTime => FPCDateTimeScope.of(this).dateTime;
  void fpcChangeDateTime(FPCDateTime dateTime) =>
      FPCDateTimeScope.of(this).changeDateTime(dateTime);

  FPCDurationScope get fpcDurationScope => FPCDurationScope.of(this);
  FPCDuration get fpcDuration => FPCDurationScope.of(this).duration;
  void fpcChangeDuration(FPCDuration duration) =>
      FPCDurationScope.of(this).changeDuration(duration);

  FPCPlatformScope get fpcPlatformScope => FPCPlatformScope.of(this);
  FPCPlatform get fpcPlatform => FPCPlatformScope.of(this).platform;
  void fpcChangePlatform(FPCPlatform platform) =>
      FPCPlatformScope.of(this).changePlatform(platform);

  FPCHapticScope get fpcHapticScope => FPCHapticScope.of(this);
  FPCHaptic get fpcHaptic => FPCHapticScope.of(this).haptic;
  void fpcChangeHaptic(FPCHaptic haptic) =>
      FPCHapticScope.of(this).changeHaptic(haptic);

  FPCThemeScope get fpcThemeScope => FPCThemeScope.of(this);
  FPCTheme get fpcTheme => FPCThemeScope.of(this).theme;
  void fpcChangeTheme(FPCTheme theme) =>
      FPCThemeScope.of(this).changeTheme(theme);

  FPCSizeScope get fpcSizeScope => FPCSizeScope.of(this);
  FPCSize get fpcSize => FPCSizeScope.of(this).size;
  void fpcChangeSize(FPCSize size) => FPCSizeScope.of(this).changeSize(size);

  FPCFontScope get fpcFontScope => FPCFontScope.of(this);
  FPCFont get fpcFont => FPCFontScope.of(this).font;
  void fpcChangeTextStyle(FPCFont font) =>
      FPCFontScope.of(this).changeFont(font);

  CupertinoThemeData get fpcMergedCupertinoTheme {
    final FPCTheme theme = this.fpcTheme;
    final FPCFont font = this.fpcFont;

    return CupertinoThemeData(
      brightness: theme.brightness,
      primaryColor: theme.primary,
      primaryContrastingColor: theme.primary,
      textTheme: CupertinoTextThemeData(
        textStyle: theme.cupertinoThemeData?.textTheme.textStyle.copyWith(
          color: theme.black,
          fontFamily: font.familyRegular,
        ),
        actionTextStyle: theme.cupertinoThemeData?.textTheme.textStyle.copyWith(
          color: theme.primary,
          fontFamily: font.familyRegular,
        ),
        tabLabelTextStyle:
            theme.cupertinoThemeData?.textTheme.textStyle.copyWith(
          color: theme.grey,
          fontFamily: font.familyRegular,
        ),
        navTitleTextStyle:
            theme.cupertinoThemeData?.textTheme.textStyle.copyWith(
          color: theme.black,
          fontFamily: font.familyRegular,
        ),
        navLargeTitleTextStyle:
            theme.cupertinoThemeData?.textTheme.textStyle.copyWith(
          color: theme.black,
          fontFamily: font.familySemiBold,
        ),
        navActionTextStyle:
            theme.cupertinoThemeData?.textTheme.textStyle.copyWith(
          color: theme.primary,
          fontFamily: font.familyRegular,
        ),
        pickerTextStyle: theme.cupertinoThemeData?.textTheme.textStyle.copyWith(
          color: theme.black,
          fontFamily: font.familyMedium,
        ),
        dateTimePickerTextStyle:
            theme.cupertinoThemeData?.textTheme.textStyle.copyWith(
          color: theme.black,
          fontFamily: font.familyMedium,
        ),
      ),
      barBackgroundColor: theme.backgroundComponent,
      scaffoldBackgroundColor: theme.backgroundScaffold,
      applyThemeToAll: true,
    );
  }

  ThemeData get fpcMergedMaterialTheme {
    final FPCTheme theme = this.fpcTheme;
    final FPCFont font = this.fpcFont;

    final ThemeData? materialThemeData = theme.materialThemeData;
    final InputDecorationTheme? inputDecorationTheme =
        materialThemeData?.inputDecorationTheme;

    return ThemeData(
      cupertinoOverrideTheme: this.fpcMergedCupertinoTheme,
      inputDecorationTheme: InputDecorationTheme(
        labelStyle: inputDecorationTheme?.labelStyle?.copyWith(
          color: theme.primary,
        ),
        floatingLabelStyle: inputDecorationTheme?.floatingLabelStyle?.copyWith(
          color: theme.black,
        ),
        helperStyle: inputDecorationTheme?.helperStyle?.copyWith(
          color: theme.grey,
        ),
        // helperMaxLines: ,
        hintStyle: inputDecorationTheme?.hintStyle?.copyWith(
          color: theme.greyLight,
        ),
        // hintFadeDuration: ,
        errorStyle: inputDecorationTheme?.errorStyle?.copyWith(
          color: theme.danger,
        ),
        // errorMaxLines: ,
        // floatingLabelBehavior: ,
        // floatingLabelAlignment: ,
        // isDense: ,
        // contentPadding: ,
        // isCollapsed: ,
        iconColor: theme.primary,
        prefixStyle: inputDecorationTheme?.prefixStyle?.copyWith(
          color: theme.black,
        ),
        prefixIconColor: theme.primary,
        suffixStyle: inputDecorationTheme?.suffixStyle?.copyWith(
          color: theme.black,
        ),
        suffixIconColor: theme.primary,
        counterStyle: inputDecorationTheme?.counterStyle?.copyWith(
          color: theme.black,
        ),
        filled: true,
        fillColor: theme.backgroundComponent,
        // activeIndicatorBorder: ,
        // outlineBorder: ,
        focusColor: theme.primary,
        hoverColor: theme.grey,
        // errorBorder: ,
        // focusedBorder: ,
        // focusedErrorBorder: ,
        // disabledBorder: ,
        // enabledBorder: ,
        // border: ,
        // constraints: ,
      ),
      scrollbarTheme: ScrollbarThemeData(
        // thumbVisibility: ,
        // thickness: ,
        // trackVisibility: ,
        // radius: ,
        thumbColor: MaterialStateProperty.all(
          theme.grey,
        ),
        trackColor: MaterialStateProperty.all(
          theme.grey,
        ),
        trackBorderColor: MaterialStateProperty.all(
          theme.grey,
        ),
        // crossAxisMargin: ,
        // mainAxisMargin: ,
        // minThumbLength: ,
        // interactive: ,
      ),
      brightness: theme.brightness,
      // canvasColor: ,
      cardColor: theme.backgroundComponent,
      // colorScheme: ,
      // colorSchemeSeed: ,
      dialogBackgroundColor: theme.backgroundComponent,
      disabledColor: theme.grey,
      dividerColor: theme.grey,
      focusColor: theme.primary,
      highlightColor: theme.grey,
      hintColor: theme.greyLight,
      hoverColor: theme.grey,
      indicatorColor: theme.primary,
      primaryColor: theme.primary,
      primaryColorDark: theme.primaryDark,
      primaryColorLight: theme.primaryLight,
      // primarySwatch: ,
      scaffoldBackgroundColor: theme.backgroundScaffold,
      secondaryHeaderColor: theme.primary,
      shadowColor: theme.black,
      splashColor: theme.grey,
      unselectedWidgetColor: theme.grey,
      fontFamily: font.familyRegular,
      // fontFamilyFallback: ,
      package: font.package,
      iconTheme: IconThemeData(
        // size: ,
        // fill: ,
        // weight: ,
        // grade: ,
        // opticalSize: ,
        color: theme.black,
        // opacity: ,
        // shadows: ,
      ),
      primaryIconTheme: IconThemeData(
        // size: ,
        // fill: ,
        // weight: ,
        // grade: ,
        // opticalSize: ,
        color: theme.primary,
        // opacity: ,
        // shadows: ,
      ),
      // primaryTextTheme: ,
      // textTheme: ,
      // typography: ,
      appBarTheme: AppBarTheme(
        color: theme.primary,
        backgroundColor: theme.backgroundComponent,
        foregroundColor: theme.backgroundComponent,
        // elevation: ,
        // scrolledUnderElevation: ,
        shadowColor: theme.blackAlways,
        // surfaceTintColor: ,
        iconTheme: IconThemeData(
          // size: ,
          // fill: ,
          // weight: ,
          // grade: ,
          // opticalSize: ,
          color: theme.black,
          // opacity: ,
          // shadows: ,
        ),
        actionsIconTheme: IconThemeData(
          // size: ,
          // fill: ,
          // weight: ,
          // grade: ,
          // opticalSize: ,
          color: theme.primary,
          // opacity: ,
          // shadows: ,
        ),
        // toolbarTextStyle: ,
        // titleTextStyle: ,
        // systemOverlayStyle: ,
      ),
      badgeTheme: BadgeThemeData(
        backgroundColor: theme.primary,
        textColor: theme.whiteAlways,
        // smallSize: ,
        // largeSize: ,
        // textStyle: ,
        // padding: ,
        // alignment: ,
        // offset: ,
      ),
      bannerTheme: MaterialBannerThemeData(
        backgroundColor: theme.primary,
        // surfaceTintColor: ,
        shadowColor: theme.blackAlways,
        dividerColor: theme.grey,
        // contentTextStyle: ,
        // elevation: ,
        // padding: ,
        // leadingPadding: ,
      ),
      bottomAppBarTheme: BottomAppBarTheme(
        color: theme.backgroundComponent,
        // elevation: ,
        // shape: ,
        // height: ,
        // surfaceTintColor: ,
        shadowColor: theme.blackAlways,
        // padding: ,
      ),
      bottomNavigationBarTheme: BottomNavigationBarThemeData(
        backgroundColor: theme.backgroundComponent,
        // elevation: ,
        selectedIconTheme: IconThemeData(
          // size: ,
          // fill: ,
          // weight: ,
          // grade: ,
          // opticalSize: ,
          color: theme.primary,
          // opacity: ,
          // shadows: ,
        ),
        unselectedIconTheme: IconThemeData(
          // size: ,
          // fill: ,
          // weight: ,
          // grade: ,
          // opticalSize: ,
          color: theme.grey,
          // opacity: ,
          // shadows: ,
        ),
        selectedItemColor: theme.primary,
        unselectedItemColor: theme.grey,
        // selectedLabelStyle: ,
        // unselectedLabelStyle: ,
        // showSelectedLabels: ,
        // showUnselectedLabels: ,
        // type: ,
        // enableFeedback: ,
        // landscapeLayout: ,
        // mouseCursor: ,
      ),
      bottomSheetTheme: BottomSheetThemeData(
        backgroundColor: theme.backgroundScaffold,
        // surfaceTintColor: ,
        // elevation: ,
        modalBackgroundColor: theme.backgroundScaffold,
        modalBarrierColor: theme.barrierExpandedBottomSheetMaterial,
        shadowColor: theme.blackAlways,
        // modalElevation: ,
        // shape: ,
        // showDragHandle: ,
        // dragHandleColor: ,
        // dragHandleSize: ,
        // clipBehavior: ,
        // constraints: ,
      ),
      buttonBarTheme: const ButtonBarThemeData(
          // alignment: ,
          // mainAxisSize: ,
          // buttonTextTheme: ,
          // buttonMinWidth: ,
          // buttonHeight: ,
          // buttonPadding: ,
          // buttonAlignedDropdown: ,
          // layoutBehavior: ,
          // overflowDirection: ,
          ),
      buttonTheme: ButtonThemeData(
        // textTheme: ,
        // minWidth: ,
        // height: ,
        // padding: ,
        // shape: ,
        // layoutBehavior: ,
        // alignedDropdown: ,
        buttonColor: theme.primary,
        disabledColor: theme.grey,
        focusColor: theme.primary,
        hoverColor: theme.grey,
        highlightColor: theme.grey,
        splashColor: theme.grey,
        // colorScheme: ,
        // materialTapTargetSize: ,
      ),
      cardTheme: CardTheme(
        // clipBehavior: ,
        color: theme.backgroundComponent,
        shadowColor: theme.blackAlways,
        // surfaceTintColor: ,
        // elevation: ,
        // margin: ,
        // shape: ,
      ),
      checkboxTheme: CheckboxThemeData(
        // mouseCursor: ,
        fillColor: MaterialStateProperty.all(
          theme.backgroundComponent,
        ),
        checkColor: MaterialStateProperty.all(
          theme.primary,
        ),
        // overlayColor: ,
        // splashRadius: ,
        // materialTapTargetSize: ,
        // visualDensity: ,
        // shape: ,
        // side: ,
      ),
      chipTheme: ChipThemeData(
        color: MaterialStateProperty.all(
          theme.primary,
        ),
        backgroundColor: theme.backgroundComponent,
        deleteIconColor: theme.danger,
        disabledColor: theme.grey,
        selectedColor: theme.primary,
        secondarySelectedColor: theme.primary,
        shadowColor: theme.blackAlways,
        // surfaceTintColor: ,
        selectedShadowColor: theme.blackAlways,
        // showCheckmark: ,
        // checkmarkColor: ,
        // labelPadding: ,
        // padding: ,
        // side: ,
        // shape: ,
        // labelStyle: ,
        // secondaryLabelStyle: ,
        // brightness: ,
        // elevation: ,
        // pressElevation: ,
        // iconTheme: ,
      ),
      dataTableTheme: DataTableThemeData(
        // decoration: ,
        dataRowColor: MaterialStateProperty.all(
          theme.black,
        ),
        // dataRowMinHeight: ,
        // dataRowMaxHeight: ,
        // dataTextStyle: ,
        headingRowColor: MaterialStateProperty.all(
          theme.white,
        ),
        // headingRowHeight: ,
        // headingTextStyle: ,
        // horizontalMargin: ,
        // columnSpacing: ,
        // dividerThickness: ,
        // checkboxHorizontalMargin: ,
        // headingCellCursor: ,
        // dataRowCursor: ,
      ),
      datePickerTheme: DatePickerThemeData(
        backgroundColor: theme.backgroundComponent,
        // elevation: ,
        shadowColor: theme.black,
        // surfaceTintColor: ,
        // shape: ,
        headerBackgroundColor: theme.primary,
        headerForegroundColor: theme.primary,
        // headerHeadlineStyle: ,
        // headerHelpStyle: ,
        // weekdayStyle: ,
        // dayStyle: ,
        dayForegroundColor: MaterialStateProperty.all(
          theme.primary,
        ),
        dayBackgroundColor: MaterialStateProperty.all(
          theme.backgroundComponent,
        ),
        dayOverlayColor: MaterialStateProperty.all(
          theme.primary,
        ),
        todayForegroundColor: MaterialStateProperty.all(
          theme.primary,
        ),
        todayBackgroundColor: MaterialStateProperty.all(
          theme.backgroundComponent,
        ),
        // todayBorder: ,
        // yearStyle: ,
        yearForegroundColor: MaterialStateProperty.all(
          theme.primary,
        ),
        yearBackgroundColor: MaterialStateProperty.all(
          theme.backgroundComponent,
        ),
        yearOverlayColor: MaterialStateProperty.all(
          theme.primary,
        ),
        rangePickerBackgroundColor: theme.primary,
        // rangePickerElevation: ,
        rangePickerShadowColor: theme.blackAlways,
        // rangePickerSurfaceTintColor: ,
        // rangePickerShape: ,
        rangePickerHeaderBackgroundColor: theme.backgroundComponent,
        rangePickerHeaderForegroundColor: theme.primary,
        // rangePickerHeaderHeadlineStyle: ,
        // rangePickerHeaderHelpStyle: ,
        rangeSelectionBackgroundColor: theme.backgroundComponent,
        rangeSelectionOverlayColor: MaterialStateProperty.all(
          theme.primary,
        ),
        dividerColor: theme.grey,
        // inputDecorationTheme: ,
        // cancelButtonStyle: ,
        // confirmButtonStyle: ,
      ),
      dialogTheme: DialogTheme(
        backgroundColor: theme.backgroundComponent,
        // elevation: ,
        shadowColor: theme.blackAlways,
        // surfaceTintColor: ,
        // shape: ,
        // alignment: ,
        iconColor: theme.primary,
        // titleTextStyle: ,
        // contentTextStyle: ,
        // actionsPadding: ,
      ),
      dividerTheme: DividerThemeData(
        color: theme.grey,
        // space: ,
        // thickness: ,
        // indent: ,
        // endIndent: ,
      ),
      drawerTheme: DrawerThemeData(
        backgroundColor: theme.backgroundScaffold,
        // scrimColor: ,
        // elevation: ,
        // shadowColor: ,
        // surfaceTintColor: ,
        // shape: ,
        // endShape: ,
        // width: ,
      ),
      dropdownMenuTheme: const DropdownMenuThemeData(
          // textStyle: ,
          // inputDecorationTheme: ,
          // menuStyle: ,
          ),
      elevatedButtonTheme: const ElevatedButtonThemeData(
          // style: ,
          ),
      expansionTileTheme: ExpansionTileThemeData(
        backgroundColor: theme.backgroundComponent,
        // collapsedBackgroundColor: ,
        // tilePadding: ,
        // expandedAlignment: ,
        // childrenPadding: ,
        // iconColor: ,
        // collapsedIconColor: ,
        // textColor: ,
        // collapsedTextColor: ,
        // shape: ,
        // collapsedShape: ,
        // clipBehavior: ,
      ),
      filledButtonTheme: const FilledButtonThemeData(
          // style: ,
          ),
      floatingActionButtonTheme: FloatingActionButtonThemeData(
        foregroundColor: theme.primary,
        backgroundColor: theme.primary,
        focusColor: theme.grey,
        hoverColor: theme.grey,
        splashColor: theme.grey,
        // elevation: ,
        // focusElevation: ,
        // hoverElevation: ,
        // disabledElevation: ,
        // highlightElevation: ,
        // shape: ,
        // enableFeedback: ,
        // iconSize: ,
        // sizeConstraints: ,
        // smallSizeConstraints: ,
        // largeSizeConstraints: ,
        // extendedSizeConstraints: ,
        // extendedIconLabelSpacing: ,
        // extendedPadding: ,
        // extendedTextStyle: ,
        // mouseCursor: ,
      ),
      iconButtonTheme: const IconButtonThemeData(
          // style: ,
          ),
      listTileTheme: ListTileThemeData(
        // dense: ,
        // shape: ,
        // style: ,
        selectedColor: theme.backgroundComponent,
        iconColor: theme.primary,
        textColor: theme.black,
        // titleTextStyle: ,
        // subtitleTextStyle: ,
        // leadingAndTrailingTextStyle: ,
        // contentPadding: ,
        // tileColor: ,
        selectedTileColor: theme.backgroundComponent,
        // horizontalTitleGap: ,
        // minVerticalPadding: ,
        // minLeadingWidth: ,
        // enableFeedback: ,
        // mouseCursor: ,
        // visualDensity: ,
        // titleAlignment: ,
      ),
      menuBarTheme: const MenuBarThemeData(
          // style: ,
          ),
      menuButtonTheme: const MenuButtonThemeData(
          // style: ,
          ),
      menuTheme: const MenuThemeData(
          // style: ,
          ),
      navigationBarTheme: NavigationBarThemeData(
        // height: ,
        backgroundColor: theme.backgroundComponent,
        // elevation: ,
        shadowColor: theme.blackAlways,
        // surfaceTintColor: ,
        indicatorColor: theme.primary,
        // indicatorShape: ,
        // labelTextStyle: ,
        // iconTheme: ,
        // labelBehavior: ,
        // overlayColor: ,
      ),
      navigationDrawerTheme: NavigationDrawerThemeData(
        // tileHeight: ,
        backgroundColor: theme.backgroundComponent,
        // elevation: ,
        shadowColor: theme.blackAlways,
        // surfaceTintColor: ,
        indicatorColor: theme.primary,
        // indicatorShape: ,
        // indicatorSize: ,
        // labelTextStyle: ,
        // iconTheme: ,
      ),
      navigationRailTheme: NavigationRailThemeData(
        backgroundColor: theme.backgroundComponent,
        // elevation: ,
        // unselectedLabelTextStyle: ,
        // selectedLabelTextStyle: ,
        // unselectedIconTheme: ,
        // selectedIconTheme: ,
        // groupAlignment: ,
        // labelType: ,
        // useIndicator: ,
        indicatorColor: theme.primary,
        // indicatorShape: ,
        // minWidth: ,
        // minExtendedWidth: ,
      ),
      outlinedButtonTheme: const OutlinedButtonThemeData(
          // style: ,
          ),
      popupMenuTheme: PopupMenuThemeData(
        color: theme.backgroundComponent,
        // shape: ,
        // elevation: ,
        shadowColor: theme.blackAlways,
        // surfaceTintColor: ,
        // textStyle: ,
        // labelTextStyle: ,
        // enableFeedback: ,
        // mouseCursor: ,
        // position: ,
        // iconColor: ,
        // iconSize: ,
      ),
      progressIndicatorTheme: ProgressIndicatorThemeData(
        color: Colors.transparent,
        linearTrackColor: theme.primary,
        // linearMinHeight: ,
        circularTrackColor: theme.primary,
        refreshBackgroundColor: theme.backgroundComponent,
      ),
      radioTheme: RadioThemeData(
        // mouseCursor: ,
        fillColor: MaterialStateProperty.all(
          theme.primary,
        ),
        // overlayColor: ,
        // splashRadius: ,
        // materialTapTargetSize: ,
        // visualDensity: ,
      ),
      searchBarTheme: SearchBarThemeData(
        // elevation: ,
        backgroundColor: MaterialStateProperty.all(
          theme.backgroundComponent,
        ),
        shadowColor: MaterialStateProperty.all(
          theme.blackAlways,
        ),
        // surfaceTintColor: ,
        // overlayColor: ,
        // side: ,
        // shape: ,
        // padding: ,
        // textStyle: ,
        // hintStyle: ,
        // constraints: ,
        // textCapitalization: ,
      ),
      searchViewTheme: SearchViewThemeData(
        backgroundColor: theme.backgroundComponent,
        // elevation: ,
        // surfaceTintColor: ,
        // constraints: ,
        // side: ,
        // shape: ,
        // headerTextStyle: ,
        // headerHintStyle: ,
        dividerColor: theme.grey,
      ),
      segmentedButtonTheme: const SegmentedButtonThemeData(
          // style: ,
          // selectedIcon: ,
          ),
      sliderTheme: SliderThemeData(
        // trackHeight: ,
        activeTrackColor: theme.primary,
        inactiveTrackColor: theme.grey,
        // secondaryActiveTrackColor: ,
        disabledActiveTrackColor: theme.grey,
        disabledInactiveTrackColor: theme.greyLight,
        // disabledSecondaryActiveTrackColor: ,
        activeTickMarkColor: theme.primary,
        inactiveTickMarkColor: theme.primary,
        disabledActiveTickMarkColor: theme.greyDark,
        disabledInactiveTickMarkColor: theme.greyDark,
        // thumbColor: ,
        // overlappingShapeStrokeColor: ,
        // disabledThumbColor: ,
        // overlayColor: ,
        // valueIndicatorColor: ,
        // overlayShape: ,
        // tickMarkShape: ,
        // thumbShape: ,
        // trackShape: ,
        // valueIndicatorShape: ,
        // rangeTickMarkShape: ,
        // rangeThumbShape: ,
        // rangeTrackShape: ,
        // rangeValueIndicatorShape: ,
        // showValueIndicator: ,
        // valueIndicatorTextStyle: ,
        // minThumbSeparation: ,
        // thumbSelector: ,
        // mouseCursor: ,
        // allowedInteraction: ,
      ),
      snackBarTheme: SnackBarThemeData(
        backgroundColor: theme.primary,
        actionTextColor: theme.primaryInternal,
        disabledActionTextColor: theme.grey,
        // contentTextStyle: ,
        // elevation: ,
        // shape: ,
        // behavior: ,
        // width: ,
        // insetPadding: ,
        // showCloseIcon: ,
        // closeIconColor: ,
        // actionOverflowThreshold: ,
        // actionBackgroundColor: ,
        // disabledActionBackgroundColor: ,
      ),
      switchTheme: SwitchThemeData(
        thumbColor: MaterialStateProperty.all(
          theme.primary,
        ),
        trackColor: MaterialStateProperty.all(
          theme.primary,
        ),
        // trackOutlineColor: ,
        // trackOutlineWidth: ,
        // materialTapTargetSize: ,
        // mouseCursor: ,
        // overlayColor: ,
        // splashRadius: ,
        // thumbIcon: ,
      ),
      tabBarTheme: TabBarTheme(
        // indicator: ,
        indicatorColor: theme.primary,
        // indicatorSize: ,
        dividerColor: theme.grey,
        // dividerHeight: ,
        labelColor: theme.black,
        // labelPadding: ,
        // labelStyle: ,
        // unselectedLabelColor: ,
        // unselectedLabelStyle: ,
        // overlayColor: ,
        // splashFactory: ,
        // mouseCursor: ,
        // tabAlignment: ,
      ),
      textButtonTheme: const TextButtonThemeData(
          // style: ,
          ),
      textSelectionTheme: TextSelectionThemeData(
        // cursorColor: ,
        selectionColor: theme.greyLight,
        selectionHandleColor: theme.greyLight,
      ),
      timePickerTheme: TimePickerThemeData(
        backgroundColor: theme.backgroundComponent,
        // cancelButtonStyle: ,
        // confirmButtonStyle: ,
        // dayPeriodBorderSide: ,
        dayPeriodColor: theme.primary,
        // dayPeriodShape: ,
        dayPeriodTextColor: theme.primary,
        // dayPeriodTextStyle: ,
        // dialBackgroundColor: ,
        dialHandColor: theme.primary,
        dialTextColor: theme.primaryInternal,
        // dialTextStyle: ,
        // elevation: ,
        entryModeIconColor: theme.primaryInternal,
        // helpTextStyle: ,
        hourMinuteColor: theme.primaryInternal,
        // hourMinuteShape: ,
        hourMinuteTextColor: theme.primaryInternal,
        // hourMinuteTextStyle: ,
        // inputDecorationTheme: ,
        // padding: ,
        // shape: ,
      ),
      toggleButtonsTheme: ToggleButtonsThemeData(
        // textStyle: ,
        // constraints: ,
        color: theme.backgroundComponent,
        selectedColor: theme.primary,
        disabledColor: theme.grey,
        fillColor: theme.backgroundComponent,
        focusColor: theme.grey,
        highlightColor: theme.grey,
        hoverColor: theme.grey,
        splashColor: theme.grey,
        borderColor: theme.backgroundComponent,
        selectedBorderColor: theme.primary,
        disabledBorderColor: theme.grey,
        // borderRadius: ,
        // borderWidth: ,
      ),
      tooltipTheme: const TooltipThemeData(
          // height: ,
          // padding: ,
          // margin: ,
          // verticalOffset: ,
          // preferBelow: ,
          // excludeFromSemantics: ,
          // decoration: ,
          // textStyle: ,
          // textAlign: ,
          // waitDuration: ,
          // showDuration: ,
          // triggerMode: ,
          // enableFeedback: ,
          ),
    );
  }
}
